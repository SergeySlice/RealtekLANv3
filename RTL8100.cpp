/*
 *  RTL8100.cpp - Hardware methods for RealTek RTL8100 family chips
 *  RealtekR1000SL
 *
 *  Created by Chuck Fry on 10/8/09.
 *  Copyright 2009 Chuck Fry. All rights reserved.
 *
 * This software incorporates code from Realtek's open source Linux drivers
 * and the open source Mac OS X project RealtekR1000 by Dmitri Arekhta,
 * as modified by PSYSTAR Corporation.
 * 
 * Copyright(c) 2009 Realtek Semiconductor Corp. All rights reserved.
 * copyright PSYSTAR Corporation, 2008
 * 2006 (c) Dmitri Arekhta (DaemonES@gmail.com)
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */


#include "RealtekR1000SL.h"
#include "impl_defs.h"

/*** Static Initialization ***/
const u16 RealtekR1000::rtl8101_intr_mask =
	SYSErr | LinkChg | RxDescUnavail | TxErr | TxOK | RxErr | RxOK;
const u16 RealtekR1000::rtl8101_napi_event =
	RxOK | RxDescUnavail | RxFIFOOver | TxOK | TxErr;
const uint32_t RealtekR1000::rtl8101_rx_config =
    (Reserved2_data << RxCfgFIFOShift) | (RX_DMA_BURST << RxCfgDMAShift);

//rtl8101_hw_start
void RealtekR1000::RTL8100HwStart()
{
	RTL8100NicReset();
	// TODO rtl8101_set_rxbufsize(tp, dev);
	WriteMMIO8(Cfg9346, Cfg9346_Unlock);

	/* Set DMA burst size and Interframe Gap Time */
	WriteMMIO32(TxConfig, (TX_DMA_BURST << TxDMAShift) |
			(InterFrameGap << TxInterFrameGapShift));

	// Chip specific initializations
	u16 cplus_cmd = 0;
	if ((mcfg >= MCFG_8102E_1 && mcfg <= MCFG_8103E_3) || mcfg == MCFG_8401_1) {
		RTL8100HwStart1Gen();
	} else if (mcfg == MCFG_8105E_1) {
		RTL8105EHwStart1();
		cplus_cmd &= 0x2063;
	} else if (mcfg >= MCFG_8105E_2 && mcfg <= MCFG_8105E_4) {
		RTL8105EHwStart();
		cplus_cmd &= 0x2063;
	} else if (mcfg == MCFG_8402_1) {
		RTL8402HwStart();
	} else if ((mcfg >= MCFG_8106E_1) && (mcfg <= MCFG_8106EUS)) {
		RTL8106HwStart();
	}

	WriteMMIO8(ETThReg, ETTh);

	// I'm a little dubious that this needs to be done
	WriteMMIO16(CPlusCmd, cplus_cmd);

	/* Undocumented corner */
	WriteMMIO16(IntrMitigate, 0x0000);

	WriteMMIO32(TxDescStartAddr, static_cast<UInt32>(txdesc_phy_dma_addr));
#if defined(__LP64__)	
  WriteMMIO32(TxDescStartAddr + 4, static_cast<UInt32>(txdesc_phy_dma_addr >> 32));
#endif
	WriteMMIO32(RxDescStartAddr, static_cast<UInt32>(rxdesc_phy_dma_addr));
#if defined(__LP64__)  
	WriteMMIO32(RxDescStartAddr + 4, static_cast<UInt32>(rxdesc_phy_dma_addr >> 32));
#endif

	// Set Rx Config register
	WriteMMIO32(RxConfig,
			~(AcceptErr | AcceptRunt | AcceptBroadcast | AcceptMulticast |
			AcceptMyPhys | AcceptAllPhys) & (rx_config_base |
			(ReadMMIO32(RxConfig) & rx_config_mask)));

	// Clear interrupt register
	WriteMMIO16(IntrStatus, 0xFFFF);

	if (mcfg >= MCFG_8101E_1 && mcfg <= MCFG_8101E_3) {
		tx_tcp_csum_cmd = TxIPCS | TxTCPCS;
		tx_udp_csum_cmd = TxIPCS | TxUDPCS;
		tx_ip_csum_cmd  = TxIPCS;
	} else {
		tx_tcp_csum_cmd = TxIPCS_C | TxTCPCS_C;
		tx_udp_csum_cmd = TxIPCS_C | TxUDPCS_C;
		tx_ip_csum_cmd = TxIPCS_C;
	}

	// Enable all known interrupts
	WriteMMIO16(IntrMask, rtl8101_intr_mask);

	WriteMMIO8(Cfg9346, Cfg9346_Lock);

	RTL8100DSM(DSM_MAC_INIT);

	u8 options1 = ReadMMIO8(Config3);
	u8 options2 = ReadMMIO8(Config5);
	if ((options1 & LinkUp) || (options1 & MagicPacket) ||
		(options2 & UWF) || (options2 & BWF) || ( options2 & MWF)) {
		wol_enabled = WOL_ENABLED;
	} else {
		wol_enabled = WOL_DISABLED;
	}

	if (eee_enable == 1) {
		RTL8100EnableEEE();
	} else {
		RTL8100DisableEEE();
	}
}

void RealtekR1000::RTL8100HwStart1Gen()
{
	u8 link_control, device_control;

	if (mcfg == MCFG_8102E_1) {
	/* set PCI configuration space ossfet 0x70F to 0x17 */
		u32 csi_tmp = ReadCSI32(0x70C);
		WriteCSI32(0x70C, csi_tmp | 0x17000000);
	}

	link_control = pciDev->configRead8(0x81);
	if (link_control == 1) {
		pciDev->configWrite8(0x81, 0);
		WriteMMIO8(DBG_reg, 0x98);
		WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);
		WriteMMIO8(Config4, ReadMMIO8(Config4) | BIT_2);
		if (mcfg == MCFG_8103E_3) {
			WriteMMIO8(0xF4, ReadMMIO8(0xF4) | BIT_3);
			WriteMMIO8(0xF5, ReadMMIO8(0xF5) | BIT_2);
		}
		pciDev->configWrite8(0x81, 1);
		if (mcfg == MCFG_8103E_3) {
			if (ReadEPHY16(0x10) == 0x0008) {
				WriteEPHY16(0x10, 0x000C);
			}
		}
	}

	if (mcfg == MCFG_8103E_3) {
		link_control = pciDev->configRead8(0x80);
		if (link_control & 3) {
			WriteEPHY16(0x02, 0x011F);
		}
	}

	// Set PCI COnfig offset to 0x70 to 0x50
	/* Increase Tx performance */
	device_control = pciDev->configRead8(0x79);
	device_control &= ~0x70;
	device_control |= 0x50;
	pciDev->configWrite8(0x79, device_control);

	if (mcfg == MCFG_8102E_1 || mcfg == MCFG_8102E_2) {
		WriteMMIO8(Config1, 0x0F);
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
	} else if (mcfg == MCFG_8103E_1 || mcfg == MCFG_8103E_2 ||
			 mcfg == MCFG_8401_1) {
		WriteMMIO8(0xF4, 0x01);
	} else if (mcfg == MCFG_8103E_3) {
		WriteMMIO8(0xF4, ReadMMIO8(0xF4) | BIT_0);
	}

	// In the original source, there's a lot of bit shifts to get 0xDF9{8,C}
	if (mcfg == MCFG_8102E_1 || mcfg == MCFG_8102E_2 ||
	    mcfg == MCFG_8103E_1) {
		WriteMMIO16(CPlusCmd, ReadMMIO8(CPlusCmd) & ~0xDF98);
	} else if(mcfg == MCFG_8103E_2 || mcfg == MCFG_8103E_3 ||
	        mcfg == MCFG_8401_1) {
		WriteMMIO16(CPlusCmd, ReadMMIO8(CPlusCmd) & ~0xDF9C);
	}

	if (mcfg == MCFG_8103E_1 || mcfg == MCFG_8103E_2 || mcfg == MCFG_8103E_3 ||
	    mcfg == MCFG_8401_1) {
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
	}

	//E-PHY config
	switch (mcfg){
	case MCFG_8102E_1:
		WriteEPHY16(0x03, 0xC2F9);
		break;
	case MCFG_8102E_2:
		WriteEPHY16(0x01, 0x6FE5);
		WriteEPHY16(0x03, 0xD7D9);
		break;
	case MCFG_8103E_1:
		WriteEPHY16(0x06, 0xAF35);
		break;
	case MCFG_8103E_2:
		WriteMMIO8(0xF5, ReadMMIO8(0xF5) | BIT_2);
		WriteEPHY16(0x19, 0xEC90);
		WriteEPHY16(0x01, 0x6FE5);
		WriteEPHY16(0x03, 0x05D9);
		WriteEPHY16(0x06, 0xAF35);
		break;
	case MCFG_8103E_3:
		WriteEPHY16(0x01, 0x6FE5);
		WriteEPHY16(0x03, 0x05D9);
		WriteEPHY16(0x06, 0xAF35);
		WriteEPHY16(0x19, 0xECFA);
		break;
	case MCFG_8401_1:
		WriteEPHY16(0x06, 0xAF25);
		WriteEPHY16(0x07, 0x8E68);
		break;
	default:
		break;
	}
}

void RealtekR1000::RTL8105EHwStart1()
{
	/* Set PCI configuration space offset 0x70F to 0x27 */
	u32 csi_tmp = ReadCSI32(0x70C) & 0x00FFFFFF;
	WriteCSI32(0x70C, csi_tmp | 0x27000000);

	WriteMMIO8(ETThReg, 0x0C);

	/* Set CPI config offset 0x79 to 0x50 */
	pciDev->configWrite8(0x79, 0x50);

	/* TODO Enable tx checksum offload */
	
	WriteMMIO8(0xF3, ReadMMIO8(0xF3) | BIT_5);
	WriteMMIO8(0xF3, ReadMMIO8(0xF3) & ~BIT_5);

	WriteMMIO8(0xD0, ReadMMIO8(0xD0) | 0xC0);
//	WriteMMIO8(0xD0, ReadMMIO8(0xD0) | 0xC6);
  WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7 | BIT_6 | BIT_5 | BIT_4 | BIT_2 | BIT_1);


	WriteMMIO8(Config5, (ReadMMIO8(Config5) & ~0x08) | BIT_0);
	WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);

	WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
	
	/* Set EPHY registers */
	u16 data16;

	data16 = ReadEPHY16(0x00) & ~ 0x0200;
	data16 |= 0x100;
	WriteEPHY16(0x00, data16);

	data16 = ReadEPHY16(0x00);
	data16 |= 0x0004;
	WriteEPHY16(0x00, data16);

	data16 = ReadEPHY16(0x06) & ~0x0002;
	data16 |= 0x0001;
	WriteEPHY16(0x06, data16);

	data16 = ReadEPHY16(0x06);
	data16 |= 0x0030;
	WriteEPHY16(0x06, data16);

	data16 = ReadEPHY16(0x07);
	data16 |= 0x2000;
	WriteEPHY16(0x07, data16);

	data16 = ReadEPHY16(0x00);
	data16 |= 0x0020;
	WriteEPHY16(0x00, data16);

	data16 = ReadEPHY16(0x03) & ~0x5800;
	data16 |= 0x2000;
	WriteEPHY16(0x03, data16);

	data16 = ReadEPHY16(0x03);
	data16 |= 0x0001;
	WriteEPHY16(0x03, data16);

	data16 = ReadEPHY16(0x01) & ~0x0800;
	data16 |= 0x1000;
	WriteEPHY16(0x01, data16);

	data16 = ReadEPHY16(0x07);
	data16 |= 0x4000;
	WriteEPHY16(0x07, data16);

	data16 = ReadEPHY16(0x1E);
	data16 |= 0x2000;
	WriteEPHY16(0x1E, data16);

	WriteEPHY16(0x19, 0xFE6C);

	data16 = ReadEPHY16(0x0A);
	data16 |= 0x0040;
	WriteEPHY16(0x0A, data16);
}

void RealtekR1000::RTL8105EHwStart()
{
	u8 pci_config;

	/* TODO enable chesksum offload */

	pci_config = pciDev->configRead8(0x80);
	if (pci_config & 0x03)
	{
		WriteMMIO8(Config5, ReadMMIO8(Config5) | BIT_0);
		WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_7);
		WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7);
		WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);
	}

	WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_5 | BIT_3);
	WriteMMIO8(0xF2, ReadMMIO8(0xF2) & ~BIT_0);
	WriteMMIO8(0xD3, ReadMMIO8(0xD3) | BIT_3 | BIT_2);
	WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_6);
	WriteMMIO16(0xE0, ReadMMIO16(0xE0) & ~0xDF9C);

	u16 data16;
	data16 = ReadEPHY16(0x07);
	data16 |= 0x4000;
	WriteEPHY16(0x07, data16);

	data16 = ReadEPHY16(0x19);
	data16 |= 0x0200;
	WriteEPHY16(0x19, data16);

	data16 = ReadEPHY16(0x19);
	data16 |= 0x0020;
	WriteEPHY16(0x19, data16);

	data16 = ReadEPHY16(0x1E);
	data16 |= 0x2000;
	WriteEPHY16(0x1E, data16);

	data16 = ReadEPHY16(0x03);
	data16 |= 0x0001;
	WriteEPHY16(0x03, data16);

	data16 = ReadEPHY16(0x19);
	data16 |= 0x0100;
	WriteEPHY16(0x19, data16);

	data16 = ReadEPHY16(0x19);
	data16 |= 0x0004;
	WriteEPHY16(0x19, data16);

	data16 = ReadEPHY16(0x0A);
	data16 |= 0x0020;
	WriteEPHY16(0x0A, data16);

	if (mcfg == MCFG_8105E_2) {
		WriteMMIO8(Config5, ReadMMIO8(Config5) & ~BIT_0);
	} else if (mcfg == MCFG_8105E_3 || mcfg == MCFG_8105E_4) {
		data16 = ReadEPHY16(0x1E);
		data16 |= 0x8000;
		WriteEPHY16(0x1E, data16);
	}

	if (mcfg == MCFG_8105E_4) {
		if ((ReadMMIO8(0x8C) & BIT_28) && !(ReadMMIO8(0xEF) & BIT_2)) {
			WriteGMII16(0x1F, 0x0005);
			data16 = ReadGMII16(0x1A);
			data16 &= ~(BIT_8 | BIT_0);
			WriteGMII16(0x0A, data16);
			WriteGMII16(0x1F, 0x0000);
		} else if (ReadMMIO8(0xEF) & BIT_2) {
			WriteGMII16(0x1F, 0x0001);
			data16 = ReadGMII16(0x1B) | BIT_2;
			WriteGMII16(0x1B, data16);
			WriteGMII16(0x1F, 0x0000);
		}
	}
}

void RealtekR1000::RTL8402HwStart()
{
	u8 device_control;

	u32 csi_tmp = ReadCSI32(0x70C) & 0x00FFFFFF;
	WriteCSI32(0x70C, csi_tmp | 0x17000000);

	/* Set PCI config space offset 0x70 to 0x50 */
	device_control = pciDev->configRead8(0x79);
	device_control &= ~0x70;
	device_control |= 0x50;
	pciDev->configWrite8(0x79, device_control);

	WriteERI(0xC8, 4, 0x00000002, ERIAR_ExGMAC);
	WriteERI(0xE8, 4, 0x00000006, ERIAR_ExGMAC);

	WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);
	WriteMMIO8(0xD3, ReadMMIO8(0xD3) & ~BIT_7);
	csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
	csi_tmp &= ~BIT_0;
	WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
	csi_tmp |= BIT_0;
	WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);

	WriteEPHY16(0x19, 0xFF64);

	WriteMMIO8(Config5, ReadMMIO8(Config5) | BIT_0);
	WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);

	WriteERI(0xC0, 2, 0x00000000, ERIAR_ExGMAC);
	WriteERI(0xB8, 2, 0x00000000, ERIAR_ExGMAC);
	WriteERI(0xD5, 1, 0x0000000E, ERIAR_ExGMAC);
}

void RealtekR1000::RTL8106HwStart()
{
  WriteMMIO8(Config5, ReadMMIO8(Config5) & ~BIT_0);
  WriteMMIO8(Config2, ReadMMIO8(Config2) & ~BIT_7);
  WriteMMIO8(0xF1, ReadMMIO8(0xF1) & ~BIT_7);
  if (mcfg == MCFG_8106E_1 || mcfg == MCFG_8106E_2) {
    u8	pci_config;
    
    cp_cmd &= 0x2063;
    
    /* tx checksum offload enable */
    features |= NETIF_F_IP_CSUM;
    
    pci_config = pciDev->configRead8(0x80);
    if (pci_config & 0x03) {
      WriteMMIO8(Config5, ReadMMIO8(Config5) | BIT_0);
      WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_7);
      if (aspm)
        WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7);
      WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);
    }
    
    WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_5 | BIT_3);
    WriteMMIO8(0xF2, ReadMMIO8(0xF2) & ~BIT_0);
    WriteMMIO8(0xD3, ReadMMIO8(0xD3) | BIT_3 | BIT_2);
    WriteMMIO8(0xD0, ReadMMIO8(0xD0) & ~BIT_6);
    WriteMMIO16(0xE0, ReadMMIO16(0xE0) & ~0xDF9C);
  } else if (mcfg == MCFG_8106EUS) {
    u8 data8;
    u8 device_control;
    u32 csi_tmp;
    
    //		set_offset70F(tp, 0x27);
    //		set_offset79(tp, 0x50);
    /*set PCI configuration space offset 0x70F to 0x37*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70C) & 0x00ffffff;
    WriteCSI32(0x70C, csi_tmp | 0x17000000);
    
    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);
    
    
    
    WriteERI(0xC8, 4, 0x00080002, ERIAR_ExGMAC);
    WriteERI(0xCC, 1, 0x38, ERIAR_ExGMAC);
    WriteERI(0xD0, 1, 0x48, ERIAR_ExGMAC);
    WriteERI(0xE8, 4, 0x00100006, ERIAR_ExGMAC);
    
    WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);
    
    csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    csi_tmp |= BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    
    WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
    
    cp_cmd = ReadMMIO16(CPlusCmd) &
    ~(EnableBist | Macdbgo_oe | Force_halfdup |
      Force_rxflow_en | Force_txflow_en |
      Cxpl_dbg_sel | ASF | PktCntrDisable |
      Macdbgo_sel);
    
    WriteMMIO8(0x1B, ReadMMIO8(0x1B) & ~0x07);
    
    WriteMMIO8(TDFNR, 0x4);
    
    if (aspm)
      WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7);
    
    /* tx checksum offload enable */
    features |= NETIF_F_IP_CSUM;
    
    WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_6);
    WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_6);
    
    WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_7);
    
    WriteERI(0xC0, 2, 0x0000, ERIAR_ExGMAC);
    WriteERI(0xB8, 4, 0x00000000, ERIAR_ExGMAC);
    
    WriteERI(0x5F0, 2, 0x4f87, ERIAR_ExGMAC);
    
    csi_tmp = ReadERI(0xD4, 4, ERIAR_ExGMAC);
    csi_tmp  |= ( BIT_7 | BIT_8 | BIT_9 | BIT_10 | BIT_11 | BIT_12 );
    WriteERI(0xD4, 4, csi_tmp, ERIAR_ExGMAC);
    
    csi_tmp = ReadERI(0x1B0, 4, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_12;
    WriteERI(0x1B0, 4, csi_tmp, ERIAR_ExGMAC);
    
    csi_tmp = ReadERI(0x2FC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~(BIT_0 | BIT_1 | BIT_2);
    csi_tmp |= BIT_0;
    WriteERI(0x2FC, 1, csi_tmp, ERIAR_ExGMAC);
    
    csi_tmp = ReadERI(0x1D0, 1, ERIAR_ExGMAC);
    csi_tmp |= BIT_1;
    WriteERI(0x1D0, 1, csi_tmp, ERIAR_ExGMAC);
    
    if (aspm) {
      csi_tmp = ReadERI(0x3F2, 2, ERIAR_ExGMAC);
      csi_tmp &= ~( BIT_8 | BIT_9  | BIT_10 | BIT_11  | BIT_12  | BIT_13  | BIT_14 | BIT_15 );
      csi_tmp |= ( BIT_9 | BIT_10 | BIT_13  | BIT_14 | BIT_15 );
      WriteERI(0x3F2, 2, csi_tmp, ERIAR_ExGMAC);
      csi_tmp = ReadERI(0x3F5, 1, ERIAR_ExGMAC);
      csi_tmp |= BIT_6 | BIT_7;
      WriteERI(0x3F5, 1, csi_tmp, ERIAR_ExGMAC);
      mac_ocp_write(0xE02C, 0x1880);
      mac_ocp_write(0xE02E, 0x4880);
      WriteERI(0x2E8, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2EA, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2EC, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2E2, 2, 0x883C, ERIAR_ExGMAC);
      WriteERI(0x2E4, 2, 0x8C12, ERIAR_ExGMAC);
      WriteERI(0x2E6, 2, 0x9003, ERIAR_ExGMAC);
      csi_tmp = ReadERI(0x3FA, 2, ERIAR_ExGMAC);
      csi_tmp |= BIT_14;
      WriteERI(0x3FA, 2, csi_tmp, ERIAR_ExGMAC);
      csi_tmp = ReadERI(0x3F2, 2, ERIAR_ExGMAC);
      csi_tmp &= ~(BIT_0 | BIT_1);
      csi_tmp |= BIT_0;
      data8 = pciDev->configRead8(0x99);
      if (!(data8 & (BIT_5 | BIT_6)))
        csi_tmp &= ~(BIT_1);
      if (!(data8 & BIT_2))
        csi_tmp &= ~(BIT_0 );
      
      WriteERI(0x3F2, 2, csi_tmp, ERIAR_ExGMAC);
      
      data8 = pciDev->configRead8(0x180);
      if (data8 & (BIT_0|BIT_1)) {
        csi_tmp = ReadERI(0x1E2, 1, ERIAR_ExGMAC);
        csi_tmp |= BIT_2;
        WriteERI(0x1E2, 1, csi_tmp, ERIAR_ExGMAC);
      } else {
        csi_tmp = ReadERI(0x1E2, 1, ERIAR_ExGMAC);
        csi_tmp &= ~BIT_2;
        WriteERI(0x1E2, 1, csi_tmp, ERIAR_ExGMAC);
      }
    }  
  }
}

void RealtekR1000::RTL8100HwPhyConfig()
{
	switch (mcfg)
	{
		case MCFG_8102E_1:
		case MCFG_8102E_2:
		case MCFG_8103E_1:
			RTL8102EHwPhyConfig();
			break;
		case MCFG_8401_1:
			RTL8401PhyHwConfig();
			break;
		case MCFG_8105E_1:
			RTL8105E1HwPhyConfig();
			break;
		case MCFG_8105E_2:
		case MCFG_8105E_3:
		case MCFG_8105E_4:
			RTL8105EHwPhyConfig();
      break;
		case MCFG_8402_1:
			RTL8402HwPhyConfig();
      break;
		case MCFG_8106E_1:
		case MCFG_8106E_2:
		case MCFG_8106EUS:
			RTL8106EHwPhyConfig();
		default:
			break;
	}
}

void RealtekR1000::RTL8102EHwPhyConfig()
{
	WriteGMII16(0x1F, 0x0000);
	WriteGMII16(0x11, ReadGMII16(0x11) | 0x1000);
	WriteGMII16(0x19, ReadGMII16(0x19) | 0x2000);
	WriteGMII16(0x10, ReadGMII16(0x10) | 0x8000);

	WriteGMII16(0x1F, 0x0003);
	WriteGMII16(0x08, 0x441D);
	if (mcfg != MCFG_8103E_1)
	{
		WriteGMII16(0x01, 0x9100);
	}

	WriteGMII16(0x1F, 0x0000);
}

void RealtekR1000::RTL8401PhyHwConfig()
{
	WriteGMII16(0x1F, 0x0000);
	WriteGMII16(0x11, ReadGMII16(0x11) | BIT_12);
	WriteGMII16(0x1F, 0x0002);
	WriteGMII16(0x0F, ReadGMII16(0x0F) | BIT_0 | BIT_1);
	WriteGMII16(0x1F, 0x0000);

	RTL8100WritePhyIO(0x0E, 0x0068);
	RTL8100WritePhyIO(0x0E, 0x0069);
	RTL8100WritePhyIO(0x0E, 0x006A);
	RTL8100WritePhyIO(0x0E, 0x006B);
	RTL8100WritePhyIO(0x0E, 0x006C);
}

void RealtekR1000::RTL8105E1HwPhyConfig()
{
	u32 gphy_val;

	WriteMMIO8(0xF3, ReadMMIO8(0xF3) | BIT_2);

	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x00, 0x1800);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0023);
	WriteGMII16(0x17, 0x0117);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1E, 0x002C);
	WriteGMII16(0x1B, 0x5000);
	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x16, 0x4104);
	for (int i = 0; i < 200; i++) {
		IODelay(100);
		gphy_val = ReadGMII16(0x1E);
		gphy_val &= 0x03FF;
		if (gphy_val==0x000C)
			break;
	}
	WriteGMII16(0x1f, 0x0005);
	for (int i = 0; i < 200; i++) {
		IODelay(100);
		gphy_val = ReadGMII16(0x07);
		if ((gphy_val & BIT_5)==0)
			break;
	}
	gphy_val = ReadGMII16(0x07);
	if (gphy_val & BIT_5) {
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x00a1);
		WriteGMII16(0x17, 0x1000);
		WriteGMII16(0x17, 0x0000);
		WriteGMII16(0x17, 0x2000);
		WriteGMII16(0x1e, 0x002f);
		WriteGMII16(0x18, 0x9bfb);
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x07, 0x0000);
		WriteGMII16(0x1f, 0x0000);
	}
	WriteGMII16(0x1f, 0x0005);
	WriteGMII16(0x05, 0xfff6);
	WriteGMII16(0x06, 0x0080);
	gphy_val = ReadGMII16(0x00);
	gphy_val &= ~(BIT_7);
	WriteGMII16(0x00, gphy_val);
	WriteGMII16(0x1f, 0x0002);
	gphy_val = ReadGMII16(0x08);
	gphy_val &= ~(BIT_7);
	WriteGMII16(0x08, gphy_val);
	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0023);
	WriteGMII16(0x16, 0x0306);
	WriteGMII16(0x16, 0x0307);
	WriteGMII16(0x15, 0x000e);
	WriteGMII16(0x19, 0x000a);
	WriteGMII16(0x15, 0x0010);
	WriteGMII16(0x19, 0x0008);
	WriteGMII16(0x15, 0x0018);
	WriteGMII16(0x19, 0x4801);
	WriteGMII16(0x15, 0x0019);
	WriteGMII16(0x19, 0x6801);
	WriteGMII16(0x15, 0x001a);
	WriteGMII16(0x19, 0x66a1);
	WriteGMII16(0x15, 0x001f);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0020);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0021);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0022);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0023);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0024);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0025);
	WriteGMII16(0x19, 0x64a1);
	WriteGMII16(0x15, 0x0026);
	WriteGMII16(0x19, 0x40ea);
	WriteGMII16(0x15, 0x0027);
	WriteGMII16(0x19, 0x4503);
	WriteGMII16(0x15, 0x0028);
	WriteGMII16(0x19, 0x9f00);
	WriteGMII16(0x15, 0x0029);
	WriteGMII16(0x19, 0xa631);
	WriteGMII16(0x15, 0x002a);
	WriteGMII16(0x19, 0x9717);
	WriteGMII16(0x15, 0x002b);
	WriteGMII16(0x19, 0x302c);
	WriteGMII16(0x15, 0x002c);
	WriteGMII16(0x19, 0x4802);
	WriteGMII16(0x15, 0x002d);
	WriteGMII16(0x19, 0x58da);
	WriteGMII16(0x15, 0x002e);
	WriteGMII16(0x19, 0x400d);
	WriteGMII16(0x15, 0x002f);
	WriteGMII16(0x19, 0x4488);
	WriteGMII16(0x15, 0x0030);
	WriteGMII16(0x19, 0x9e00);
	WriteGMII16(0x15, 0x0031);
	WriteGMII16(0x19, 0x63c8);
	WriteGMII16(0x15, 0x0032);
	WriteGMII16(0x19, 0x6481);
	WriteGMII16(0x15, 0x0033);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0034);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0035);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0036);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0037);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0038);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0039);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x003a);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x003b);
	WriteGMII16(0x19, 0x63e8);
	WriteGMII16(0x15, 0x003c);
	WriteGMII16(0x19, 0x7d00);
	WriteGMII16(0x15, 0x003d);
	WriteGMII16(0x19, 0x59d4);
	WriteGMII16(0x15, 0x003e);
	WriteGMII16(0x19, 0x63f8);
	WriteGMII16(0x15, 0x0040);
	WriteGMII16(0x19, 0x64a1);
	WriteGMII16(0x15, 0x0041);
	WriteGMII16(0x19, 0x30de);
	WriteGMII16(0x15, 0x0044);
	WriteGMII16(0x19, 0x480f);
	WriteGMII16(0x15, 0x0045);
	WriteGMII16(0x19, 0x6800);
	WriteGMII16(0x15, 0x0046);
	WriteGMII16(0x19, 0x6680);
	WriteGMII16(0x15, 0x0047);
	WriteGMII16(0x19, 0x7c10);
	WriteGMII16(0x15, 0x0048);
	WriteGMII16(0x19, 0x63c8);
	WriteGMII16(0x15, 0x0049);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x004a);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x004b);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x004c);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x004d);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x004e);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x004f);
	WriteGMII16(0x19, 0x40ea);
	WriteGMII16(0x15, 0x0050);
	WriteGMII16(0x19, 0x4503);
	WriteGMII16(0x15, 0x0051);
	WriteGMII16(0x19, 0x58ca);
	WriteGMII16(0x15, 0x0052);
	WriteGMII16(0x19, 0x63c8);
	WriteGMII16(0x15, 0x0053);
	WriteGMII16(0x19, 0x63d8);
	WriteGMII16(0x15, 0x0054);
	WriteGMII16(0x19, 0x66a0);
	WriteGMII16(0x15, 0x0055);
	WriteGMII16(0x19, 0x9f00);
	WriteGMII16(0x15, 0x0056);
	WriteGMII16(0x19, 0x3000);
	WriteGMII16(0x15, 0x006E);
	WriteGMII16(0x19, 0x9afa);
	WriteGMII16(0x15, 0x00a1);
	WriteGMII16(0x19, 0x3044);
	WriteGMII16(0x15, 0x00ab);
	WriteGMII16(0x19, 0x5820);
	WriteGMII16(0x15, 0x00ac);
	WriteGMII16(0x19, 0x5e04);
	WriteGMII16(0x15, 0x00ad);
	WriteGMII16(0x19, 0xb60c);
	WriteGMII16(0x15, 0x00af);
	WriteGMII16(0x19, 0x000a);
	WriteGMII16(0x15, 0x00b2);
	WriteGMII16(0x19, 0x30b9);
	WriteGMII16(0x15, 0x00b9);
	WriteGMII16(0x19, 0x4408);
	WriteGMII16(0x15, 0x00ba);
	WriteGMII16(0x19, 0x480b);
	WriteGMII16(0x15, 0x00bb);
	WriteGMII16(0x19, 0x5e00);
	WriteGMII16(0x15, 0x00bc);
	WriteGMII16(0x19, 0x405f);
	WriteGMII16(0x15, 0x00bd);
	WriteGMII16(0x19, 0x4448);
	WriteGMII16(0x15, 0x00be);
	WriteGMII16(0x19, 0x4020);
	WriteGMII16(0x15, 0x00bf);
	WriteGMII16(0x19, 0x4468);
	WriteGMII16(0x15, 0x00c0);
	WriteGMII16(0x19, 0x9c02);
	WriteGMII16(0x15, 0x00c1);
	WriteGMII16(0x19, 0x58a0);
	WriteGMII16(0x15, 0x00c2);
	WriteGMII16(0x19, 0xb605);
	WriteGMII16(0x15, 0x00c3);
	WriteGMII16(0x19, 0xc0d3);
	WriteGMII16(0x15, 0x00c4);
	WriteGMII16(0x19, 0x00e6);
	WriteGMII16(0x15, 0x00c5);
	WriteGMII16(0x19, 0xdaec);
	WriteGMII16(0x15, 0x00c6);
	WriteGMII16(0x19, 0x00fa);
	WriteGMII16(0x15, 0x00c7);
	WriteGMII16(0x19, 0x9df9);
	WriteGMII16(0x15, 0x00c8);
	WriteGMII16(0x19, 0x307a);
	WriteGMII16(0x15, 0x0112);
	WriteGMII16(0x19, 0x6421);
	WriteGMII16(0x15, 0x0113);
	WriteGMII16(0x19, 0x7c08);
	WriteGMII16(0x15, 0x0114);
	WriteGMII16(0x19, 0x63f0);
	WriteGMII16(0x15, 0x0115);
	WriteGMII16(0x19, 0x4003);
	WriteGMII16(0x15, 0x0116);
	WriteGMII16(0x19, 0x4418);
	WriteGMII16(0x15, 0x0117);
	WriteGMII16(0x19, 0x9b00);
	WriteGMII16(0x15, 0x0118);
	WriteGMII16(0x19, 0x6461);
	WriteGMII16(0x15, 0x0119);
	WriteGMII16(0x19, 0x64e1);
	WriteGMII16(0x15, 0x011a);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0150);
	WriteGMII16(0x19, 0x6461);
	WriteGMII16(0x15, 0x0151);
	WriteGMII16(0x19, 0x4003);
	WriteGMII16(0x15, 0x0152);
	WriteGMII16(0x19, 0x4540);
	WriteGMII16(0x15, 0x0153);
	WriteGMII16(0x19, 0x9f00);
	WriteGMII16(0x15, 0x0155);
	WriteGMII16(0x19, 0x6421);
	WriteGMII16(0x15, 0x0156);
	WriteGMII16(0x19, 0x64a1);
	WriteGMII16(0x15, 0x021e);
	WriteGMII16(0x19, 0x5410);
	WriteGMII16(0x15, 0x0225);
	WriteGMII16(0x19, 0x5400);
	WriteGMII16(0x15, 0x023D);
	WriteGMII16(0x19, 0x4050);
	WriteGMII16(0x15, 0x0295);
	WriteGMII16(0x19, 0x6c08);
	WriteGMII16(0x15, 0x02bd);
	WriteGMII16(0x19, 0xa523);
	WriteGMII16(0x15, 0x02be);
	WriteGMII16(0x19, 0x32ca);
	WriteGMII16(0x15, 0x02ca);
	WriteGMII16(0x19, 0x48b3);
	WriteGMII16(0x15, 0x02cb);
	WriteGMII16(0x19, 0x4020);
	WriteGMII16(0x15, 0x02cc);
	WriteGMII16(0x19, 0x4823);
	WriteGMII16(0x15, 0x02cd);
	WriteGMII16(0x19, 0x4510);
	WriteGMII16(0x15, 0x02ce);
	WriteGMII16(0x19, 0xb63a);
	WriteGMII16(0x15, 0x02cf);
	WriteGMII16(0x19, 0x7dc8);
	WriteGMII16(0x15, 0x02d6);
	WriteGMII16(0x19, 0x9bf8);
	WriteGMII16(0x15, 0x02d8);
	WriteGMII16(0x19, 0x85f6);
	WriteGMII16(0x15, 0x02d9);
	WriteGMII16(0x19, 0x32e0);
	WriteGMII16(0x15, 0x02e0);
	WriteGMII16(0x19, 0x4834);
	WriteGMII16(0x15, 0x02e1);
	WriteGMII16(0x19, 0x6c08);
	WriteGMII16(0x15, 0x02e2);
	WriteGMII16(0x19, 0x4020);
	WriteGMII16(0x15, 0x02e3);
	WriteGMII16(0x19, 0x4824);
	WriteGMII16(0x15, 0x02e4);
	WriteGMII16(0x19, 0x4520);
	WriteGMII16(0x15, 0x02e5);
	WriteGMII16(0x19, 0x4008);
	WriteGMII16(0x15, 0x02e6);
	WriteGMII16(0x19, 0x4560);
	WriteGMII16(0x15, 0x02e7);
	WriteGMII16(0x19, 0x9d04);
	WriteGMII16(0x15, 0x02e8);
	WriteGMII16(0x19, 0x48c4);
	WriteGMII16(0x15, 0x02e9);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x02ea);
	WriteGMII16(0x19, 0x4844);
	WriteGMII16(0x15, 0x02eb);
	WriteGMII16(0x19, 0x7dc8);
	WriteGMII16(0x15, 0x02f0);
	WriteGMII16(0x19, 0x9cf7);
	WriteGMII16(0x15, 0x02f1);
	WriteGMII16(0x19, 0xdf94);
	WriteGMII16(0x15, 0x02f2);
	WriteGMII16(0x19, 0x0002);
	WriteGMII16(0x15, 0x02f3);
	WriteGMII16(0x19, 0x6810);
	WriteGMII16(0x15, 0x02f4);
	WriteGMII16(0x19, 0xb614);
	WriteGMII16(0x15, 0x02f5);
	WriteGMII16(0x19, 0xc42b);
	WriteGMII16(0x15, 0x02f6);
	WriteGMII16(0x19, 0x00d4);
	WriteGMII16(0x15, 0x02f7);
	WriteGMII16(0x19, 0xc455);
	WriteGMII16(0x15, 0x02f8);
	WriteGMII16(0x19, 0x0093);
	WriteGMII16(0x15, 0x02f9);
	WriteGMII16(0x19, 0x92ee);
	WriteGMII16(0x15, 0x02fa);
	WriteGMII16(0x19, 0xefed);
	WriteGMII16(0x15, 0x02fb);
	WriteGMII16(0x19, 0x3312);
	WriteGMII16(0x15, 0x0312);
	WriteGMII16(0x19, 0x49b5);
	WriteGMII16(0x15, 0x0313);
	WriteGMII16(0x19, 0x7d00);
	WriteGMII16(0x15, 0x0314);
	WriteGMII16(0x19, 0x4d00);
	WriteGMII16(0x15, 0x0315);
	WriteGMII16(0x19, 0x6810);
	WriteGMII16(0x15, 0x031e);
	WriteGMII16(0x19, 0x404f);
	WriteGMII16(0x15, 0x031f);
	WriteGMII16(0x19, 0x44c8);
	WriteGMII16(0x15, 0x0320);
	WriteGMII16(0x19, 0xd64f);
	WriteGMII16(0x15, 0x0321);
	WriteGMII16(0x19, 0x00e7);
	WriteGMII16(0x15, 0x0322);
	WriteGMII16(0x19, 0x7c08);
	WriteGMII16(0x15, 0x0323);
	WriteGMII16(0x19, 0x8203);
	WriteGMII16(0x15, 0x0324);
	WriteGMII16(0x19, 0x4d48);
	WriteGMII16(0x15, 0x0325);
	WriteGMII16(0x19, 0x3327);
	WriteGMII16(0x15, 0x0326);
	WriteGMII16(0x19, 0x4d40);
	WriteGMII16(0x15, 0x0327);
	WriteGMII16(0x19, 0xc8d7);
	WriteGMII16(0x15, 0x0328);
	WriteGMII16(0x19, 0x0003);
	WriteGMII16(0x15, 0x0329);
	WriteGMII16(0x19, 0x7c20);
	WriteGMII16(0x15, 0x032a);
	WriteGMII16(0x19, 0x4c20);
	WriteGMII16(0x15, 0x032b);
	WriteGMII16(0x19, 0xc8ed);
	WriteGMII16(0x15, 0x032c);
	WriteGMII16(0x19, 0x00f4);
	WriteGMII16(0x15, 0x032d);
	WriteGMII16(0x19, 0x82b3);
	WriteGMII16(0x15, 0x032e);
	WriteGMII16(0x19, 0xd11d);
	WriteGMII16(0x15, 0x032f);
	WriteGMII16(0x19, 0x00b1);
	WriteGMII16(0x15, 0x0330);
	WriteGMII16(0x19, 0xde18);
	WriteGMII16(0x15, 0x0331);
	WriteGMII16(0x19, 0x0008);
	WriteGMII16(0x15, 0x0332);
	WriteGMII16(0x19, 0x91ee);
	WriteGMII16(0x15, 0x0333);
	WriteGMII16(0x19, 0x3339);
	WriteGMII16(0x15, 0x033a);
	WriteGMII16(0x19, 0x4064);
	WriteGMII16(0x15, 0x0340);
	WriteGMII16(0x19, 0x9e06);
	WriteGMII16(0x15, 0x0341);
	WriteGMII16(0x19, 0x7c08);
	WriteGMII16(0x15, 0x0342);
	WriteGMII16(0x19, 0x8203);
	WriteGMII16(0x15, 0x0343);
	WriteGMII16(0x19, 0x4d48);
	WriteGMII16(0x15, 0x0344);
	WriteGMII16(0x19, 0x3346);
	WriteGMII16(0x15, 0x0345);
	WriteGMII16(0x19, 0x4d40);
	WriteGMII16(0x15, 0x0346);
	WriteGMII16(0x19, 0xd11d);
	WriteGMII16(0x15, 0x0347);
	WriteGMII16(0x19, 0x0099);
	WriteGMII16(0x15, 0x0348);
	WriteGMII16(0x19, 0xbb17);
	WriteGMII16(0x15, 0x0349);
	WriteGMII16(0x19, 0x8102);
	WriteGMII16(0x15, 0x034a);
	WriteGMII16(0x19, 0x334d);
	WriteGMII16(0x15, 0x034b);
	WriteGMII16(0x19, 0xa22c);
	WriteGMII16(0x15, 0x034c);
	WriteGMII16(0x19, 0x3397);
	WriteGMII16(0x15, 0x034d);
	WriteGMII16(0x19, 0x91f2);
	WriteGMII16(0x15, 0x034e);
	WriteGMII16(0x19, 0xc218);
	WriteGMII16(0x15, 0x034f);
	WriteGMII16(0x19, 0x00f0);
	WriteGMII16(0x15, 0x0350);
	WriteGMII16(0x19, 0x3397);
	WriteGMII16(0x15, 0x0351);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0364);
	WriteGMII16(0x19, 0xbc05);
	WriteGMII16(0x15, 0x0367);
	WriteGMII16(0x19, 0xa1fc);
	WriteGMII16(0x15, 0x0368);
	WriteGMII16(0x19, 0x3377);
	WriteGMII16(0x15, 0x0369);
	WriteGMII16(0x19, 0x328b);
	WriteGMII16(0x15, 0x036a);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x15, 0x0377);
	WriteGMII16(0x19, 0x4b97);
	WriteGMII16(0x15, 0x0378);
	WriteGMII16(0x19, 0x6818);
	WriteGMII16(0x15, 0x0379);
	WriteGMII16(0x19, 0x4b07);
	WriteGMII16(0x15, 0x037a);
	WriteGMII16(0x19, 0x40ac);
	WriteGMII16(0x15, 0x037b);
	WriteGMII16(0x19, 0x4445);
	WriteGMII16(0x15, 0x037c);
	WriteGMII16(0x19, 0x404e);
	WriteGMII16(0x15, 0x037d);
	WriteGMII16(0x19, 0x4461);
	WriteGMII16(0x15, 0x037e);
	WriteGMII16(0x19, 0x9c09);
	WriteGMII16(0x15, 0x037f);
	WriteGMII16(0x19, 0x63da);
	WriteGMII16(0x15, 0x0380);
	WriteGMII16(0x19, 0x5440);
	WriteGMII16(0x15, 0x0381);
	WriteGMII16(0x19, 0x4b98);
	WriteGMII16(0x15, 0x0382);
	WriteGMII16(0x19, 0x7c60);
	WriteGMII16(0x15, 0x0383);
	WriteGMII16(0x19, 0x4c00);
	WriteGMII16(0x15, 0x0384);
	WriteGMII16(0x19, 0x4b08);
	WriteGMII16(0x15, 0x0385);
	WriteGMII16(0x19, 0x63d8);
	WriteGMII16(0x15, 0x0386);
	WriteGMII16(0x19, 0x338d);
	WriteGMII16(0x15, 0x0387);
	WriteGMII16(0x19, 0xd64f);
	WriteGMII16(0x15, 0x0388);
	WriteGMII16(0x19, 0x0080);
	WriteGMII16(0x15, 0x0389);
	WriteGMII16(0x19, 0x820c);
	WriteGMII16(0x15, 0x038a);
	WriteGMII16(0x19, 0xa10b);
	WriteGMII16(0x15, 0x038b);
	WriteGMII16(0x19, 0x9df3);
	WriteGMII16(0x15, 0x038c);
	WriteGMII16(0x19, 0x3395);
	WriteGMII16(0x15, 0x038d);
	WriteGMII16(0x19, 0xd64f);
	WriteGMII16(0x15, 0x038e);
	WriteGMII16(0x19, 0x00f9);
	WriteGMII16(0x15, 0x038f);
	WriteGMII16(0x19, 0xc017);
	WriteGMII16(0x15, 0x0390);
	WriteGMII16(0x19, 0x0005);
	WriteGMII16(0x15, 0x0391);
	WriteGMII16(0x19, 0x6c0b);
	WriteGMII16(0x15, 0x0392);
	WriteGMII16(0x19, 0xa103);
	WriteGMII16(0x15, 0x0393);
	WriteGMII16(0x19, 0x6c08);
	WriteGMII16(0x15, 0x0394);
	WriteGMII16(0x19, 0x9df9);
	WriteGMII16(0x15, 0x0395);
	WriteGMII16(0x19, 0x6c08);
	WriteGMII16(0x15, 0x0396);
	WriteGMII16(0x19, 0x3397);
	WriteGMII16(0x15, 0x0399);
	WriteGMII16(0x19, 0x6810);
	WriteGMII16(0x15, 0x03a4);
	WriteGMII16(0x19, 0x7c08);
	WriteGMII16(0x15, 0x03a5);
	WriteGMII16(0x19, 0x8203);
	WriteGMII16(0x15, 0x03a6);
	WriteGMII16(0x19, 0x4d08);
	WriteGMII16(0x15, 0x03a7);
	WriteGMII16(0x19, 0x33a9);
	WriteGMII16(0x15, 0x03a8);
	WriteGMII16(0x19, 0x4d00);
	WriteGMII16(0x15, 0x03a9);
	WriteGMII16(0x19, 0x9bfa);
	WriteGMII16(0x15, 0x03aa);
	WriteGMII16(0x19, 0x33b6);
	WriteGMII16(0x15, 0x03bb);
	WriteGMII16(0x19, 0x4056);
	WriteGMII16(0x15, 0x03bc);
	WriteGMII16(0x19, 0x44e9);
	WriteGMII16(0x15, 0x03bd);
	WriteGMII16(0x19, 0x4054);
	WriteGMII16(0x15, 0x03be);
	WriteGMII16(0x19, 0x44f8);
	WriteGMII16(0x15, 0x03bf);
	WriteGMII16(0x19, 0xd64f);
	WriteGMII16(0x15, 0x03c0);
	WriteGMII16(0x19, 0x0037);
	WriteGMII16(0x15, 0x03c1);
	WriteGMII16(0x19, 0xbd37);
	WriteGMII16(0x15, 0x03c2);
	WriteGMII16(0x19, 0x9cfd);
	WriteGMII16(0x15, 0x03c3);
	WriteGMII16(0x19, 0xc639);
	WriteGMII16(0x15, 0x03c4);
	WriteGMII16(0x19, 0x0011);
	WriteGMII16(0x15, 0x03c5);
	WriteGMII16(0x19, 0x9b03);
	WriteGMII16(0x15, 0x03c6);
	WriteGMII16(0x19, 0x7c01);
	WriteGMII16(0x15, 0x03c7);
	WriteGMII16(0x19, 0x4c01);
	WriteGMII16(0x15, 0x03c8);
	WriteGMII16(0x19, 0x9e03);
	WriteGMII16(0x15, 0x03c9);
	WriteGMII16(0x19, 0x7c20);
	WriteGMII16(0x15, 0x03ca);
	WriteGMII16(0x19, 0x4c20);
	WriteGMII16(0x15, 0x03cb);
	WriteGMII16(0x19, 0x9af4);
	WriteGMII16(0x15, 0x03cc);
	WriteGMII16(0x19, 0x7c12);
	WriteGMII16(0x15, 0x03cd);
	WriteGMII16(0x19, 0x4c52);
	WriteGMII16(0x15, 0x03ce);
	WriteGMII16(0x19, 0x4470);
	WriteGMII16(0x15, 0x03cf);
	WriteGMII16(0x19, 0x7c12);
	WriteGMII16(0x15, 0x03d0);
	WriteGMII16(0x19, 0x4c40);
	WriteGMII16(0x15, 0x03d1);
	WriteGMII16(0x19, 0x33bf);
	WriteGMII16(0x15, 0x03d6);
	WriteGMII16(0x19, 0x4047);
	WriteGMII16(0x15, 0x03d7);
	WriteGMII16(0x19, 0x4469);
	WriteGMII16(0x15, 0x03d8);
	WriteGMII16(0x19, 0x492b);
	WriteGMII16(0x15, 0x03d9);
	WriteGMII16(0x19, 0x4479);
	WriteGMII16(0x15, 0x03da);
	WriteGMII16(0x19, 0x7c09);
	WriteGMII16(0x15, 0x03db);
	WriteGMII16(0x19, 0x8203);
	WriteGMII16(0x15, 0x03dc);
	WriteGMII16(0x19, 0x4d48);
	WriteGMII16(0x15, 0x03dd);
	WriteGMII16(0x19, 0x33df);
	WriteGMII16(0x15, 0x03de);
	WriteGMII16(0x19, 0x4d40);
	WriteGMII16(0x15, 0x03df);
	WriteGMII16(0x19, 0xd64f);
	WriteGMII16(0x15, 0x03e0);
	WriteGMII16(0x19, 0x0017);
	WriteGMII16(0x15, 0x03e1);
	WriteGMII16(0x19, 0xbd17);
	WriteGMII16(0x15, 0x03e2);
	WriteGMII16(0x19, 0x9b03);
	WriteGMII16(0x15, 0x03e3);
	WriteGMII16(0x19, 0x7c20);
	WriteGMII16(0x15, 0x03e4);
	WriteGMII16(0x19, 0x4c20);
	WriteGMII16(0x15, 0x03e5);
	WriteGMII16(0x19, 0x88f5);
	WriteGMII16(0x15, 0x03e6);
	WriteGMII16(0x19, 0xc428);
	WriteGMII16(0x15, 0x03e7);
	WriteGMII16(0x19, 0x0008);
	WriteGMII16(0x15, 0x03e8);
	WriteGMII16(0x19, 0x9af2);
	WriteGMII16(0x15, 0x03e9);
	WriteGMII16(0x19, 0x7c12);
	WriteGMII16(0x15, 0x03ea);
	WriteGMII16(0x19, 0x4c52);
	WriteGMII16(0x15, 0x03eb);
	WriteGMII16(0x19, 0x4470);
	WriteGMII16(0x15, 0x03ec);
	WriteGMII16(0x19, 0x7c12);
	WriteGMII16(0x15, 0x03ed);
	WriteGMII16(0x19, 0x4c40);
	WriteGMII16(0x15, 0x03ee);
	WriteGMII16(0x19, 0x33da);
	WriteGMII16(0x15, 0x03ef);
	WriteGMII16(0x19, 0x3312);
	WriteGMII16(0x16, 0x0306);
	WriteGMII16(0x16, 0x0300);
	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x17, 0x2179);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0040);
	WriteGMII16(0x18, 0x0645);
	WriteGMII16(0x19, 0xe200);
	WriteGMII16(0x18, 0x0655);
	WriteGMII16(0x19, 0x9000);
	WriteGMII16(0x18, 0x0d05);
	WriteGMII16(0x19, 0xbe00);
	WriteGMII16(0x18, 0x0d15);
	WriteGMII16(0x19, 0xd300);
	WriteGMII16(0x18, 0x0d25);
	WriteGMII16(0x19, 0xfe00);
	WriteGMII16(0x18, 0x0d35);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x0d45);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x0d55);
	WriteGMII16(0x19, 0x1000);
	WriteGMII16(0x18, 0x0d65);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x0d75);
	WriteGMII16(0x19, 0x8200);
	WriteGMII16(0x18, 0x0d85);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x0d95);
	WriteGMII16(0x19, 0x7000);
	WriteGMII16(0x18, 0x0da5);
	WriteGMII16(0x19, 0x0f00);
	WriteGMII16(0x18, 0x0db5);
	WriteGMII16(0x19, 0x0100);
	WriteGMII16(0x18, 0x0dc5);
	WriteGMII16(0x19, 0x9b00);
	WriteGMII16(0x18, 0x0dd5);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x0de5);
	WriteGMII16(0x19, 0xe000);
	WriteGMII16(0x18, 0x0df5);
	WriteGMII16(0x19, 0xef00);
	WriteGMII16(0x18, 0x16d5);
	WriteGMII16(0x19, 0xe200);
	WriteGMII16(0x18, 0x16e5);
	WriteGMII16(0x19, 0xab00);
	WriteGMII16(0x18, 0x2904);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x2914);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x2924);
	WriteGMII16(0x19, 0x0100);
	WriteGMII16(0x18, 0x2934);
	WriteGMII16(0x19, 0x2000);
	WriteGMII16(0x18, 0x2944);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2954);
	WriteGMII16(0x19, 0x4600);
	WriteGMII16(0x18, 0x2964);
	WriteGMII16(0x19, 0xfc00);
	WriteGMII16(0x18, 0x2974);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2984);
	WriteGMII16(0x19, 0x5000);
	WriteGMII16(0x18, 0x2994);
	WriteGMII16(0x19, 0x9d00);
	WriteGMII16(0x18, 0x29a4);
	WriteGMII16(0x19, 0xff00);
	WriteGMII16(0x18, 0x29b4);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x29c4);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x29d4);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x29e4);
	WriteGMII16(0x19, 0x2000);
	WriteGMII16(0x18, 0x29f4);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2a04);
	WriteGMII16(0x19, 0xe600);
	WriteGMII16(0x18, 0x2a14);
	WriteGMII16(0x19, 0xff00);
	WriteGMII16(0x18, 0x2a24);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2a34);
	WriteGMII16(0x19, 0x5000);
	WriteGMII16(0x18, 0x2a44);
	WriteGMII16(0x19, 0x8500);
	WriteGMII16(0x18, 0x2a54);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x2a64);
	WriteGMII16(0x19, 0xac00);
	WriteGMII16(0x18, 0x2a74);
	WriteGMII16(0x19, 0x0800);
	WriteGMII16(0x18, 0x2a84);
	WriteGMII16(0x19, 0xfc00);
	WriteGMII16(0x18, 0x2a94);
	WriteGMII16(0x19, 0xe000);
	WriteGMII16(0x18, 0x2aa4);
	WriteGMII16(0x19, 0x7400);
	WriteGMII16(0x18, 0x2ab4);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x2ac4);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x2ad4);
	WriteGMII16(0x19, 0x0100);
	WriteGMII16(0x18, 0x2ae4);
	WriteGMII16(0x19, 0xff00);
	WriteGMII16(0x18, 0x2af4);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2b04);
	WriteGMII16(0x19, 0x4400);
	WriteGMII16(0x18, 0x2b14);
	WriteGMII16(0x19, 0xfc00);
	WriteGMII16(0x18, 0x2b24);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2b34);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x2b44);
	WriteGMII16(0x19, 0x9d00);
	WriteGMII16(0x18, 0x2b54);
	WriteGMII16(0x19, 0xff00);
	WriteGMII16(0x18, 0x2b64);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x2b74);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x2b84);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2b94);
	WriteGMII16(0x19, 0xff00);
	WriteGMII16(0x18, 0x2ba4);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2bb4);
	WriteGMII16(0x19, 0xfc00);
	WriteGMII16(0x18, 0x2bc4);
	WriteGMII16(0x19, 0xff00);
	WriteGMII16(0x18, 0x2bd4);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2be4);
	WriteGMII16(0x19, 0x4000);
	WriteGMII16(0x18, 0x2bf4);
	WriteGMII16(0x19, 0x8900);
	WriteGMII16(0x18, 0x2c04);
	WriteGMII16(0x19, 0x8300);
	WriteGMII16(0x18, 0x2c14);
	WriteGMII16(0x19, 0xe000);
	WriteGMII16(0x18, 0x2c24);
	WriteGMII16(0x19, 0x0000);
	WriteGMII16(0x18, 0x2c34);
	WriteGMII16(0x19, 0xac00);
	WriteGMII16(0x18, 0x2c44);
	WriteGMII16(0x19, 0x0800);
	WriteGMII16(0x18, 0x2c54);
	WriteGMII16(0x19, 0xfa00);
	WriteGMII16(0x18, 0x2c64);
	WriteGMII16(0x19, 0xe100);
	WriteGMII16(0x18, 0x2c74);
	WriteGMII16(0x19, 0x7f00);
	WriteGMII16(0x18, 0x0001);
	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x17, 0x2100);
	WriteGMII16(0x1f, 0x0005);
	WriteGMII16(0x05, 0xfff6);
	WriteGMII16(0x06, 0x0080);
	WriteGMII16(0x05, 0x8000);
	WriteGMII16(0x06, 0xd480);
	WriteGMII16(0x06, 0xc1e4);
	WriteGMII16(0x06, 0x8b9a);
	WriteGMII16(0x06, 0xe58b);
	WriteGMII16(0x06, 0x9bee);
	WriteGMII16(0x06, 0x8b83);
	WriteGMII16(0x06, 0x41bf);
	WriteGMII16(0x06, 0x8b88);
	WriteGMII16(0x06, 0xec00);
	WriteGMII16(0x06, 0x19a9);
	WriteGMII16(0x06, 0x8b90);
	WriteGMII16(0x06, 0xf9ee);
	WriteGMII16(0x06, 0xfff6);
	WriteGMII16(0x06, 0x00ee);
	WriteGMII16(0x06, 0xfff7);
	WriteGMII16(0x06, 0xffe0);
	WriteGMII16(0x06, 0xe140);
	WriteGMII16(0x06, 0xe1e1);
	WriteGMII16(0x06, 0x41f7);
	WriteGMII16(0x06, 0x2ff6);
	WriteGMII16(0x06, 0x28e4);
	WriteGMII16(0x06, 0xe140);
	WriteGMII16(0x06, 0xe5e1);
	WriteGMII16(0x06, 0x41f7);
	WriteGMII16(0x06, 0x0002);
	WriteGMII16(0x06, 0x020c);
	WriteGMII16(0x06, 0x0202);
	WriteGMII16(0x06, 0x1d02);
	WriteGMII16(0x06, 0x0230);
	WriteGMII16(0x06, 0x0202);
	WriteGMII16(0x06, 0x4002);
	WriteGMII16(0x06, 0x028b);
	WriteGMII16(0x06, 0x0280);
	WriteGMII16(0x06, 0x6c02);
	WriteGMII16(0x06, 0x8085);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x88e1);
	WriteGMII16(0x06, 0x8b89);
	WriteGMII16(0x06, 0x1e01);
	WriteGMII16(0x06, 0xe18b);
	WriteGMII16(0x06, 0x8a1e);
	WriteGMII16(0x06, 0x01e1);
	WriteGMII16(0x06, 0x8b8b);
	WriteGMII16(0x06, 0x1e01);
	WriteGMII16(0x06, 0xe18b);
	WriteGMII16(0x06, 0x8c1e);
	WriteGMII16(0x06, 0x01e1);
	WriteGMII16(0x06, 0x8b8d);
	WriteGMII16(0x06, 0x1e01);
	WriteGMII16(0x06, 0xe18b);
	WriteGMII16(0x06, 0x8e1e);
	WriteGMII16(0x06, 0x01a0);
	WriteGMII16(0x06, 0x00c7);
	WriteGMII16(0x06, 0xaec3);
	WriteGMII16(0x06, 0xf8e0);
	WriteGMII16(0x06, 0x8b8d);
	WriteGMII16(0x06, 0xad20);
	WriteGMII16(0x06, 0x10ee);
	WriteGMII16(0x06, 0x8b8d);
	WriteGMII16(0x06, 0x0002);
	WriteGMII16(0x06, 0x1310);
	WriteGMII16(0x06, 0x0280);
	WriteGMII16(0x06, 0xc602);
	WriteGMII16(0x06, 0x1f0c);
	WriteGMII16(0x06, 0x0227);
	WriteGMII16(0x06, 0x49fc);
	WriteGMII16(0x06, 0x04f8);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x8ead);
	WriteGMII16(0x06, 0x200b);
	WriteGMII16(0x06, 0xf620);
	WriteGMII16(0x06, 0xe48b);
	WriteGMII16(0x06, 0x8e02);
	WriteGMII16(0x06, 0x852d);
	WriteGMII16(0x06, 0x021b);
	WriteGMII16(0x06, 0x67ad);
	WriteGMII16(0x06, 0x2211);
	WriteGMII16(0x06, 0xf622);
	WriteGMII16(0x06, 0xe48b);
	WriteGMII16(0x06, 0x8e02);
	WriteGMII16(0x06, 0x2ba5);
	WriteGMII16(0x06, 0x022a);
	WriteGMII16(0x06, 0x2402);
	WriteGMII16(0x06, 0x82e5);
	WriteGMII16(0x06, 0x022a);
	WriteGMII16(0x06, 0xf0ad);
	WriteGMII16(0x06, 0x2511);
	WriteGMII16(0x06, 0xf625);
	WriteGMII16(0x06, 0xe48b);
	WriteGMII16(0x06, 0x8e02);
	WriteGMII16(0x06, 0x8445);
	WriteGMII16(0x06, 0x0204);
	WriteGMII16(0x06, 0x0302);
	WriteGMII16(0x06, 0x19cc);
	WriteGMII16(0x06, 0x022b);
	WriteGMII16(0x06, 0x5bfc);
	WriteGMII16(0x06, 0x04ee);
	WriteGMII16(0x06, 0x8b8d);
	WriteGMII16(0x06, 0x0105);
	WriteGMII16(0x06, 0xf8f9);
	WriteGMII16(0x06, 0xfae0);
	WriteGMII16(0x06, 0x8b81);
	WriteGMII16(0x06, 0xac26);
	WriteGMII16(0x06, 0x08e0);
	WriteGMII16(0x06, 0x8b81);
	WriteGMII16(0x06, 0xac21);
	WriteGMII16(0x06, 0x02ae);
	WriteGMII16(0x06, 0x6bee);
	WriteGMII16(0x06, 0xe0ea);
	WriteGMII16(0x06, 0x00ee);
	WriteGMII16(0x06, 0xe0eb);
	WriteGMII16(0x06, 0x00e2);
	WriteGMII16(0x06, 0xe07c);
	WriteGMII16(0x06, 0xe3e0);
	WriteGMII16(0x06, 0x7da5);
	WriteGMII16(0x06, 0x1111);
	WriteGMII16(0x06, 0x15d2);
	WriteGMII16(0x06, 0x60d6);
	WriteGMII16(0x06, 0x6666);
	WriteGMII16(0x06, 0x0207);
	WriteGMII16(0x06, 0x6cd2);
	WriteGMII16(0x06, 0xa0d6);
	WriteGMII16(0x06, 0xaaaa);
	WriteGMII16(0x06, 0x0207);
	WriteGMII16(0x06, 0x6c02);
	WriteGMII16(0x06, 0x201d);
	WriteGMII16(0x06, 0xae44);
	WriteGMII16(0x06, 0xa566);
	WriteGMII16(0x06, 0x6602);
	WriteGMII16(0x06, 0xae38);
	WriteGMII16(0x06, 0xa5aa);
	WriteGMII16(0x06, 0xaa02);
	WriteGMII16(0x06, 0xae32);
	WriteGMII16(0x06, 0xeee0);
	WriteGMII16(0x06, 0xea04);
	WriteGMII16(0x06, 0xeee0);
	WriteGMII16(0x06, 0xeb06);
	WriteGMII16(0x06, 0xe2e0);
	WriteGMII16(0x06, 0x7ce3);
	WriteGMII16(0x06, 0xe07d);
	WriteGMII16(0x06, 0xe0e0);
	WriteGMII16(0x06, 0x38e1);
	WriteGMII16(0x06, 0xe039);
	WriteGMII16(0x06, 0xad2e);
	WriteGMII16(0x06, 0x21ad);
	WriteGMII16(0x06, 0x3f13);
	WriteGMII16(0x06, 0xe0e4);
	WriteGMII16(0x06, 0x14e1);
	WriteGMII16(0x06, 0xe415);
	WriteGMII16(0x06, 0x6880);
	WriteGMII16(0x06, 0xe4e4);
	WriteGMII16(0x06, 0x14e5);
	WriteGMII16(0x06, 0xe415);
	WriteGMII16(0x06, 0x0220);
	WriteGMII16(0x06, 0x1dae);
	WriteGMII16(0x06, 0x0bac);
	WriteGMII16(0x06, 0x3e02);
	WriteGMII16(0x06, 0xae06);
	WriteGMII16(0x06, 0x0281);
	WriteGMII16(0x06, 0x4602);
	WriteGMII16(0x06, 0x2057);
	WriteGMII16(0x06, 0xfefd);
	WriteGMII16(0x06, 0xfc04);
	WriteGMII16(0x06, 0xf8e0);
	WriteGMII16(0x06, 0x8b81);
	WriteGMII16(0x06, 0xad26);
	WriteGMII16(0x06, 0x0302);
	WriteGMII16(0x06, 0x20a7);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x81ad);
	WriteGMII16(0x06, 0x2109);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x2eac);
	WriteGMII16(0x06, 0x2003);
	WriteGMII16(0x06, 0x0281);
	WriteGMII16(0x06, 0x61fc);
	WriteGMII16(0x06, 0x04f8);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x81ac);
	WriteGMII16(0x06, 0x2505);
	WriteGMII16(0x06, 0x0222);
	WriteGMII16(0x06, 0xaeae);
	WriteGMII16(0x06, 0x0302);
	WriteGMII16(0x06, 0x8172);
	WriteGMII16(0x06, 0xfc04);
	WriteGMII16(0x06, 0xf8f9);
	WriteGMII16(0x06, 0xfaef);
	WriteGMII16(0x06, 0x69fa);
	WriteGMII16(0x06, 0xe086);
	WriteGMII16(0x06, 0x20a0);
	WriteGMII16(0x06, 0x8016);
	WriteGMII16(0x06, 0xe086);
	WriteGMII16(0x06, 0x21e1);
	WriteGMII16(0x06, 0x8b33);
	WriteGMII16(0x06, 0x1b10);
	WriteGMII16(0x06, 0x9e06);
	WriteGMII16(0x06, 0x0223);
	WriteGMII16(0x06, 0x91af);
	WriteGMII16(0x06, 0x8252);
	WriteGMII16(0x06, 0xee86);
	WriteGMII16(0x06, 0x2081);
	WriteGMII16(0x06, 0xaee4);
	WriteGMII16(0x06, 0xa081);
	WriteGMII16(0x06, 0x1402);
	WriteGMII16(0x06, 0x2399);
	WriteGMII16(0x06, 0xbf25);
	WriteGMII16(0x06, 0xcc02);
	WriteGMII16(0x06, 0x2d21);
	WriteGMII16(0x06, 0xee86);
	WriteGMII16(0x06, 0x2100);
	WriteGMII16(0x06, 0xee86);
	WriteGMII16(0x06, 0x2082);
	WriteGMII16(0x06, 0xaf82);
	WriteGMII16(0x06, 0x52a0);
	WriteGMII16(0x06, 0x8232);
	WriteGMII16(0x06, 0xe086);
	WriteGMII16(0x06, 0x21e1);
	WriteGMII16(0x06, 0x8b32);
	WriteGMII16(0x06, 0x1b10);
	WriteGMII16(0x06, 0x9e06);
	WriteGMII16(0x06, 0x0223);
	WriteGMII16(0x06, 0x91af);
	WriteGMII16(0x06, 0x8252);
	WriteGMII16(0x06, 0xee86);
	WriteGMII16(0x06, 0x2100);
	WriteGMII16(0x06, 0xd000);
	WriteGMII16(0x06, 0x0282);
	WriteGMII16(0x06, 0x5910);
	WriteGMII16(0x06, 0xa004);
	WriteGMII16(0x06, 0xf9e0);
	WriteGMII16(0x06, 0x861f);
	WriteGMII16(0x06, 0xa000);
	WriteGMII16(0x06, 0x07ee);
	WriteGMII16(0x06, 0x8620);
	WriteGMII16(0x06, 0x83af);
	WriteGMII16(0x06, 0x8178);
	WriteGMII16(0x06, 0x0224);
	WriteGMII16(0x06, 0x0102);
	WriteGMII16(0x06, 0x2399);
	WriteGMII16(0x06, 0xae72);
	WriteGMII16(0x06, 0xa083);
	WriteGMII16(0x06, 0x4b1f);
	WriteGMII16(0x06, 0x55d0);
	WriteGMII16(0x06, 0x04bf);
	WriteGMII16(0x06, 0x8615);
	WriteGMII16(0x06, 0x1a90);
	WriteGMII16(0x06, 0x0c54);
	WriteGMII16(0x06, 0xd91e);
	WriteGMII16(0x06, 0x31b0);
	WriteGMII16(0x06, 0xf4e0);
	WriteGMII16(0x06, 0xe022);
	WriteGMII16(0x06, 0xe1e0);
	WriteGMII16(0x06, 0x23ad);
	WriteGMII16(0x06, 0x2e0c);
	WriteGMII16(0x06, 0xef02);
	WriteGMII16(0x06, 0xef12);
	WriteGMII16(0x06, 0x0e44);
	WriteGMII16(0x06, 0xef23);
	WriteGMII16(0x06, 0x0e54);
	WriteGMII16(0x06, 0xef21);
	WriteGMII16(0x06, 0xe6e4);
	WriteGMII16(0x06, 0x2ae7);
	WriteGMII16(0x06, 0xe42b);
	WriteGMII16(0x06, 0xe2e4);
	WriteGMII16(0x06, 0x28e3);
	WriteGMII16(0x06, 0xe429);
	WriteGMII16(0x06, 0x6d20);
	WriteGMII16(0x06, 0x00e6);
	WriteGMII16(0x06, 0xe428);
	WriteGMII16(0x06, 0xe7e4);
	WriteGMII16(0x06, 0x29bf);
	WriteGMII16(0x06, 0x25ca);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0x21ee);
	WriteGMII16(0x06, 0x8620);
	WriteGMII16(0x06, 0x84ee);
	WriteGMII16(0x06, 0x8621);
	WriteGMII16(0x06, 0x00af);
	WriteGMII16(0x06, 0x8178);
	WriteGMII16(0x06, 0xa084);
	WriteGMII16(0x06, 0x19e0);
	WriteGMII16(0x06, 0x8621);
	WriteGMII16(0x06, 0xe18b);
	WriteGMII16(0x06, 0x341b);
	WriteGMII16(0x06, 0x109e);
	WriteGMII16(0x06, 0x0602);
	WriteGMII16(0x06, 0x2391);
	WriteGMII16(0x06, 0xaf82);
	WriteGMII16(0x06, 0x5202);
	WriteGMII16(0x06, 0x241f);
	WriteGMII16(0x06, 0xee86);
	WriteGMII16(0x06, 0x2085);
	WriteGMII16(0x06, 0xae08);
	WriteGMII16(0x06, 0xa085);
	WriteGMII16(0x06, 0x02ae);
	WriteGMII16(0x06, 0x0302);
	WriteGMII16(0x06, 0x2442);
	WriteGMII16(0x06, 0xfeef);
	WriteGMII16(0x06, 0x96fe);
	WriteGMII16(0x06, 0xfdfc);
	WriteGMII16(0x06, 0x04f8);
	WriteGMII16(0x06, 0xf9fa);
	WriteGMII16(0x06, 0xef69);
	WriteGMII16(0x06, 0xfad1);
	WriteGMII16(0x06, 0x801f);
	WriteGMII16(0x06, 0x66e2);
	WriteGMII16(0x06, 0xe0ea);
	WriteGMII16(0x06, 0xe3e0);
	WriteGMII16(0x06, 0xeb5a);
	WriteGMII16(0x06, 0xf81e);
	WriteGMII16(0x06, 0x20e6);
	WriteGMII16(0x06, 0xe0ea);
	WriteGMII16(0x06, 0xe5e0);
	WriteGMII16(0x06, 0xebd3);
	WriteGMII16(0x06, 0x05b3);
	WriteGMII16(0x06, 0xfee2);
	WriteGMII16(0x06, 0xe07c);
	WriteGMII16(0x06, 0xe3e0);
	WriteGMII16(0x06, 0x7dad);
	WriteGMII16(0x06, 0x3703);
	WriteGMII16(0x06, 0x7dff);
	WriteGMII16(0x06, 0xff0d);
	WriteGMII16(0x06, 0x581c);
	WriteGMII16(0x06, 0x55f8);
	WriteGMII16(0x06, 0xef46);
	WriteGMII16(0x06, 0x0282);
	WriteGMII16(0x06, 0xc7ef);
	WriteGMII16(0x06, 0x65ef);
	WriteGMII16(0x06, 0x54fc);
	WriteGMII16(0x06, 0xac30);
	WriteGMII16(0x06, 0x2b11);
	WriteGMII16(0x06, 0xa188);
	WriteGMII16(0x06, 0xcabf);
	WriteGMII16(0x06, 0x860e);
	WriteGMII16(0x06, 0xef10);
	WriteGMII16(0x06, 0x0c11);
	WriteGMII16(0x06, 0x1a91);
	WriteGMII16(0x06, 0xda19);
	WriteGMII16(0x06, 0xdbf8);
	WriteGMII16(0x06, 0xef46);
	WriteGMII16(0x06, 0x021e);
	WriteGMII16(0x06, 0x17ef);
	WriteGMII16(0x06, 0x54fc);
	WriteGMII16(0x06, 0xad30);
	WriteGMII16(0x06, 0x0fef);
	WriteGMII16(0x06, 0x5689);
	WriteGMII16(0x06, 0xde19);
	WriteGMII16(0x06, 0xdfe2);
	WriteGMII16(0x06, 0x861f);
	WriteGMII16(0x06, 0xbf86);
	WriteGMII16(0x06, 0x161a);
	WriteGMII16(0x06, 0x90de);
	WriteGMII16(0x06, 0xfeef);
	WriteGMII16(0x06, 0x96fe);
	WriteGMII16(0x06, 0xfdfc);
	WriteGMII16(0x06, 0x04ac);
	WriteGMII16(0x06, 0x2707);
	WriteGMII16(0x06, 0xac37);
	WriteGMII16(0x06, 0x071a);
	WriteGMII16(0x06, 0x54ae);
	WriteGMII16(0x06, 0x11ac);
	WriteGMII16(0x06, 0x3707);
	WriteGMII16(0x06, 0xae00);
	WriteGMII16(0x06, 0x1a54);
	WriteGMII16(0x06, 0xac37);
	WriteGMII16(0x06, 0x07d0);
	WriteGMII16(0x06, 0x01d5);
	WriteGMII16(0x06, 0xffff);
	WriteGMII16(0x06, 0xae02);
	WriteGMII16(0x06, 0xd000);
	WriteGMII16(0x06, 0x04f8);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x83ad);
	WriteGMII16(0x06, 0x2444);
	WriteGMII16(0x06, 0xe0e0);
	WriteGMII16(0x06, 0x22e1);
	WriteGMII16(0x06, 0xe023);
	WriteGMII16(0x06, 0xad22);
	WriteGMII16(0x06, 0x3be0);
	WriteGMII16(0x06, 0x8abe);
	WriteGMII16(0x06, 0xa000);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x28de);
	WriteGMII16(0x06, 0xae42);
	WriteGMII16(0x06, 0xa001);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x28f1);
	WriteGMII16(0x06, 0xae3a);
	WriteGMII16(0x06, 0xa002);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x8344);
	WriteGMII16(0x06, 0xae32);
	WriteGMII16(0x06, 0xa003);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x299a);
	WriteGMII16(0x06, 0xae2a);
	WriteGMII16(0x06, 0xa004);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x29ae);
	WriteGMII16(0x06, 0xae22);
	WriteGMII16(0x06, 0xa005);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x29d7);
	WriteGMII16(0x06, 0xae1a);
	WriteGMII16(0x06, 0xa006);
	WriteGMII16(0x06, 0x0502);
	WriteGMII16(0x06, 0x29fe);
	WriteGMII16(0x06, 0xae12);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xc000);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xc100);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xc600);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xbe00);
	WriteGMII16(0x06, 0xae00);
	WriteGMII16(0x06, 0xfc04);
	WriteGMII16(0x06, 0xf802);
	WriteGMII16(0x06, 0x2a67);
	WriteGMII16(0x06, 0xe0e0);
	WriteGMII16(0x06, 0x22e1);
	WriteGMII16(0x06, 0xe023);
	WriteGMII16(0x06, 0x0d06);
	WriteGMII16(0x06, 0x5803);
	WriteGMII16(0x06, 0xa002);
	WriteGMII16(0x06, 0x02ae);
	WriteGMII16(0x06, 0x2da0);
	WriteGMII16(0x06, 0x0102);
	WriteGMII16(0x06, 0xae2d);
	WriteGMII16(0x06, 0xa000);
	WriteGMII16(0x06, 0x4de0);
	WriteGMII16(0x06, 0xe200);
	WriteGMII16(0x06, 0xe1e2);
	WriteGMII16(0x06, 0x01ad);
	WriteGMII16(0x06, 0x2444);
	WriteGMII16(0x06, 0xe08a);
	WriteGMII16(0x06, 0xc2e4);
	WriteGMII16(0x06, 0x8ac4);
	WriteGMII16(0x06, 0xe08a);
	WriteGMII16(0x06, 0xc3e4);
	WriteGMII16(0x06, 0x8ac5);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xbe03);
	WriteGMII16(0x06, 0xe08b);
	WriteGMII16(0x06, 0x83ad);
	WriteGMII16(0x06, 0x253a);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xbe05);
	WriteGMII16(0x06, 0xae34);
	WriteGMII16(0x06, 0xe08a);
	WriteGMII16(0x06, 0xceae);
	WriteGMII16(0x06, 0x03e0);
	WriteGMII16(0x06, 0x8acf);
	WriteGMII16(0x06, 0xe18a);
	WriteGMII16(0x06, 0xc249);
	WriteGMII16(0x06, 0x05e5);
	WriteGMII16(0x06, 0x8ac4);
	WriteGMII16(0x06, 0xe18a);
	WriteGMII16(0x06, 0xc349);
	WriteGMII16(0x06, 0x05e5);
	WriteGMII16(0x06, 0x8ac5);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xbe05);
	WriteGMII16(0x06, 0x022a);
	WriteGMII16(0x06, 0xb6ac);
	WriteGMII16(0x06, 0x2012);
	WriteGMII16(0x06, 0x0283);
	WriteGMII16(0x06, 0xbaac);
	WriteGMII16(0x06, 0x200c);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xc100);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xc600);
	WriteGMII16(0x06, 0xee8a);
	WriteGMII16(0x06, 0xbe02);
	WriteGMII16(0x06, 0xfc04);
	WriteGMII16(0x06, 0xd000);
	WriteGMII16(0x06, 0x0283);
	WriteGMII16(0x06, 0xcc59);
	WriteGMII16(0x06, 0x0f39);
	WriteGMII16(0x06, 0x02aa);
	WriteGMII16(0x06, 0x04d0);
	WriteGMII16(0x06, 0x01ae);
	WriteGMII16(0x06, 0x02d0);
	WriteGMII16(0x06, 0x0004);
	WriteGMII16(0x06, 0xf9fa);
	WriteGMII16(0x06, 0xe2e2);
	WriteGMII16(0x06, 0xd2e3);
	WriteGMII16(0x06, 0xe2d3);
	WriteGMII16(0x06, 0xf95a);
	WriteGMII16(0x06, 0xf7e6);
	WriteGMII16(0x06, 0xe2d2);
	WriteGMII16(0x06, 0xe7e2);
	WriteGMII16(0x06, 0xd3e2);
	WriteGMII16(0x06, 0xe02c);
	WriteGMII16(0x06, 0xe3e0);
	WriteGMII16(0x06, 0x2df9);
	WriteGMII16(0x06, 0x5be0);
	WriteGMII16(0x06, 0x1e30);
	WriteGMII16(0x06, 0xe6e0);
	WriteGMII16(0x06, 0x2ce7);
	WriteGMII16(0x06, 0xe02d);
	WriteGMII16(0x06, 0xe2e2);
	WriteGMII16(0x06, 0xcce3);
	WriteGMII16(0x06, 0xe2cd);
	WriteGMII16(0x06, 0xf95a);
	WriteGMII16(0x06, 0x0f6a);
	WriteGMII16(0x06, 0x50e6);
	WriteGMII16(0x06, 0xe2cc);
	WriteGMII16(0x06, 0xe7e2);
	WriteGMII16(0x06, 0xcde0);
	WriteGMII16(0x06, 0xe03c);
	WriteGMII16(0x06, 0xe1e0);
	WriteGMII16(0x06, 0x3def);
	WriteGMII16(0x06, 0x64fd);
	WriteGMII16(0x06, 0xe0e2);
	WriteGMII16(0x06, 0xcce1);
	WriteGMII16(0x06, 0xe2cd);
	WriteGMII16(0x06, 0x580f);
	WriteGMII16(0x06, 0x5af0);
	WriteGMII16(0x06, 0x1e02);
	WriteGMII16(0x06, 0xe4e2);
	WriteGMII16(0x06, 0xcce5);
	WriteGMII16(0x06, 0xe2cd);
	WriteGMII16(0x06, 0xfde0);
	WriteGMII16(0x06, 0xe02c);
	WriteGMII16(0x06, 0xe1e0);
	WriteGMII16(0x06, 0x2d59);
	WriteGMII16(0x06, 0xe05b);
	WriteGMII16(0x06, 0x1f1e);
	WriteGMII16(0x06, 0x13e4);
	WriteGMII16(0x06, 0xe02c);
	WriteGMII16(0x06, 0xe5e0);
	WriteGMII16(0x06, 0x2dfd);
	WriteGMII16(0x06, 0xe0e2);
	WriteGMII16(0x06, 0xd2e1);
	WriteGMII16(0x06, 0xe2d3);
	WriteGMII16(0x06, 0x58f7);
	WriteGMII16(0x06, 0x5a08);
	WriteGMII16(0x06, 0x1e02);
	WriteGMII16(0x06, 0xe4e2);
	WriteGMII16(0x06, 0xd2e5);
	WriteGMII16(0x06, 0xe2d3);
	WriteGMII16(0x06, 0xef46);
	WriteGMII16(0x06, 0xfefd);
	WriteGMII16(0x06, 0x04f8);
	WriteGMII16(0x06, 0xf9fa);
	WriteGMII16(0x06, 0xef69);
	WriteGMII16(0x06, 0xe0e0);
	WriteGMII16(0x06, 0x22e1);
	WriteGMII16(0x06, 0xe023);
	WriteGMII16(0x06, 0x58c4);
	WriteGMII16(0x06, 0xe18b);
	WriteGMII16(0x06, 0x6e1f);
	WriteGMII16(0x06, 0x109e);
	WriteGMII16(0x06, 0x58e4);
	WriteGMII16(0x06, 0x8b6e);
	WriteGMII16(0x06, 0xad22);
	WriteGMII16(0x06, 0x22ac);
	WriteGMII16(0x06, 0x2755);
	WriteGMII16(0x06, 0xac26);
	WriteGMII16(0x06, 0x02ae);
	WriteGMII16(0x06, 0x1ad1);
	WriteGMII16(0x06, 0x06bf);
	WriteGMII16(0x06, 0x3bba);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x07bf);
	WriteGMII16(0x06, 0x3bbd);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x07bf);
	WriteGMII16(0x06, 0x3bc0);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1ae);
	WriteGMII16(0x06, 0x30d1);
	WriteGMII16(0x06, 0x03bf);
	WriteGMII16(0x06, 0x3bc3);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x00bf);
	WriteGMII16(0x06, 0x3bc6);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x00bf);
	WriteGMII16(0x06, 0x84e9);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x0fbf);
	WriteGMII16(0x06, 0x3bba);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x01bf);
	WriteGMII16(0x06, 0x3bbd);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x01bf);
	WriteGMII16(0x06, 0x3bc0);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1ef);
	WriteGMII16(0x06, 0x96fe);
	WriteGMII16(0x06, 0xfdfc);
	WriteGMII16(0x06, 0x04d1);
	WriteGMII16(0x06, 0x00bf);
	WriteGMII16(0x06, 0x3bc3);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d0);
	WriteGMII16(0x06, 0x1102);
	WriteGMII16(0x06, 0x2bfb);
	WriteGMII16(0x06, 0x5903);
	WriteGMII16(0x06, 0xef01);
	WriteGMII16(0x06, 0xd100);
	WriteGMII16(0x06, 0xa000);
	WriteGMII16(0x06, 0x02d1);
	WriteGMII16(0x06, 0x01bf);
	WriteGMII16(0x06, 0x3bc6);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1d1);
	WriteGMII16(0x06, 0x11ad);
	WriteGMII16(0x06, 0x2002);
	WriteGMII16(0x06, 0x0c11);
	WriteGMII16(0x06, 0xad21);
	WriteGMII16(0x06, 0x020c);
	WriteGMII16(0x06, 0x12bf);
	WriteGMII16(0x06, 0x84e9);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1ae);
	WriteGMII16(0x06, 0xc870);
	WriteGMII16(0x06, 0xe426);
	WriteGMII16(0x06, 0x0284);
	WriteGMII16(0x06, 0xf005);
	WriteGMII16(0x06, 0xf8fa);
	WriteGMII16(0x06, 0xef69);
	WriteGMII16(0x06, 0xe0e2);
	WriteGMII16(0x06, 0xfee1);
	WriteGMII16(0x06, 0xe2ff);
	WriteGMII16(0x06, 0xad2d);
	WriteGMII16(0x06, 0x1ae0);
	WriteGMII16(0x06, 0xe14e);
	WriteGMII16(0x06, 0xe1e1);
	WriteGMII16(0x06, 0x4fac);
	WriteGMII16(0x06, 0x2d22);
	WriteGMII16(0x06, 0xf603);
	WriteGMII16(0x06, 0x0203);
	WriteGMII16(0x06, 0x3bf7);
	WriteGMII16(0x06, 0x03f7);
	WriteGMII16(0x06, 0x06bf);
	WriteGMII16(0x06, 0x8561);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0x21ae);
	WriteGMII16(0x06, 0x11e0);
	WriteGMII16(0x06, 0xe14e);
	WriteGMII16(0x06, 0xe1e1);
	WriteGMII16(0x06, 0x4fad);
	WriteGMII16(0x06, 0x2d08);
	WriteGMII16(0x06, 0xbf85);
	WriteGMII16(0x06, 0x6c02);
	WriteGMII16(0x06, 0x2d21);
	WriteGMII16(0x06, 0xf606);
	WriteGMII16(0x06, 0xef96);
	WriteGMII16(0x06, 0xfefc);
	WriteGMII16(0x06, 0x04f8);
	WriteGMII16(0x06, 0xfaef);
	WriteGMII16(0x06, 0x69e0);
	WriteGMII16(0x06, 0xe000);
	WriteGMII16(0x06, 0xe1e0);
	WriteGMII16(0x06, 0x01ad);
	WriteGMII16(0x06, 0x271f);
	WriteGMII16(0x06, 0xd101);
	WriteGMII16(0x06, 0xbf85);
	WriteGMII16(0x06, 0x5e02);
	WriteGMII16(0x06, 0x2dc1);
	WriteGMII16(0x06, 0xe0e0);
	WriteGMII16(0x06, 0x20e1);
	WriteGMII16(0x06, 0xe021);
	WriteGMII16(0x06, 0xad20);
	WriteGMII16(0x06, 0x0ed1);
	WriteGMII16(0x06, 0x00bf);
	WriteGMII16(0x06, 0x855e);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0xc1bf);
	WriteGMII16(0x06, 0x3b96);
	WriteGMII16(0x06, 0x022d);
	WriteGMII16(0x06, 0x21ef);
	WriteGMII16(0x06, 0x96fe);
	WriteGMII16(0x06, 0xfc04);
	WriteGMII16(0x06, 0x00e2);
	WriteGMII16(0x06, 0x34a7);
	WriteGMII16(0x06, 0x25e5);
	WriteGMII16(0x06, 0x0a1d);
	WriteGMII16(0x06, 0xe50a);
	WriteGMII16(0x06, 0x2ce5);
	WriteGMII16(0x06, 0x0a6d);
	WriteGMII16(0x06, 0xe50a);
	WriteGMII16(0x06, 0x1de5);
	WriteGMII16(0x06, 0x0a1c);
	WriteGMII16(0x06, 0xe50a);
	WriteGMII16(0x06, 0x2da7);
	WriteGMII16(0x06, 0x5500);
	WriteGMII16(0x05, 0x8b94);
	WriteGMII16(0x06, 0x84ec);
	gphy_val = ReadGMII16(0x01);
	gphy_val |= BIT_0;
	WriteGMII16(0x01, gphy_val);
	WriteGMII16(0x00, 0x0005);
	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x1f, 0x0005);
	for (int i = 0; i < 200; i++) {
		IODelay(100);
		gphy_val = ReadGMII16(0x00);
		if (gphy_val & BIT_7)
			break;
	}
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0023);
	WriteGMII16(0x17, 0x0116);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0028);
	WriteGMII16(0x15, 0x0010);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0020);
	WriteGMII16(0x15, 0x0100);
	WriteGMII16(0x1f, 0x0007);
	WriteGMII16(0x1e, 0x0041);
	WriteGMII16(0x15, 0x0802);
	WriteGMII16(0x16, 0x2185);
	WriteGMII16(0x1f, 0x0000);

	WriteGMII16(0x1F, 0x0007);
	WriteGMII16(0x1E, 0x0023);
	WriteGMII16(0x17, 0x0116);
	WriteGMII16(0x1F, 0x0000);

	WriteGMII16(0x1f, 0x0005);
	WriteGMII16(0x05, 0x8b80);
	WriteGMII16(0x06, 0xc896);
	WriteGMII16(0x1f, 0x0000);

	WriteGMII16(0x1F, 0x0001);
	WriteGMII16(0x0B, 0x8C60);
	WriteGMII16(0x07, 0x2872);
	WriteGMII16(0x1C, 0xEFFF);
	WriteGMII16(0x1F, 0x0003);
	WriteGMII16(0x14, 0x94B0);
	WriteGMII16(0x1F, 0x0000);

	WriteGMII16(0x1F, 0x0002);
	gphy_val = ReadGMII16(0x08) & 0x00FF;
	WriteGMII16(0x08, gphy_val | 0x8000);

	WriteGMII16(0x1F, 0x0007);
	WriteGMII16(0x1E, 0x002D);
	gphy_val = ReadGMII16(0x18);
	WriteGMII16(0x18, gphy_val | 0x0010);
	WriteGMII16(0x1F, 0x0000);
	gphy_val = ReadGMII16(0x14);
	WriteGMII16(0x14, gphy_val | 0x8000);

	WriteGMII16(0x1F, 0x0002);
	WriteGMII16(0x00, 0x080B);
	WriteGMII16(0x0B, 0x09D7);
	WriteGMII16(0x1f, 0x0000);
	WriteGMII16(0x15, 0x1006);

	WriteGMII16(0x1F, 0x0003);
	WriteGMII16(0x19, 0x7F46);
	WriteGMII16(0x1F, 0x0005);
	WriteGMII16(0x05, 0x8AD2);
	WriteGMII16(0x06, 0x6810);
	WriteGMII16(0x05, 0x8AD4);
	WriteGMII16(0x06, 0x8002);
	WriteGMII16(0x05, 0x8ADE);
	WriteGMII16(0x06, 0x8025);
	WriteGMII16(0x1F, 0x0000);
}

void RealtekR1000::RTL8105EHwPhyConfig()
{
	u32 gphy_val;

	WriteGMII16(0x1F, 0x0000);
	WriteGMII16(0x18, 0x0310);
	WriteGMII16(0x1F, 0x0000);

	IODelay(100);

	if (mcfg == MCFG_8105E_4 && (ReadMMIO8(0xEF) & BIT_2)) {
		WriteGMII16(0x1F, 0x0001);
		gphy_val = ReadGMII16(0x1B) | BIT_2;
		WriteGMII16(0x1B, gphy_val);
		WriteGMII16(0x1F, 0x0000);
	}

	WriteGMII16(0x1f, 0x0004);
	WriteGMII16(0x1f, 0x0004);
	WriteGMII16(0x19, 0x7070);
	WriteGMII16(0x1c, 0x0600);
	WriteGMII16(0x1d, 0x9700);
	WriteGMII16(0x1d, 0x7d00);
	WriteGMII16(0x1d, 0x6900);
	WriteGMII16(0x1d, 0x7d00);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x4899);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x8000);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x4007);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0x4800);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x571f);
	WriteGMII16(0x1d, 0x5ffb);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x5b58);
	WriteGMII16(0x1d, 0x301e);
	WriteGMII16(0x1d, 0x5b64);
	WriteGMII16(0x1d, 0xa6fc);
	WriteGMII16(0x1d, 0xdcdb);
	WriteGMII16(0x1d, 0x0014);
	WriteGMII16(0x1d, 0xd9a9);
	WriteGMII16(0x1d, 0x0013);
	WriteGMII16(0x1d, 0xd16b);
	WriteGMII16(0x1d, 0x0011);
	WriteGMII16(0x1d, 0xb40e);
	WriteGMII16(0x1d, 0xd06b);
	WriteGMII16(0x1d, 0x000c);
	WriteGMII16(0x1d, 0xb206);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c00);
	WriteGMII16(0x1d, 0x301a);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5801);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c04);
	WriteGMII16(0x1d, 0x301e);
	WriteGMII16(0x1d, 0x314d);
	WriteGMII16(0x1d, 0x31f0);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c20);
	WriteGMII16(0x1d, 0x6004);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x4833);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c08);
	WriteGMII16(0x1d, 0x8300);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6600);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xb90c);
	WriteGMII16(0x1d, 0x30d3);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4de0);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x300b);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c60);
	WriteGMII16(0x1d, 0x6803);
	WriteGMII16(0x1d, 0x6520);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xaf03);
	WriteGMII16(0x1d, 0x6015);
	WriteGMII16(0x1d, 0x3059);
	WriteGMII16(0x1d, 0x6017);
	WriteGMII16(0x1d, 0x57e0);
	WriteGMII16(0x1d, 0x580c);
	WriteGMII16(0x1d, 0x588c);
	WriteGMII16(0x1d, 0x7ffc);
	WriteGMII16(0x1d, 0x5fa3);
	WriteGMII16(0x1d, 0x4827);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c10);
	WriteGMII16(0x1d, 0x8400);
	WriteGMII16(0x1d, 0x7c30);
	WriteGMII16(0x1d, 0x6020);
	WriteGMII16(0x1d, 0x48bf);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0xad09);
	WriteGMII16(0x1d, 0x7c03);
	WriteGMII16(0x1d, 0x5c03);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0xad2c);
	WriteGMII16(0x1d, 0xd6cf);
	WriteGMII16(0x1d, 0x0002);
	WriteGMII16(0x1d, 0x80f4);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c80);
	WriteGMII16(0x1d, 0x7c20);
	WriteGMII16(0x1d, 0x5c20);
	WriteGMII16(0x1d, 0x481e);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c02);
	WriteGMII16(0x1d, 0xad0a);
	WriteGMII16(0x1d, 0x7c03);
	WriteGMII16(0x1d, 0x5c03);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x8d02);
	WriteGMII16(0x1d, 0x4401);
	WriteGMII16(0x1d, 0x81f4);
	WriteGMII16(0x1d, 0x3114);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d00);
	WriteGMII16(0x1d, 0x4832);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c10);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0xa4b7);
	WriteGMII16(0x1d, 0xd9b3);
	WriteGMII16(0x1d, 0xfffe);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d20);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6200);
	WriteGMII16(0x1d, 0x3045);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d40);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x4401);
	WriteGMII16(0x1d, 0x5210);
	WriteGMII16(0x1d, 0x4833);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x4c08);
	WriteGMII16(0x1d, 0x8300);
	WriteGMII16(0x1d, 0x5f80);
	WriteGMII16(0x1d, 0x55e0);
	WriteGMII16(0x1d, 0xc06f);
	WriteGMII16(0x1d, 0x0005);
	WriteGMII16(0x1d, 0xd9b3);
	WriteGMII16(0x1d, 0xfffd);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x6040);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d60);
	WriteGMII16(0x1d, 0x57e0);
	WriteGMII16(0x1d, 0x4814);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x7c03);
	WriteGMII16(0x1d, 0x5c03);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xad02);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0xc0e9);
	WriteGMII16(0x1d, 0x0003);
	WriteGMII16(0x1d, 0xadd8);
	WriteGMII16(0x1d, 0x30c6);
	WriteGMII16(0x1d, 0x3078);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4dc0);
	WriteGMII16(0x1d, 0x6730);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xd09d);
	WriteGMII16(0x1d, 0x0002);
	WriteGMII16(0x1d, 0xb4fe);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d80);
	WriteGMII16(0x1d, 0x6802);
	WriteGMII16(0x1d, 0x6600);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x486c);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x9503);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6200);
	WriteGMII16(0x1d, 0x571f);
	WriteGMII16(0x1d, 0x5fbb);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x5b58);
	WriteGMII16(0x1d, 0x30e9);
	WriteGMII16(0x1d, 0x5b64);
	WriteGMII16(0x1d, 0xcdab);
	WriteGMII16(0x1d, 0xff5b);
	WriteGMII16(0x1d, 0xcd8d);
	WriteGMII16(0x1d, 0xff59);
	WriteGMII16(0x1d, 0xd96b);
	WriteGMII16(0x1d, 0xff57);
	WriteGMII16(0x1d, 0xd0a0);
	WriteGMII16(0x1d, 0xffdb);
	WriteGMII16(0x1d, 0xcba0);
	WriteGMII16(0x1d, 0x0003);
	WriteGMII16(0x1d, 0x80f0);
	WriteGMII16(0x1d, 0x30f6);
	WriteGMII16(0x1d, 0x3109);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ce0);
	WriteGMII16(0x1d, 0x7d30);
	WriteGMII16(0x1d, 0x6530);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7ce0);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x4832);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c08);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x6008);
	WriteGMII16(0x1d, 0x8300);
	WriteGMII16(0x1d, 0xb902);
	WriteGMII16(0x1d, 0x30d3);
	WriteGMII16(0x1d, 0x308f);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4da0);
	WriteGMII16(0x1d, 0x57a0);
	WriteGMII16(0x1d, 0x590c);
	WriteGMII16(0x1d, 0x5fa2);
	WriteGMII16(0x1d, 0xcba4);
	WriteGMII16(0x1d, 0x0005);
	WriteGMII16(0x1d, 0xcd8d);
	WriteGMII16(0x1d, 0x0003);
	WriteGMII16(0x1d, 0x80fc);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ca0);
	WriteGMII16(0x1d, 0xb603);
	WriteGMII16(0x1d, 0x7c10);
	WriteGMII16(0x1d, 0x6010);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x541f);
	WriteGMII16(0x1d, 0x7ffc);
	WriteGMII16(0x1d, 0x5fb3);
	WriteGMII16(0x1d, 0x9403);
	WriteGMII16(0x1d, 0x7c03);
	WriteGMII16(0x1d, 0x5c03);
	WriteGMII16(0x1d, 0xaa05);
	WriteGMII16(0x1d, 0x7c80);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x5b58);
	WriteGMII16(0x1d, 0x3128);
	WriteGMII16(0x1d, 0x7c80);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x5b64);
	WriteGMII16(0x1d, 0x4827);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c10);
	WriteGMII16(0x1d, 0x8400);
	WriteGMII16(0x1d, 0x7c10);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4cc0);
	WriteGMII16(0x1d, 0x7d00);
	WriteGMII16(0x1d, 0x6400);
	WriteGMII16(0x1d, 0x7ffc);
	WriteGMII16(0x1d, 0x5fbb);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6a00);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x30f6);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e00);
	WriteGMII16(0x1d, 0x4007);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x570f);
	WriteGMII16(0x1d, 0x5fff);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x585b);
	WriteGMII16(0x1d, 0x315c);
	WriteGMII16(0x1d, 0x5867);
	WriteGMII16(0x1d, 0x9402);
	WriteGMII16(0x1d, 0x6200);
	WriteGMII16(0x1d, 0xcda3);
	WriteGMII16(0x1d, 0x009d);
	WriteGMII16(0x1d, 0xcd85);
	WriteGMII16(0x1d, 0x009b);
	WriteGMII16(0x1d, 0xd96b);
	WriteGMII16(0x1d, 0x0099);
	WriteGMII16(0x1d, 0x96e9);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e20);
	WriteGMII16(0x1d, 0x96e4);
	WriteGMII16(0x1d, 0x8b04);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x5008);
	WriteGMII16(0x1d, 0xab03);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x5000);
	WriteGMII16(0x1d, 0x6801);
	WriteGMII16(0x1d, 0x6776);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xdb7c);
	WriteGMII16(0x1d, 0xfff0);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7fe1);
	WriteGMII16(0x1d, 0x4e40);
	WriteGMII16(0x1d, 0x4837);
	WriteGMII16(0x1d, 0x4418);
	WriteGMII16(0x1d, 0x41c7);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e40);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x8fc9);
	WriteGMII16(0x1d, 0xd2a0);
	WriteGMII16(0x1d, 0x004a);
	WriteGMII16(0x1d, 0x9203);
	WriteGMII16(0x1d, 0xa041);
	WriteGMII16(0x1d, 0x3184);
	WriteGMII16(0x1d, 0x7fe1);
	WriteGMII16(0x1d, 0x4e60);
	WriteGMII16(0x1d, 0x489c);
	WriteGMII16(0x1d, 0x4628);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e60);
	WriteGMII16(0x1d, 0x7e28);
	WriteGMII16(0x1d, 0x4628);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c00);
	WriteGMII16(0x1d, 0x41e8);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x8fb0);
	WriteGMII16(0x1d, 0xb241);
	WriteGMII16(0x1d, 0xa02a);
	WriteGMII16(0x1d, 0x319d);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ea0);
	WriteGMII16(0x1d, 0x7c02);
	WriteGMII16(0x1d, 0x4402);
	WriteGMII16(0x1d, 0x4448);
	WriteGMII16(0x1d, 0x4894);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c03);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c07);
	WriteGMII16(0x1d, 0x41ef);
	WriteGMII16(0x1d, 0x41ff);
	WriteGMII16(0x1d, 0x4891);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c07);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c17);
	WriteGMII16(0x1d, 0x8400);
	WriteGMII16(0x1d, 0x8ef8);
	WriteGMII16(0x1d, 0x41c7);
	WriteGMII16(0x1d, 0x8f95);
	WriteGMII16(0x1d, 0x92d5);
	WriteGMII16(0x1d, 0xa10f);
	WriteGMII16(0x1d, 0xd480);
	WriteGMII16(0x1d, 0x0008);
	WriteGMII16(0x1d, 0xd580);
	WriteGMII16(0x1d, 0xffb9);
	WriteGMII16(0x1d, 0xa202);
	WriteGMII16(0x1d, 0x31b8);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x4404);
	WriteGMII16(0x1d, 0x31b8);
	WriteGMII16(0x1d, 0xd484);
	WriteGMII16(0x1d, 0xfff3);
	WriteGMII16(0x1d, 0xd484);
	WriteGMII16(0x1d, 0xfff1);
	WriteGMII16(0x1d, 0x314d);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ee0);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x4488);
	WriteGMII16(0x1d, 0x41cf);
	WriteGMII16(0x1d, 0x314d);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ec0);
	WriteGMII16(0x1d, 0x48f3);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c09);
	WriteGMII16(0x1d, 0x4508);
	WriteGMII16(0x1d, 0x41c7);
	WriteGMII16(0x1d, 0x8f24);
	WriteGMII16(0x1d, 0xd218);
	WriteGMII16(0x1d, 0x0022);
	WriteGMII16(0x1d, 0xd2a4);
	WriteGMII16(0x1d, 0xff9f);
	WriteGMII16(0x1d, 0x31d9);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e80);
	WriteGMII16(0x1d, 0x4832);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c11);
	WriteGMII16(0x1d, 0x4428);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5440);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5801);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c04);
	WriteGMII16(0x1d, 0x41e8);
	WriteGMII16(0x1d, 0xa4b3);
	WriteGMII16(0x1d, 0x31ee);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x570f);
	WriteGMII16(0x1d, 0x5fff);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x585b);
	WriteGMII16(0x1d, 0x31fa);
	WriteGMII16(0x1d, 0x5867);
	WriteGMII16(0x1d, 0xbcf6);
	WriteGMII16(0x1d, 0x300b);
	WriteGMII16(0x1d, 0x300b);
	WriteGMII16(0x1d, 0x314d);
	WriteGMII16(0x1f, 0x0004);
	WriteGMII16(0x1c, 0x0200);
	WriteGMII16(0x19, 0x7030);
	WriteGMII16(0x1f, 0x0000);

	if (ReadMMIO8(0xEF) & 0x08) {
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x1A, 0x0004);
		WriteGMII16(0x1F, 0x0000);
	} else {
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x1A, 0x0000);
		WriteGMII16(0x1F, 0x0000);
	}

	if (ReadMMIO8(0xEF) & 0x010) {
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1C, 0x0000);
		WriteGMII16(0x1F, 0x0000);
	} else {
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1C, 0x0200);
		WriteGMII16(0x1F, 0x0000);
	}

	WriteGMII16(0x1F, 0x0001);
	WriteGMII16(0x15, 0x7701);
	WriteGMII16(0x1F, 0x0000);

	WriteGMII16(0x1F, 0x0000);
	WriteGMII16(0x18, 0x8310);
	WriteGMII16(0x1F, 0x0000);
}

void RealtekR1000::RTL8402HwPhyConfig()
{
	u32 gphy_val;
	
	WriteGMII16(0x1F, 0x0000);
	WriteGMII16(0x18, 0x0310);
	WriteGMII16(0x1F, 0x0000);

	IODelay(100);

	WriteGMII16(0x1f, 0x0004);
	WriteGMII16(0x1f, 0x0004);
	WriteGMII16(0x19, 0x7070);
	WriteGMII16(0x1c, 0x0600);
	WriteGMII16(0x1d, 0x9700);
	WriteGMII16(0x1d, 0x7d00);
	WriteGMII16(0x1d, 0x6900);
	WriteGMII16(0x1d, 0x7d00);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x4899);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x8000);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x4007);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0x4800);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x571f);
	WriteGMII16(0x1d, 0x5ffb);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x5b58);
	WriteGMII16(0x1d, 0x301e);
	WriteGMII16(0x1d, 0x5b64);
	WriteGMII16(0x1d, 0xa6fc);
	WriteGMII16(0x1d, 0xdcdb);
	WriteGMII16(0x1d, 0x0015);
	WriteGMII16(0x1d, 0xb915);
	WriteGMII16(0x1d, 0xb511);
	WriteGMII16(0x1d, 0xd16b);
	WriteGMII16(0x1d, 0x000f);
	WriteGMII16(0x1d, 0xb40f);
	WriteGMII16(0x1d, 0xd06b);
	WriteGMII16(0x1d, 0x000d);
	WriteGMII16(0x1d, 0xb206);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c00);
	WriteGMII16(0x1d, 0x301a);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5801);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c04);
	WriteGMII16(0x1d, 0x301e);
	WriteGMII16(0x1d, 0x3079);
	WriteGMII16(0x1d, 0x30f1);
	WriteGMII16(0x1d, 0x3199);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c60);
	WriteGMII16(0x1d, 0x6803);
	WriteGMII16(0x1d, 0x6420);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xaf03);
	WriteGMII16(0x1d, 0x6015);
	WriteGMII16(0x1d, 0x3040);
	WriteGMII16(0x1d, 0x6017);
	WriteGMII16(0x1d, 0x57e0);
	WriteGMII16(0x1d, 0x580c);
	WriteGMII16(0x1d, 0x588c);
	WriteGMII16(0x1d, 0x5fa3);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x4827);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c10);
	WriteGMII16(0x1d, 0x8400);
	WriteGMII16(0x1d, 0x7c30);
	WriteGMII16(0x1d, 0x6020);
	WriteGMII16(0x1d, 0x48bf);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0xd6cf);
	WriteGMII16(0x1d, 0x0002);
	WriteGMII16(0x1d, 0x80fe);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4c80);
	WriteGMII16(0x1d, 0x7c20);
	WriteGMII16(0x1d, 0x5c20);
	WriteGMII16(0x1d, 0x481e);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c02);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x81ff);
	WriteGMII16(0x1d, 0x30ba);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d00);
	WriteGMII16(0x1d, 0x4832);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c10);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0xa4cc);
	WriteGMII16(0x1d, 0xd9b3);
	WriteGMII16(0x1d, 0xfffe);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d20);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6200);
	WriteGMII16(0x1d, 0x300b);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4dc0);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xd09d);
	WriteGMII16(0x1d, 0x0002);
	WriteGMII16(0x1d, 0xb4fe);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4d80);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x6004);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x6802);
	WriteGMII16(0x1d, 0x6720);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x486c);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x9503);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6200);
	WriteGMII16(0x1d, 0x571f);
	WriteGMII16(0x1d, 0x5fbb);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x5b58);
	WriteGMII16(0x1d, 0x3092);
	WriteGMII16(0x1d, 0x5b64);
	WriteGMII16(0x1d, 0xcdab);
	WriteGMII16(0x1d, 0xff78);
	WriteGMII16(0x1d, 0xcd8d);
	WriteGMII16(0x1d, 0xff76);
	WriteGMII16(0x1d, 0xd96b);
	WriteGMII16(0x1d, 0xff74);
	WriteGMII16(0x1d, 0xd0a0);
	WriteGMII16(0x1d, 0xffd9);
	WriteGMII16(0x1d, 0xcba0);
	WriteGMII16(0x1d, 0x0003);
	WriteGMII16(0x1d, 0x80f0);
	WriteGMII16(0x1d, 0x309f);
	WriteGMII16(0x1d, 0x30ac);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ce0);
	WriteGMII16(0x1d, 0x4832);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c08);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x6008);
	WriteGMII16(0x1d, 0x8300);
	WriteGMII16(0x1d, 0xb902);
	WriteGMII16(0x1d, 0x3079);
	WriteGMII16(0x1d, 0x3061);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4da0);
	WriteGMII16(0x1d, 0x6400);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x57a0);
	WriteGMII16(0x1d, 0x590c);
	WriteGMII16(0x1d, 0x5fa3);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xcba4);
	WriteGMII16(0x1d, 0x0004);
	WriteGMII16(0x1d, 0xcd8d);
	WriteGMII16(0x1d, 0x0002);
	WriteGMII16(0x1d, 0x80fc);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ca0);
	WriteGMII16(0x1d, 0xb603);
	WriteGMII16(0x1d, 0x7c10);
	WriteGMII16(0x1d, 0x6010);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x541f);
	WriteGMII16(0x1d, 0x5fb3);
	WriteGMII16(0x1d, 0xaa05);
	WriteGMII16(0x1d, 0x7c80);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x5b58);
	WriteGMII16(0x1d, 0x30ca);
	WriteGMII16(0x1d, 0x7c80);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x5b64);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x4827);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c10);
	WriteGMII16(0x1d, 0x8400);
	WriteGMII16(0x1d, 0x7c10);
	WriteGMII16(0x1d, 0x6000);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4cc0);
	WriteGMII16(0x1d, 0x5fbb);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x7ce0);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x6720);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6a00);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c00);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c04);
	WriteGMII16(0x1d, 0x8200);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x309f);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e00);
	WriteGMII16(0x1d, 0x4007);
	WriteGMII16(0x1d, 0x4400);
	WriteGMII16(0x1d, 0x5310);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x570f);
	WriteGMII16(0x1d, 0x5fff);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x585b);
	WriteGMII16(0x1d, 0x3100);
	WriteGMII16(0x1d, 0x5867);
	WriteGMII16(0x1d, 0x9403);
	WriteGMII16(0x1d, 0x7e00);
	WriteGMII16(0x1d, 0x6200);
	WriteGMII16(0x1d, 0xcda3);
	WriteGMII16(0x1d, 0x002d);
	WriteGMII16(0x1d, 0xcd85);
	WriteGMII16(0x1d, 0x002b);
	WriteGMII16(0x1d, 0xd96b);
	WriteGMII16(0x1d, 0x0029);
	WriteGMII16(0x1d, 0x9629);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x9624);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e20);
	WriteGMII16(0x1d, 0x8b04);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x5008);
	WriteGMII16(0x1d, 0xab03);
	WriteGMII16(0x1d, 0x7c08);
	WriteGMII16(0x1d, 0x5000);
	WriteGMII16(0x1d, 0x6801);
	WriteGMII16(0x1d, 0x6776);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0xdb7c);
	WriteGMII16(0x1d, 0xffee);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x7fe1);
	WriteGMII16(0x1d, 0x4e40);
	WriteGMII16(0x1d, 0x4837);
	WriteGMII16(0x1d, 0x4418);
	WriteGMII16(0x1d, 0x41c7);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e40);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x8f07);
	WriteGMII16(0x1d, 0xd2a0);
	WriteGMII16(0x1d, 0x004c);
	WriteGMII16(0x1d, 0x9205);
	WriteGMII16(0x1d, 0xa043);
	WriteGMII16(0x1d, 0x312b);
	WriteGMII16(0x1d, 0x300b);
	WriteGMII16(0x1d, 0x30f1);
	WriteGMII16(0x1d, 0x7fe1);
	WriteGMII16(0x1d, 0x4e60);
	WriteGMII16(0x1d, 0x489c);
	WriteGMII16(0x1d, 0x4628);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e60);
	WriteGMII16(0x1d, 0x7e28);
	WriteGMII16(0x1d, 0x4628);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5800);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c00);
	WriteGMII16(0x1d, 0x41e8);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x8fec);
	WriteGMII16(0x1d, 0xb241);
	WriteGMII16(0x1d, 0xa02a);
	WriteGMII16(0x1d, 0x3146);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ea0);
	WriteGMII16(0x1d, 0x7c02);
	WriteGMII16(0x1d, 0x4402);
	WriteGMII16(0x1d, 0x4448);
	WriteGMII16(0x1d, 0x4894);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c03);
	WriteGMII16(0x1d, 0x4824);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c07);
	WriteGMII16(0x1d, 0x41ef);
	WriteGMII16(0x1d, 0x41ff);
	WriteGMII16(0x1d, 0x4891);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c07);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c17);
	WriteGMII16(0x1d, 0x8400);
	WriteGMII16(0x1d, 0x8ef8);
	WriteGMII16(0x1d, 0x41c7);
	WriteGMII16(0x1d, 0x8fd1);
	WriteGMII16(0x1d, 0x92d5);
	WriteGMII16(0x1d, 0xa10f);
	WriteGMII16(0x1d, 0xd480);
	WriteGMII16(0x1d, 0x0008);
	WriteGMII16(0x1d, 0xd580);
	WriteGMII16(0x1d, 0xffb7);
	WriteGMII16(0x1d, 0xa202);
	WriteGMII16(0x1d, 0x3161);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x4404);
	WriteGMII16(0x1d, 0x3161);
	WriteGMII16(0x1d, 0xd484);
	WriteGMII16(0x1d, 0xfff3);
	WriteGMII16(0x1d, 0xd484);
	WriteGMII16(0x1d, 0xfff1);
	WriteGMII16(0x1d, 0x30f1);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ee0);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5400);
	WriteGMII16(0x1d, 0x4488);
	WriteGMII16(0x1d, 0x41cf);
	WriteGMII16(0x1d, 0x30f1);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4ec0);
	WriteGMII16(0x1d, 0x48f3);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c09);
	WriteGMII16(0x1d, 0x4508);
	WriteGMII16(0x1d, 0x41c7);
	WriteGMII16(0x1d, 0x8fb0);
	WriteGMII16(0x1d, 0xd218);
	WriteGMII16(0x1d, 0xffae);
	WriteGMII16(0x1d, 0xd2a4);
	WriteGMII16(0x1d, 0xff9d);
	WriteGMII16(0x1d, 0x3182);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4e80);
	WriteGMII16(0x1d, 0x4832);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c01);
	WriteGMII16(0x1d, 0x7c1f);
	WriteGMII16(0x1d, 0x4c11);
	WriteGMII16(0x1d, 0x4428);
	WriteGMII16(0x1d, 0x7c40);
	WriteGMII16(0x1d, 0x5440);
	WriteGMII16(0x1d, 0x7c01);
	WriteGMII16(0x1d, 0x5801);
	WriteGMII16(0x1d, 0x7c04);
	WriteGMII16(0x1d, 0x5c04);
	WriteGMII16(0x1d, 0x41e8);
	WriteGMII16(0x1d, 0xa4b3);
	WriteGMII16(0x1d, 0x3197);
	WriteGMII16(0x1d, 0x7fe0);
	WriteGMII16(0x1d, 0x4f20);
	WriteGMII16(0x1d, 0x6800);
	WriteGMII16(0x1d, 0x6736);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x0000);
	WriteGMII16(0x1d, 0x570f);
	WriteGMII16(0x1d, 0x5fff);
	WriteGMII16(0x1d, 0xaa03);
	WriteGMII16(0x1d, 0x585b);
	WriteGMII16(0x1d, 0x31a5);
	WriteGMII16(0x1d, 0x5867);
	WriteGMII16(0x1d, 0xbcf4);
	WriteGMII16(0x1d, 0x300b);
	WriteGMII16(0x1f, 0x0004);
	WriteGMII16(0x1c, 0x0200);
	WriteGMII16(0x19, 0x7030);
	WriteGMII16(0x1f, 0x0000);

	if (ReadMMIO32(0x8c) & (1 << 28)) {
		WriteGMII16(0x1F, 0x0001);
		gphy_val = ReadGMII16(0x13);
		gphy_val |= 0x8000;
		WriteGMII16(0x13, gphy_val);
	}
}

void RealtekR1000::RTL8106EHwPhyConfig()
{
  if (mcfg == MCFG_8106E_1 || mcfg == MCFG_8106E_2) {
    WriteGMII16( 0x1F, 0x0001);
    WriteGMII16( 0x11, 0x83BA);
    WriteGMII16( 0x1F, 0x0000);
    
    if(aspm) {
      WriteGMII16( 0x1F, 0x0000);
      WriteGMII16( 0x18, 0x8310);
      WriteGMII16( 0x1F, 0x0000);
    }
  } else if (mcfg == MCFG_8106EUS) {
    WriteGMII16( 0x1F, 0x0BCC);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~BIT_8);
    WriteGMII16( 0x1F, 0x0A44);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_7);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_6);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8084);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~(BIT_14 | BIT_13));
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_12);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_1);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_0);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8012);
    WriteGMII16( 0x14, ReadGMII16( 0x14) | BIT_15);
    
    WriteGMII16( 0x1F, 0x0BCE);
    WriteGMII16( 0x12, 0x8860);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x80F3);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8B00);
    WriteGMII16( 0x13, 0x80F0);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x3A00);
    WriteGMII16( 0x13, 0x80EF);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0500);
    WriteGMII16( 0x13, 0x80F6);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6E00);
    WriteGMII16( 0x13, 0x80EC);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6800);
    WriteGMII16( 0x13, 0x80ED);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x7C00);
    WriteGMII16( 0x13, 0x80F2);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xF400);
    WriteGMII16( 0x13, 0x80F4);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8500);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8110);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xA800);
    WriteGMII16( 0x13, 0x810F);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x1D00);
    WriteGMII16( 0x13, 0x8111);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xF500);
    WriteGMII16( 0x13, 0x8113);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6100);
    WriteGMII16( 0x13, 0x8115);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x9200);
    WriteGMII16( 0x13, 0x810E);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0400);
    WriteGMII16( 0x13, 0x810C);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x7C00);
    WriteGMII16( 0x13, 0x810B);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x5A00);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x80D1);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xFF00);
    WriteGMII16( 0x13, 0x80CD);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x9E00);
    WriteGMII16( 0x13, 0x80D3);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0E00);
    WriteGMII16( 0x13, 0x80D5);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xCA00);
    WriteGMII16( 0x13, 0x80D7);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8400);
    
    if (aspm) {
      WriteGMII16( 0x1F, 0x0A43);
      WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_2);
    }
  }
  
  /*ocp phy power saving*/
  if (mcfg == MCFG_8106EUS) {
    if (aspm) {
      WriteGMII16( 0x1F, 0x0C41);
      WriteGMII16( 0x13, 0x0000);
      WriteGMII16( 0x13, 0x0050);
      WriteGMII16( 0x1F, 0x0000);
    }
  }
  
	WriteGMII16(0x1F, 0x0000);
  
}

// yanked from rtl8101_nic_reset
void RealtekR1000::RTL8100NicReset()
{
	DLog("RTLN8101NicReset\n");

	WriteMMIO32(RxConfig, ReadMMIO32(RxConfig) &
			~(AcceptErr | AcceptRunt | AcceptBroadcast | AcceptMulticast |
			  AcceptMyPhys |  AcceptAllPhys));

	if (mcfg == MCFG_8402_1) {
		WriteMMIO8(ChipCmd, StopReq | CmdRxEnb | CmdTxEnb);
		while (!(ReadMMIO32(TxConfig) & BIT_11)) IODelay(100);
	}
	else if (MCFG_8101E_3 < mcfg) {
		WriteMMIO8(ChipCmd, StopReq | CmdRxEnb | CmdTxEnb);
		IODelay(100);
	}

	// Soft reset
	WriteMMIO8(ChipCmd, CmdReset);

	// Wait for the reset to finish
	for (int i = 1000; i < 0; i--) {
		if ((ReadMMIO8(ChipCmd) & CmdReset) == 0) {
			break;
		}
		IODelay(100);
	}
}

// TODO - implement
void RealtekR1000::RTL8100SetMedium(ushort speedIn, uchar duplexIn, uchar autonegIn)
{
	int auto_nego = 0;

	// Sanitize speed
	// R810x only go up to Fast Ethernet
	if ((speedIn != SPEED_100) && (speedIn != SPEED_10)){
		speedIn = SPEED_100;
		duplexIn = DUPLEX_FULL;
	}

	if (autonegIn == AUTONEG_ENABLE)
	{
		/* n-way force */
		if ((speed == SPEED_10) && (duplex == DUPLEX_HALF)) {
			auto_nego = PHY_Cap_10_Half;
		} else if ((speed = SPEED_10) && (duplex == DUPLEX_FULL)) {
			auto_nego |= PHY_Cap_10_Half
				      |  PHY_Cap_10_Full;
		} else if ((speed == SPEED_100) && (duplex == DUPLEX_HALF)) {
			auto_nego |= PHY_Cap_100_Half
				      |  PHY_Cap_10_Full
					  |  PHY_Cap_10_Half;
		} else if ((speed == SPEED_100) && (duplex == DUPLEX_FULL)) {
			auto_nego |= PHY_Cap_100_Full
				      |  PHY_Cap_100_Half
				      |  PHY_Cap_10_Full
					  |  PHY_Cap_10_Half;
		}

		// Save settings
		autoneg = autonegIn;
		speed = speedIn;
		duplex = duplexIn;

		if (mcfg == MCFG_8102E_1 || mcfg == MCFG_8102E_2) {
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(PHY_BMCR, BMCR_RESET);
			IODelay(100);
			RTL8100HwPhyConfig();
		} else if (((mcfg == MCFG_8101E_1) ||
				  (mcfg == MCFG_8101E_2) ||
				  (mcfg == MCFG_8101E_3)) &&
				  (speed == SPEED_10)) {
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(PHY_BMCR, BMCR_RESET);
			RTL8100HwPhyConfig();
		}

		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(PHY_AUTO_NEGO_REG, auto_nego);
		if (mcfg == MCFG_8105E_1)
			WriteGMII16(PHY_BMCR, BMCR_RESET | BMCR_ANENABLE | BMCR_ANRESTART);
		else
			WriteGMII16(PHY_BMCR, BMCR_ANENABLE | BMCR_ANRESTART);
	} else {
		/*true force*/
		u16 bmcr_true_force = 0;

		if ((speedIn == SPEED_10) && (duplexIn == DUPLEX_HALF)) {
			bmcr_true_force = BMCR_SPEED10;
		} else if ((speedIn == SPEED_10) && (duplexIn == DUPLEX_FULL)) {
			bmcr_true_force = BMCR_SPEED10 | BMCR_FULLDPLX;
		} else if ((speedIn == SPEED_100) && (duplexIn == DUPLEX_HALF)) {
			bmcr_true_force = BMCR_SPEED100;
		} else if ((speedIn == SPEED_100) && (duplexIn == DUPLEX_FULL)) {
			bmcr_true_force = BMCR_SPEED100 | BMCR_FULLDPLX;
		}
		
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(PHY_BMCR, bmcr_true_force);
	}
}


// TODO - implement
void RealtekR1000::RTL8100DSM(int dev_state)
{
	DLog("RTL8100DSM\n");
	switch (dev_state)
	{
		case DSM_MAC_INIT:
			if (mcfg >= MCFG_8102E_1 && mcfg <= MCFG_8103E_1) {
				if (ReadMMIO8(MACDBG) & 0x80) {
					WriteGMII16(0x1F, 0x0000);
					WriteGMII16(0x11, ReadGMII16(0x11) & ~(1 << 12));
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) | GPIO_en);
				} else {
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) & ~GPIO_en);
				}
			}
			break;
		case DSM_NIC_GOTO_D3:
		case DSM_IF_DOWN:
			if (ReadMMIO8(MACDBG) & 0x80) {
				if (mcfg == MCFG_8102E_1 || mcfg == MCFG_8102E_2) {
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) | GPIO_en);
					WriteGMII16(0x11, ReadGMII16(0x11) | (1 << 12));
				} else if (mcfg == MCFG_8103E_1) {
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) & ~GPIO_en);
				}
			}
			break;
		case DSM_NIC_RESUME_D3:
		case DSM_IF_UP:
			if (ReadMMIO8(MACDBG) * 0x80) {
				if (mcfg == MCFG_8102E_1 || mcfg == MCFG_8102E_2) {
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) & ~GPIO_en);
				} else if (mcfg == MCFG_8103E_1) {
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) | GPIO_en);
				}
			}
			break;
	}
}

// TODO Implement
void RealtekR1000::RTL8100EnableEEE()
{
}

// To save you a hard search, EEE stands for Energy Efficient Ethernet
void RealtekR1000::RTL8100DisableEEE()
{
	switch (mcfg)
	{
		case MCFG_8105E_2:
		case MCFG_8105E_3:
		case MCFG_8105E_4:
			WriteERI(0x1B0, 2, 0, ERIAR_ExGMAC);
			WriteGMII16(0x1F, 0x0004);
			WriteGMII16(0x10, 0x401F);
			WriteGMII16(0x19, 0x7030);

			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x0D, 0x0007);
			WriteGMII16(0x0E, 0x003C);
			WriteGMII16(0x0D, 0x4007);
			WriteGMII16(0x0E, 0x0000);
			WriteGMII16(0x0D, 0x0000);

			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x0D, 0x0003);
			WriteGMII16(0x0E, 0x0015);
			WriteGMII16(0x0D, 0x4003);
			WriteGMII16(0x1E, 0x0000);
			WriteGMII16(0x1D, 0x0000);

			WriteGMII16(PHY_BMCR, BMCR_ANENABLE | BMCR_ANRESTART);
			break;
		case MCFG_8402_1:
			WriteERI(0x1B0, 2, 0, ERIAR_ExGMAC);
			WriteGMII16(0x1F, 0x0004);
			WriteGMII16(0x10, 0x401F);
			WriteGMII16(0x19, 0x7030);

			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x0D, 0x0007);
			WriteGMII16(0x0E, 0x003C);
			WriteGMII16(0x0D, 0x4007);
			WriteGMII16(0x0E, 0x0000);
			WriteGMII16(0x0D, 0x0000);

			WriteGMII16(PHY_BMCR, BMCR_ANENABLE | BMCR_ANRESTART);
			break;
		default:
			DLog("RTL8100DisableEEE called on an unsupported chip.\n");
	}
}


// Taken from rtl8101_powerdown_pll
void RealtekR1000::RTL8100PowerDownPLL()
{
	DLog("RTL8100PowerDownPLL\n");
	if ((MCFG_8105E_1 <= mcfg && mcfg <= MCFG_8105E_4) && eee_enable)
	{
		RTL8100DisableEEE();
	}

	if (mcfg == MCFG_8105E_4)
	{
		if ((ReadMMIO8(0x8C) & BIT_28) && !(ReadMMIO8(0xEF) & BIT_2))
		{
			u32 gphy_val;
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x04, 0x0061);
			WriteGMII16(0x00, 0x1200);
			WriteGMII16(0x18, 0x0310);
			IODelay(20 * 1000);
			WriteGMII16(0x1F, 0x0005);
			gphy_val = ReadGMII16(0x1A);
			gphy_val |= BIT_8 | BIT_0;
			WriteGMII16(0x1A, gphy_val);
			IODelay(20 * 1000);
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x18, 0x8310);
		}
	}

	if (wol_enabled == WOL_ENABLED)
	{
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x00, 0x0000);
		if (mcfg >= MCFG_8105E_1)
		{
			WriteMMIO32(RxConfig, ReadMMIO32(RxConfig) | AcceptBroadcast |
					AcceptMulticast | AcceptMyPhys);
		}
		return;
	}
	
	RTL8100PowerDownPHY();

	switch (mcfg)
	{
		case MCFG_8103E_1:
		case MCFG_8401_1:
			WriteMMIO8(DBG_reg, ReadMMIO8(DBG_reg) | BIT_3);
			WriteMMIO8(PMCH, ReadMMIO8(PMCH) & ~BIT_7);
			break;
		case MCFG_8103E_3:
			pciDev->configWrite8(0x81, 0);
			WriteMMIO8(PMCH, ReadMMIO8(PMCH) & ~BIT_7);
			break;
		case MCFG_8103E_2:
		case MCFG_8105E_1:
		case MCFG_8105E_2:
		case MCFG_8105E_3:
		case MCFG_8105E_4:
		case MCFG_8402_1:
			WriteMMIO8(PMCH, ReadMMIO8(PMCH) & ~BIT_7);
			break;
		default:
			break;
	}
}

// Taken from rtl8*_powerup_pll
void RealtekR1000::RTL8100PowerUpPLL()
{
	switch (mcfg)
	{
		case MCFG_8103E_1:
		case MCFG_8401_1:
			WriteMMIO8(PMCH, ReadMMIO8(PMCH) | BIT_7);
			WriteMMIO8(DBG_reg, ReadMMIO8(DBG_reg) & ~BIT_3);
			break;
		case MCFG_8103E_2:
		case MCFG_8103E_3:
		case MCFG_8105E_1:
		case MCFG_8105E_2:
		case MCFG_8105E_3:
		case MCFG_8105E_4:
		case MCFG_8402_1:
			WriteMMIO8(PMCH, ReadMMIO8(PMCH) | BIT_7);
			break;
	}
	RTL8100PowerUpPHY();
}


void RealtekR1000::RTL8100PowerDownPHY()
{
	WriteGMII16(0x1F, 0x0000);
	if (mcfg == MCFG_8105E_1)
	{
		WriteGMII16(PHY_BMCR, BMCR_ANENABLE | BMCR_PDOWN);
	}
	else
	{
		WriteGMII16(PHY_BMCR, BMCR_PDOWN);
	}
}

void RealtekR1000::RTL8100PowerUpPHY()
{
	WriteGMII16(0x1F, 0x0000);
	WriteGMII16(PHY_BMCR, BMCR_ANENABLE);
}

void RealtekR1000::RTL8100WritePhyIO(int RegAddr, int value)
{
	WriteMMIO32(PHYIO, PHYIO_Write |
		(RegAddr & PHYIO_Reg_Mask) << PHYIO_Reg_shift |
		(value & PHYIO_Data_Mask));

	for (int i = 0; i < 10; i++)
	{
		IODelay(100);
		// Check if the chip has completed writing
		if (!ReadMMIO32(PHYIO) & PHYIO_Flag)
			break;
	}
	IODelay(100);
}

// This is disabled via the preprocessor in the orignal source
int RealtekR1000::RTL8100ReadPhyIO(int RegAddr)
{
	int value = -1;

	WriteMMIO32(PHYIO,
		   PHYIO_Read | (RegAddr & PHYIO_Reg_Mask) << PHYIO_Reg_shift);

	for (int i = 0; i < 10; i++)
	{
		IODelay(100);
		if (ReadMMIO32(PHYIO) & PHYIO_Flag)
		{
			value = ReadMMIO32(PHYIO) & PHYIO_Data_Mask;
			break;
		}
	}
	IODelay(100);
	return value;
}
