/*
 *  RTL8168.cpp - Hardware methods for RealTek RTL8168 family chips
 *  RealtekR1000SL
 *
 *  Created by Chuck Fry on 10/8/09.
 *  Copyright 2009 Chuck Fry. All rights reserved.
 *
 * This software incorporates code from Realtek's open source Linux drivers
 * and the open source Mac OS X project RealtekR1000 by Dmitri Arekhta,
 * as modified by PSYSTAR Corporation.
 * 
 * Copyright(c) 2009 Realtek Semiconductor Corp. All rights reserved.
 * copyright PSYSTAR Corporation, 2008
 * 2006 (c) Dmitri Arekhta (DaemonES@gmail.com)
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Realtek 2012, adopted by Slice
 */


#include "RealtekR1000SL.h"
#include "impl_defs.h"


// **********************************
//
// Static Data Member Initialization
//
// **********************************

const u16 RealtekR1000::rtl8168_intr_mask = 
	SYSErr | LinkChg | RxDescUnavail | TxErr | TxOK | RxErr | RxOK;
const u16 RealtekR1000::rtl8168_napi_event =
	RxOK | RxDescUnavail | RxFIFOOver | TxOK | TxErr;

static const u16 evl_phy_value[] = {
  0x8B56, 0x8B5F, 0x8B68, 0x8B71,
  0x8B7A, 0x8A7B, 0x8A7E, 0x8A81,
  0x8A84, 0x8A87
};

// Copied from rtl8168_hw_start()
void RealtekR1000::RTL8168HwStart()
{
  switch (mcfg) {
    case MCFG_8168B_1:
    case MCFG_8168B_2:
    case MCFG_8168B_3:
    case MCFG_8168C_1:
    case MCFG_8168C_2:
    case MCFG_8168C_3:
    case MCFG_8168CP_1:
    case MCFG_8168CP_2:
    case MCFG_8168D_1:
    case MCFG_8168D_2:
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
    case MCFG_8168E_1:
    case MCFG_8168E_2:
      break;
    default:
      WriteMMIO32(RxConfig, RxCfg_128_int_en | (RX_DMA_BURST << RxCfgDMAShift));
      break;
	}
  

	RTL8168NicReset();
	
	WriteMMIO8(Cfg9346, Cfg9346_Unlock);
	WriteMMIO8(ETThReg, ETTh);
	
	cp_cmd |= PktCntrDisable | INTT_1;
	WriteMMIO16(CPlusCmd, cp_cmd);
	
	WriteMMIO16(IntrMitigate, 0xcf68); //was 5151 but linux 5f51 Mieze cf68
  WriteMMIO8(Config5, ReadMMIO8(Config5) & ~BIT_7); //as in Linux

	intr_mask = rtl8168_intr_mask;
	//Work around for RxFIFO overflow
	if (mcfg == MCFG_8168B_1)
	{
		intr_mask |= RxFIFOOver | PCSTimeout;
		intr_mask &= ~RxDescUnavail;
	}
	
	WriteMMIO32(TxDescStartAddr, static_cast<UInt32>(txdesc_phy_dma_addr));
#if defined(__LP64__)
	WriteMMIO32(TxDescStartAddr + 4, static_cast<UInt32>(txdesc_phy_dma_addr >> 32));
#endif
	WriteMMIO32(RxDescStartAddr, static_cast<UInt32>(rxdesc_phy_dma_addr));
#if defined(__LP64__)  
	WriteMMIO32(RxDescStartAddr + 4, static_cast<UInt32>(rxdesc_phy_dma_addr >> 32));
#endif	
	// Set Rx Config register to ignore all for now
	WriteMMIO32(RxConfig,
				~(AcceptErr | AcceptRunt | AcceptBroadcast | AcceptMulticast | AcceptMyPhys | AcceptAllPhys) &
				(rx_config_base | (ReadMMIO32(RxConfig) & rx_config_mask)));
	
	/* Set DMA burst size and Interframe Gap Time */
	if (mcfg == MCFG_8168B_1) 
	{
		WriteMMIO32(TxConfig,
					(TX_DMA_BURST_512 << TxDMAShift) | 
					(InterFrameGap << TxInterFrameGapShift));
	} 
	else 
	{
		WriteMMIO32(TxConfig,
					(TX_DMA_BURST_unlimited << TxDMAShift) | 
					(InterFrameGap << TxInterFrameGapShift));
	}
	
	/* Clear the interrupt status register. */
	WriteMMIO16(IntrStatus, 0xFFFF);
	
	if (!rx_fifo_overflow)
	{
		/* Enable all known interrupts by setting the interrupt mask. */
		WriteMMIO16(IntrMask, intr_mask);
	}
	
	// Do model-dependent initialization
	switch (mcfg)
	{
		case MCFG_8168B_1:
		case MCFG_8168B_2:
		case MCFG_8168B_3:
			RTL8168BHwStart2();
			break;
			
		case MCFG_8168C_1:
		case MCFG_8168C_2:
		case MCFG_8168C_3:
			RTL8168CHwStart2();
			break;
			
		case MCFG_8168CP_1:
		case MCFG_8168CP_2:
			RTL8168CPHwStart2();
			break;
			
		case MCFG_8168D_1:
		case MCFG_8168D_2:
			RTL8168DHwStart2();
			break;
			
		case MCFG_8168DP_1:
		case MCFG_8168DP_2:
		case MCFG_8168DP_3:
			RTL8168DPHwStart2();
			break;

    case MCFG_8168E_1:
		case MCFG_8168E_2:
			RTL8168EHwStart2();
			break;
			
    case MCFG_8168E_VL_1:
		case MCFG_8168E_VL_2:
			RTL8168EVLHwStart2();
			break;
			
    case MCFG_8168F_1:
		case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
			RTL8168FHwStart2();
			break;
			

#ifdef DEBUG			
		default:
			DLog("RTL8168HwStart: bad mcfg %d", mcfg);
      cp_cmd &= 0x2043;
      WriteMMIO8(ETThReg, 0x0C);
      
			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;
			
			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
//      rtl8168_set_rxbufsize(tp, dev);
			break;
#endif			
	}
	
	if ((mcfg == MCFG_8168B_1) ||
		(mcfg == MCFG_8168B_2) ||
		(mcfg == MCFG_8168B_3)) 
	{
		/* csum offload command for RTL8168B/8111B */
		tx_tcp_csum_cmd = TxIPCS | TxTCPCS;
		tx_udp_csum_cmd = TxIPCS | TxUDPCS;
		tx_ip_csum_cmd = TxIPCS;
	}
	else 
	{
		/* csum offload command for RTL8168C/8111C, RTL8168CP/8111CP, RTL8168D/8111D, RTL8168DP/8111DP */
		tx_tcp_csum_cmd = TxIPCS_C | TxTCPCS_C;
		tx_udp_csum_cmd = TxIPCS_C | TxUDPCS_C;
		tx_ip_csum_cmd = TxIPCS_C;
	}
  
  WriteMMIO16(CPlusCmd, cp_cmd);
	
	WriteMMIO8(ChipCmd, CmdTxEnb | CmdRxEnb);
	
	// Set Rx Config register
	// Default to accept broadcast & my address, no multicast, no promiscuous
	u32 rx_mode = (rx_config_base |
				   AcceptBroadcast | AcceptMyPhys |
				   (ReadMMIO32(RxConfig) & rtl_chip_info[mcfg].RxConfigMask));
	WriteMMIO32(RxConfig, rx_mode);

  // Set RxMaxSize register - thanks to Mieze
  WriteMMIO16(RxMaxSize, 2000);
    
	WriteMMIO8(Cfg9346, Cfg9346_Lock);
	
	RTL8168DSM(DSM_MAC_INIT);
	
	u8 options1 = ReadMMIO8(Config3);
	u8 options2 = ReadMMIO8(Config5);
  u32 csi_tmp = ReadERI(0xDE, 4, ERIAR_ExGMAC);
  
	switch (mcfg) {
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      if ((options1 & LinkUp) || (csi_tmp & BIT_0) || (options2 & UWF) || (options2 & BWF) || (options2 & MWF))
        wol_enabled = WOL_ENABLED;
      else
        wol_enabled = WOL_DISABLED;
      break;
    default:
      if ((options1 & LinkUp) ||
          (options1 & MagicPacket) ||
          (options2 & UWF) ||
          (options2 & BWF) ||
          (options2 & MWF))
        wol_enabled = WOL_ENABLED;
      else
        wol_enabled = WOL_DISABLED;
      break;
	}
  
	IODelay(10);
	return;
}

// taken from rtl8168_hw_start()
void RealtekR1000::RTL8168BHwStart2()
{
	u8 device_control;
	if (mcfg == MCFG_8168B_1)
	{
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		if (curr_mtu_size > ETHERMTU)
		{
			device_control = pciDev->configRead8(0x69);
			device_control &= ~0x70;
			device_control |= 0x28;
			pciDev->configWrite8(0x69, device_control);
		}
		else
		{
			device_control = pciDev->configRead8(0x69);
			device_control &= ~0x70;
			device_control |= 0x58;
			pciDev->configWrite8(0x69, device_control);
		}
	}
	else if (mcfg == MCFG_8168B_2)
	{
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		if (curr_mtu_size > ETHERMTU)
		{
			device_control = pciDev->configRead8(0x69);
			device_control &= ~0x70;
			device_control |= 0x28;
			pciDev->configWrite8(0x69, device_control);
			
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | (1 << 0));
		}
		else
		{
			device_control = pciDev->configRead8(0x69);
			device_control &= ~0x70;
			device_control |= 0x58;
			pciDev->configWrite8(0x69, device_control);
			
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~(1 << 0));
		}
	}
	else if (mcfg == MCFG_8168B_3)
	{
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		if (curr_mtu_size > ETHERMTU)
		{
			device_control = pciDev->configRead8(0x69);
			device_control &= ~0x70;
			device_control |= 0x28;
			pciDev->configWrite8(0x69, device_control);
			
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | (1 << 0));
		}
		else
		{
			device_control = pciDev->configRead8(0x69);
			device_control &= ~0x70;
			device_control |= 0x58;
			pciDev->configWrite8(0x69, device_control);
			
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~(1 << 0));
		}
	}
	return;
}

// taken from rtl8168_hw_start()
void RealtekR1000::RTL8168CHwStart2()
{
	u8 device_control;
	u16 ephy_data;
	u32 csi_tmp;
	if (mcfg == MCFG_8168C_1)
	{
		/*set PCI configuration space offset 0x70F to 0x27*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x27000000);
		
		WriteMMIO8(DBG_reg, (0x0E << 4) | Fix_Nak_1 | Fix_Nak_2);
		
		/*Set EPHY registers	begin*/
		/*Set EPHY register offset 0x02 bit 11 to 0 and bit 12 to 1*/
		ephy_data = ReadEPHY16(0x02);
		ephy_data &= ~(1 << 11);
		ephy_data |= (1 << 12);
		WriteEPHY16(0x02, ephy_data);
		
		/*Set EPHY register offset 0x03 bit 1 to 1*/
		ephy_data = ReadEPHY16(0x03);
		ephy_data |= (1 << 1);
		WriteEPHY16(0x03, ephy_data);
		
		/*Set EPHY register offset 0x06 bit 7 to 0*/
		ephy_data = ReadEPHY16(0x06);
		ephy_data &= ~(1 << 7);
		WriteEPHY16(0x06, ephy_data);
		/*Set EPHY registers	end*/
		
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		//disable clock request.
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x20
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload disable
			canOffload &= ~kChecksumIP;
			
			//rx checksum offload disable
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x50
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload enable
			canOffload |= kChecksumIP;
			
			//rx checksum offload enable
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
	}
	else if (mcfg == MCFG_8168C_2)
	{
		/*set PCI configuration space offset 0x70F to 0x27*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x27000000);
		
		/******set EPHY registers for RTL8168CP	begin******/
		//Set EPHY register offset 0x01 bit 0 to 1.
		ephy_data = ReadEPHY16(0x01);
		ephy_data |= (1 << 0);
		WriteEPHY16(0x01, ephy_data);
		
		//Set EPHY register offset 0x03 bit 10 to 0, bit 9 to 1 and bit 5 to 1.
		ephy_data = ReadEPHY16(0x03);
		ephy_data &= ~(1 << 10);
		ephy_data |= (1 << 9);
		ephy_data |= (1 << 5);
		WriteEPHY16(0x03, ephy_data);
		/******set EPHY registers for RTL8168CP	end******/
		
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		//disable clock request.
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x20
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload disable
			canOffload &= ~kChecksumIP;
			
			//rx checksum offload disable
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x50
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload enable
			canOffload |= kChecksumIP;
			
			//rx checksum offload enable
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
	}
	else if (mcfg == MCFG_8168C_3)
	{
		/*set PCI configuration space offset 0x70F to 0x27*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x27000000);
		
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		//disable clock request.
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x20
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload disable
			canOffload &= ~kChecksumIP;
			
			//rx checksum offload disable
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x50
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload enable
			canOffload |= kChecksumIP;
			
			//rx checksum offload enable
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
	}
	return;
}

// taken from rtl8168_hw_start()
void RealtekR1000::RTL8168CPHwStart2()
{
	u8 device_control;
	u32 csi_tmp;
	if (mcfg == MCFG_8168CP_1)
	{
		/*set PCI configuration space offset 0x70F to 0x27*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x27000000);
		WriteERI(0x1EC, 1, 0x07, ERIAR_ASF);
		
		//disable clock request.
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x20
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload disable
			canOffload &= ~kChecksumIP;
			
			//rx checksum offload disable
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x50
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload enable
			canOffload |= kChecksumIP;
			
			//rx checksum offload enable
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
	}
	else if (mcfg == MCFG_8168CP_2)
	{
		/*set PCI configuration space offset 0x70F to 0x27*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x27000000);
		WriteERI(0x1EC, 1, 0x07, ERIAR_ASF);
		
		//disable clock request.
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO16(CPlusCmd, ReadMMIO16(CPlusCmd) & 
					~(EnableBist | Macdbgo_oe | Force_halfdup | Force_rxflow_en | Force_txflow_en | 
					  Cxpl_dbg_sel | ASF | PktCntrDisable | Macdbgo_sel));
		
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
		
		WriteMMIO8(0xD1, 0x20);
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x20
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload disable
			canOffload &= ~kChecksumIP;
			
			//rx checksum offload disable
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			//Set PCI configuration space offset 0x79 to 0x50
			/*Increase the Tx performance*/
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			//tx checksum offload enable
			canOffload |= kChecksumIP;
			
			//rx checksum offload enable
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		
	}
	return;
}

// taken from rtl8168_hw_start()
void RealtekR1000::RTL8168DHwStart2()
{
	u8 device_control;
	u32 csi_tmp;
	if (mcfg == MCFG_8168D_1)
	{
		/*set PCI configuration space offset 0x70F to 0x13*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x13000000);
		
		/* disable clock request. */
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~BIT_4);
		WriteMMIO8(DBG_reg, ReadMMIO8(DBG_reg) | BIT_7 | BIT_1);
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			/* Set PCI configuration space offset 0x79 to 0x20 */
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;
			
			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			/* Set PCI configuration space offset 0x79 to 0x50 */
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			/* tx checksum offload enable */
			canOffload |= kChecksumIP;
			
			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		
		/* set EPHY registers */
		WriteEPHY16(0x01, 0x7C7D);
		WriteEPHY16(0x02, 0x091F);
		WriteEPHY16(0x06, 0xB271);
		WriteEPHY16(0x07, 0xCE00);
	}
	else if (mcfg == MCFG_8168D_2)
	{
		/*set PCI configuration space offset 0x70F to 0x13*/
		/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
		csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
		WriteCSI32(0x70c, csi_tmp | 0x27000000);
		
		WriteMMIO8(DBG_reg, ReadMMIO8(DBG_reg) | BIT_7 | BIT_1);
		
		if (curr_mtu_size > ETHERMTU)
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | Jumbo_En1);
			
			/* Set PCI configuration space offset 0x79 to 0x20 */
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x20;
			pciDev->configWrite8(0x79, device_control);
			
			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;
			
			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		else
		{
			WriteMMIO8(ETThReg, ETTh);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~Jumbo_En1);
			
			/* Set PCI configuration space offset 0x79 to 0x50 */
			device_control = pciDev->configRead8(0x79);
			device_control &= ~0x70;
			device_control |= 0x50;
			pciDev->configWrite8(0x79, device_control);
			
			/* tx checksum offload enable */
			canOffload |= kChecksumIP;
			
			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
		
		WriteMMIO8(Config1, 0xDF);
		
		/* set EPHY registers */
		WriteEPHY16(0x01, 0x6C7F);
		WriteEPHY16(0x02, 0x011F);
		WriteEPHY16(0x03, 0xC1B2);
		WriteEPHY16(0x1A, 0x0546);
		WriteEPHY16(0x1C, 0x80C4);
		WriteEPHY16(0x1D, 0x78E4);
		WriteEPHY16(0x0A, 0x8100);
		
		/* disable clock request. */
		pciDev->configWrite8(0x81, 0x00);
		
		WriteMMIO8(0xF3, ReadMMIO8(0xF3) | (1 << 2));
		
	}
	return;
}

// taken from rtl8168_hw_start()
void RealtekR1000::RTL8168DPHwStart2()
{
	u8 device_control;
	u32 csi_tmp;
	/*set PCI configuration space offset 0x70F to 0x37*/
	/*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
	csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
	WriteCSI32(0x70c, csi_tmp | 0x37000000);
	
	/* Set PCI configuration space offset 0x79 to 0x50 */
	device_control = pciDev->configRead8(0x79);
	device_control &= ~0x70;
	device_control |= 0x50;
	pciDev->configWrite8(0x79, device_control);
	
	if (curr_mtu_size > ETHERMTU)
	{
		WriteMMIO8(ETThReg, ETTh);
		WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
		
		/* tx checksum offload disable */
		canOffload &= ~kChecksumIP;
		
		/* rx checksum offload disable */
		cp_cmd &= ~RxChkSum;
		WriteMMIO16(CPlusCmd, cp_cmd);
	}
	else
	{
		WriteMMIO8(ETThReg, ETTh);
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
		
		/* tx checksum offload enable */
		canOffload |= kChecksumIP;
		
		/* rx checksum offload enable */
		cp_cmd |= RxChkSum;
		WriteMMIO16(CPlusCmd, cp_cmd);
	}
	
	WriteMMIO8(Config1, 0xDF);
	return;
}

void RealtekR1000::RTL8168EHwStart2()
{
	u8 device_control;
	u32 csi_tmp;
  u16 ephy_data;
  if (mcfg == MCFG_8168E_1 || mcfg == MCFG_8168E_2) {
    
//		set_offset70F(tp, 0x27);
//		set_offset79(tp, 0x50);
    /*set PCI configuration space offset 0x70F to 0x37*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
    WriteCSI32(0x70c, csi_tmp | 0x27000000);
    
    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);
    

    
		/* set EPHY registers */
		ephy_data = ReadEPHY16(0x00) & ~0x0200;
		ephy_data |= 0x0100;
		WriteEPHY16(0x00, ephy_data);
    
		ephy_data = ReadEPHY16(0x00);
		ephy_data |= 0x0004;
		WriteEPHY16(0x00, ephy_data);
    
		ephy_data = ReadEPHY16(0x06) & ~0x0002;
		ephy_data |= 0x0001;
		WriteEPHY16(0x06, ephy_data);
    
		ephy_data = ReadEPHY16(0x06);
		ephy_data |= 0x0030;
		WriteEPHY16(0x06, ephy_data);
    
		ephy_data = ReadEPHY16(0x07);
		ephy_data |= 0x2000;
		WriteEPHY16(0x07, ephy_data);
    
		ephy_data = ReadEPHY16(0x00);
		ephy_data |= 0x0020;
		WriteEPHY16(0x00, ephy_data);
    
		ephy_data = ReadEPHY16(0x03) & ~0x5800;
		ephy_data |= 0x2000;
		WriteEPHY16(0x03, ephy_data);
    
		ephy_data = ReadEPHY16(0x03);
		ephy_data |= 0x0001;
		WriteEPHY16(0x03, ephy_data);
    
		ephy_data = ReadEPHY16(0x01) & ~0x0800;
		ephy_data |= 0x1000;
		WriteEPHY16(0x01, ephy_data);
    
		ephy_data = ReadEPHY16(0x07);
		ephy_data |= 0x4000;
		WriteEPHY16(0x07, ephy_data);
    
		ephy_data = ReadEPHY16(0x1E);
		ephy_data |= 0x2000;
		WriteEPHY16(0x1E, ephy_data);
    
		WriteEPHY16(0x19, 0xFE6C);
    
		ephy_data = ReadEPHY16(0x0A);
		ephy_data |= 0x0040;
		WriteEPHY16(0x0A, ephy_data);
    
		cp_cmd &= 0x2063;
		if (curr_mtu_size > ETHERMTU) {
			WriteMMIO8(ETThReg, 0x24);
			WriteMMIO8(Config3, ReadMMIO8(Config3) | Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) | 0x01);
      
			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;
			
			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		} else {
			WriteMMIO8(ETThReg, 0x0C);
			WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Jumbo_En0);
			WriteMMIO8(Config4, ReadMMIO8(Config4) & ~0x01);
      
 			/* tx checksum offload enable */
			canOffload |= kChecksumIP;
			
			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
    
//		rtl8168_set_rxbufsize(tp, dev);
    
    
    //		WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_0);
    //		WriteMMIO32(CounterAddrLow, ReadMMIO32(CounterAddrLow) | BIT_0);
    
		WriteMMIO8(0xF3, ReadMMIO8(0xF3) | BIT_5);
		WriteMMIO8(0xF3, ReadMMIO8(0xF3) & ~BIT_5);
    
    //		WriteMMIO8(0xD3, ReadMMIO8(0xD3) | BIT_3 | BIT_2);
    
		WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_7 | BIT_6);
    
		WriteMMIO8(0xD1, ReadMMIO8(0xD1) | BIT_2 | BIT_3);
    
		WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7 | BIT_6 | BIT_5 | BIT_4 | BIT_2 | BIT_1);
    
		WriteMMIO8(Config5, (ReadMMIO8(Config5)& ~0x08) | BIT_0);
		WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);
    
		WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);
	}
}

void RealtekR1000::RTL8168EVLHwStart2()
{
	u8 device_control;
	u32 csi_tmp;
  u16 ephy_data;
  if (mcfg == MCFG_8168E_VL_1 || mcfg == MCFG_8168E_VL_2) {
    //set_offset70F(tp, 0x17);
    /*set PCI configuration space offset 0x70F to 0x17*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
    WriteCSI32(0x70c, csi_tmp | 0x17000000);
    
    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);
        
		csi_tmp = ReadERI(0xD5, 1, ERIAR_ExGMAC) | BIT_3 | BIT_2;
		WriteERI(0xD5, 1, csi_tmp, ERIAR_ExGMAC);
		WriteERI(0xC0, 2, 0x00000000, ERIAR_ExGMAC);
		WriteERI(0xB8, 2, 0x00000000, ERIAR_ExGMAC);
		WriteERI(0xC8, 4, 0x00100002, ERIAR_ExGMAC);
		WriteERI(0xE8, 4, 0x00100006, ERIAR_ExGMAC);
		csi_tmp = ReadERI(0x1D0, 4, ERIAR_ExGMAC);
		csi_tmp |= BIT_1;
		WriteERI(0x1D0, 1, csi_tmp, ERIAR_ExGMAC);

    //037---------
    csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    csi_tmp |= BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    //------

		WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);
		WriteMMIO8(0xD3, ReadMMIO8(0xD3) & ~BIT_7);
		WriteMMIO8(0x1B, ReadMMIO8(0x1B) & ~0x07);
    
		if (mcfg == MCFG_8168E_VL_1) {
			WriteMMIO32(0xB0, 0xEE480010);
			WriteMMIO8(0x1A, ReadMMIO8(0x1A) & ~(BIT_2|BIT_3));
			WriteERI(0x1DC, 1, 0x64, ERIAR_ExGMAC);
      
			WriteEPHY16(0x06, 0xF020);
			WriteEPHY16(0x07, 0x01FF);
			WriteEPHY16(0x00, 0x5027);
			WriteEPHY16(0x01, 0x0003);
			WriteEPHY16(0x02, 0x2D16);
			WriteEPHY16(0x03, 0x6D49);
			WriteEPHY16(0x08, 0x0006);
			WriteEPHY16(0x0A, 0x00C8);
		} else {
			csi_tmp = ReadERI(0x1B0, 4, ERIAR_ExGMAC);
			csi_tmp |= BIT_4;
			WriteERI(0x1B0, 1, csi_tmp, ERIAR_ExGMAC);
			WriteERI(0xCC, 4, 0x00000050, ERIAR_ExGMAC);
			WriteERI(0xd0, 4, 0x07ff0060, ERIAR_ExGMAC);
      //			WriteMMIO8(0xF2, (ReadMMIO8(0xF2) | BIT_2 | BIT_0) & ~BIT_1);	// early tally counter causes kernel panic
			WriteMMIO8(TDFNR, (ReadMMIO8(TDFNR) & ~0x3F) | 0x8);
		}
    //037------
    WriteMMIO8(TDFNR, 0x8);
    //-------

		ephy_data = ReadEPHY16(0x09);
		ephy_data |= BIT_7;
		WriteEPHY16(0x09, ephy_data);
    
		ephy_data = ReadEPHY16(0x19);
		ephy_data |= (BIT_2 | BIT_5 | BIT_9);
		WriteEPHY16(0x19, ephy_data);
    
/*		if (aspm) {
			WriteMMIO8(Config5, ReadMMIO8(Config5) | BIT_0);
			WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);
		} else {
			WriteMMIO8(Config5, ReadMMIO8(Config5) & ~BIT_0);
			WriteMMIO8(Config2, ReadMMIO8(Config2) & ~BIT_7);
		} */
    
		WriteMMIO8(Config2, ReadMMIO8(Config2) & ~BIT_5);
    
		WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_6);
		WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_6);
    
		cp_cmd &= 0x2063;
		if (curr_mtu_size > ETHERMTU) {
			WriteMMIO8(ETThReg, 0x27);
      
			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;
			
			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		} else {
			WriteMMIO8(ETThReg, 0x0C);
      
 			/* tx checksum offload enable */
			canOffload |= kChecksumIP;
			
			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
    
//		rtl8168_set_rxbufsize(tp, dev);
    
		/* disable clock request. */
//		pci_write_config_byte(pdev, 0x81, 0x00);
    pciDev->configWrite8(0x81, 0x00);
	}
}

void RealtekR1000::RTL8168FHwStart2()
{
	u8 device_control;
	u32 csi_tmp;
  u16 ephy_data;
  if (mcfg == MCFG_8168F_1 || mcfg == MCFG_8168F_2) {
    /*set PCI configuration space offset 0x70F to 0x37*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
    WriteCSI32(0x70c, csi_tmp | 0x17000000);
    
    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);
    
		WriteERI(0xC8, 4, 0x00100002, ERIAR_ExGMAC);
		WriteERI(0xE8, 4, 0x00100006, ERIAR_ExGMAC);
		WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);
		WriteMMIO8(0xD3, ReadMMIO8(0xD3) & ~BIT_7);
		csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
		csi_tmp &= ~BIT_0;
		WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
		csi_tmp |= BIT_0;
		WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    
		if (mcfg == MCFG_8168F_1) {
			ephy_data = ReadEPHY16(0x06);
			ephy_data |= BIT_5;
			ephy_data &= ~(BIT_7 | BIT_6);
			WriteEPHY16(0x06, ephy_data);
      
			ephy_data = ReadEPHY16(0x08);
			ephy_data |= BIT_1;
			ephy_data &= ~BIT_0;
			WriteEPHY16(0x08, ephy_data);
		}
    
		ephy_data = ReadEPHY16(0x09);
		ephy_data |= BIT_7;
		WriteEPHY16(0x09, ephy_data);
    
		ephy_data = ReadEPHY16(0x19);
		ephy_data |= (BIT_2 | BIT_5 | BIT_9);
		WriteEPHY16(0x19, ephy_data);
    
/*		if (aspm) {
			WriteMMIO8(Config5, ReadMMIO8(Config5) | BIT_0);
			WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_7);
		} else {
			WriteMMIO8(Config5, ReadMMIO8(Config5) & ~BIT_0);
			WriteMMIO8(Config2, ReadMMIO8(Config2) & ~BIT_7);
		} */
    
		cp_cmd &= 0x2063;
		if (curr_mtu_size > ETHERMTU) {
			WriteMMIO8(ETThReg, 0x27);
      
			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;
			
			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		} else {
			WriteMMIO8(ETThReg, 0x0C);
      
 			/* tx checksum offload enable */
			canOffload |= kChecksumIP;
			
			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}
    //037------
    WriteMMIO8(TDFNR, 0x8);
    //---------

    
//		rtl8168_set_rxbufsize(tp, dev);
    
		WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_6);
		WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_6);
    //		WriteMMIO8(0xF2, (ReadMMIO8(0xF2) | BIT_2 | BIT_0) & ~BIT_1);	// early tally counter causes kernel panic
		WriteERI(0xC0, 2, 0x00000000, ERIAR_ExGMAC);
		WriteERI(0xB8, 2, 0x00000000, ERIAR_ExGMAC);
		csi_tmp = ReadERI(0xD5, 1, ERIAR_ExGMAC);
		csi_tmp |= BIT_3 | BIT_2;
		WriteERI(0xD5, 1, csi_tmp, ERIAR_ExGMAC);
		WriteMMIO8(0x1B,ReadMMIO8(0x1B) & ~0x07);
    
		csi_tmp = ReadERI(0x1B0, 1, ERIAR_ExGMAC);
		csi_tmp |= BIT_4;
		WriteERI(0x1B0, 1, csi_tmp, ERIAR_ExGMAC);
		csi_tmp = ReadERI(0x1d0, 1, ERIAR_ExGMAC);
		csi_tmp |= BIT_4 | BIT_1;
		WriteERI(0x1d0, 1, csi_tmp, ERIAR_ExGMAC);
		WriteERI(0xCC, 4, 0x00000050, ERIAR_ExGMAC);
		WriteERI(0xd0, 4, 0x00000060, ERIAR_ExGMAC);
    
		if (ReadMMIO8(0x8c) & BIT_28) {
//			unsigned long flags;
			u32 gphy_val;
      
			WriteGMII16(0x1F, 0x0007);
			WriteGMII16(0x1E, 0x002C);
			gphy_val = ReadGMII16(0x16);
			gphy_val |= BIT_10;
			WriteGMII16(0x16, gphy_val);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8B80);
			gphy_val = ReadGMII16(0x06);
			gphy_val |= BIT_7;
			WriteGMII16(0x06, gphy_val);
			WriteGMII16(0x1F, 0x0000);
		}
	}
  else if(mcfg == MCFG_8411_1) {
    /*set PCI configuration space offset 0x70F to 0x37*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
    WriteCSI32(0x70c, csi_tmp | 0x17000000);

    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);


    WriteERI(0xC8, 4, 0x00100002, ERIAR_ExGMAC);
    WriteERI(0xE8, 4, 0x00100006, ERIAR_ExGMAC);
    WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);
    WriteMMIO8(0xD3, ReadMMIO8(0xD3) & ~BIT_7);
    csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    csi_tmp |= BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);

//    if (aspm) WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7);

    cp_cmd &= 0x2063;
    if (curr_mtu_size > ETHERMTU) {
			WriteMMIO8(ETThReg, 0x27);

			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;

			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		} else {
			WriteMMIO8(ETThReg, 0x0C);

 			/* tx checksum offload enable */
			canOffload |= kChecksumIP;

			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}


    WriteMMIO8(TDFNR, 0x8);

    WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_6);
    WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_6);
    WriteERI(0xC0, 2, 0x0000, ERIAR_ExGMAC);
    WriteERI(0xB8, 4, 0x00000000, ERIAR_ExGMAC);
    csi_tmp = ReadERI(0xD5, 1, ERIAR_ExGMAC);
    csi_tmp |= BIT_3 | BIT_2;
    WriteERI(0xD5, 1, csi_tmp, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0x1B0, 1, ERIAR_ExGMAC);
    csi_tmp |= BIT_4;
    WriteERI(0x1B0, 1, csi_tmp, ERIAR_ExGMAC);
    csi_tmp = ReadERI(0x1d0, 1, ERIAR_ExGMAC);
    csi_tmp |= BIT_4 | BIT_1;
    WriteERI(0x1d0, 1, csi_tmp, ERIAR_ExGMAC);
    WriteERI(0xCC, 4, 0x00000050, ERIAR_ExGMAC);
    WriteERI(0xd0, 4, 0x00000060, ERIAR_ExGMAC);

  }
  else if (mcfg == CFG_METHOD_21 || mcfg == CFG_METHOD_22 ||
           mcfg == CFG_METHOD_24 || mcfg == CFG_METHOD_25 ||
           mcfg == MCFG_8411B) {
    /*set PCI configuration space offset 0x70F to 0x37*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
    WriteCSI32(0x70c, csi_tmp | 0x17000000);

    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);
    
    WriteERI(0xC8, 4, 0x00080002, ERIAR_ExGMAC);
    WriteERI(0xCC, 1, 0x38, ERIAR_ExGMAC);
    WriteERI(0xD0, 1, 0x48, ERIAR_ExGMAC);
    WriteERI(0xE8, 4, 0x00100006, ERIAR_ExGMAC);

    WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);

    csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    csi_tmp |= BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);

    if (mcfg == MCFG_8411B) {
      mac_ocp_data = mac_ocp_read(0xD3C0);
      mac_ocp_data &= ~(BIT_11 | BIT_10 | BIT_9 | BIT_8 | BIT_7 | BIT_6 | BIT_5 | BIT_4 | BIT_3 | BIT_2 | BIT_1 | BIT_0);
      mac_ocp_data |= 0x03A9;
      mac_ocp_write(0xD3C0, mac_ocp_data);
      mac_ocp_data = mac_ocp_read(0xD3C2);
      mac_ocp_data &= ~(BIT_7 | BIT_6 | BIT_5 | BIT_4 | BIT_3 | BIT_2 | BIT_1 | BIT_0);
      mac_ocp_write(0xD3C2, mac_ocp_data);
      mac_ocp_data = mac_ocp_read(0xD3C4);
      mac_ocp_data |= BIT_0;
      mac_ocp_write(0xD3C4, mac_ocp_data);
    } 

    WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);

    cp_cmd = ReadMMIO16(CPlusCmd) &
    ~(EnableBist | Macdbgo_oe | Force_halfdup |
      Force_rxflow_en | Force_txflow_en |
      Cxpl_dbg_sel | ASF | PktCntrDisable |
      Macdbgo_sel);

    WriteMMIO8(0x1B, ReadMMIO8(0x1B) & ~0x07);

    WriteMMIO8(TDFNR, 0x4);

    WriteMMIO8(Config2, ReadMMIO8(Config2) & ~PMSTS_En);

    if (aspm)    WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7);

		if (curr_mtu_size > ETHERMTU) {
			WriteMMIO8(ETThReg, 0x27);

			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;

			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		} else {
			WriteMMIO8(ETThReg, 0x0C);

 			/* tx checksum offload enable */
			canOffload |= kChecksumIP;

			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}

    WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_6);
    WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_6);

    WriteMMIO8(0xD0, ReadMMIO8(0xD0) | BIT_7);

    WriteERI(0xC0, 2, 0x0000, ERIAR_ExGMAC);
    WriteERI(0xB8, 4, 0x00000000, ERIAR_ExGMAC);

    WriteERI(0x5F0, 2, 0x4f87, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0xD4, 4, ERIAR_ExGMAC);
    csi_tmp  |= ( BIT_7 | BIT_8 | BIT_9 | BIT_10 | BIT_11 | BIT_12 );
    WriteERI(0xD4, 4, csi_tmp, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0x1B0, 4, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_12;
    WriteERI(0x1B0, 4, csi_tmp, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0x2FC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~(BIT_0 | BIT_1 | BIT_2);
    csi_tmp |= BIT_0;
    WriteERI(0x2FC, 1, csi_tmp, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0x1D0, 1, ERIAR_ExGMAC);
    csi_tmp |= BIT_1;
    WriteERI(0x1D0, 1, csi_tmp, ERIAR_ExGMAC);

  }
  else if (mcfg == CFG_METHOD_23 || mcfg == CFG_METHOD_27) {
    /*set PCI configuration space offset 0x70F to 0x37*/
    /*When the register offset of PCI configuration space larger than 0xff, use CSI to access it.*/
    csi_tmp = ReadCSI32(0x70c) & 0x00ffffff;
    WriteCSI32(0x70c, csi_tmp | 0x17000000);

    /* Set PCI configuration space offset 0x79 to 0x50 */
    device_control = pciDev->configRead8(0x79);
    device_control &= ~0x70;
    device_control |= 0x50;
    pciDev->configWrite8(0x79, device_control);
    WriteERI(0xC8, 4, 0x00080002, ERIAR_ExGMAC);
    WriteERI(0xCC, 1, 0x2f, ERIAR_ExGMAC);
    WriteERI(0xD0, 1, 0x5f, ERIAR_ExGMAC);
    WriteERI(0xE8, 4, 0x00100006, ERIAR_ExGMAC);

    WriteMMIO32(TxConfig, ReadMMIO32(TxConfig) | BIT_7);

    csi_tmp = ReadERI(0xDC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);
    csi_tmp |= BIT_0;
    WriteERI(0xDC, 1, csi_tmp, ERIAR_ExGMAC);

    WriteMMIO8(Config3, ReadMMIO8(Config3) & ~Beacon_en);

    cp_cmd = ReadMMIO16(CPlusCmd) &
    ~(EnableBist | Macdbgo_oe | Force_halfdup |
      Force_rxflow_en | Force_txflow_en |
      Cxpl_dbg_sel | ASF | PktCntrDisable |
      Macdbgo_sel);

    WriteERI(0xC0, 2, 0x00000000, ERIAR_ExGMAC);
    WriteERI(0xB8, 2, 0x00000000, ERIAR_ExGMAC);
    WriteMMIO8(0x1B, ReadMMIO8(0x1B) & ~0x07);

    WriteMMIO8(TDFNR, 0x4);

//    if (aspm)      WriteMMIO8(0xF1, ReadMMIO8(0xF1) | BIT_7);

    csi_tmp = ReadERI(0x1B0, 4, ERIAR_ExGMAC);
    csi_tmp &= ~BIT_12;
    WriteERI(0x1B0, 4, csi_tmp, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0x2FC, 1, ERIAR_ExGMAC);
    csi_tmp &= ~(BIT_0 | BIT_1 | BIT_2);
    csi_tmp |= BIT_0;
    WriteERI(0x2FC, 1, csi_tmp, ERIAR_ExGMAC);

    csi_tmp = ReadERI(0x1D0, 1, ERIAR_ExGMAC);
    csi_tmp |= BIT_1;
    WriteERI(0x1D0, 1, csi_tmp, ERIAR_ExGMAC);

		if (curr_mtu_size > ETHERMTU) {
			WriteMMIO8(ETThReg, 0x27);

			/* tx checksum offload disable */
			canOffload &= ~kChecksumIP;

			/* rx checksum offload disable */
			cp_cmd &= ~RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		} else {
			WriteMMIO8(ETThReg, 0x0C);

 			/* tx checksum offload enable */
			canOffload |= kChecksumIP;

			/* rx checksum offload enable */
			cp_cmd |= RxChkSum;
			WriteMMIO16(CPlusCmd, cp_cmd);
		}

    csi_tmp = ReadERI(0xD4, 4, ERIAR_ExGMAC);
    csi_tmp  |= ( BIT_7 | BIT_8 | BIT_9 | BIT_10 | BIT_11 | BIT_12 );
    WriteERI(0xD4, 4, csi_tmp, ERIAR_ExGMAC);


  }

  //other hw parameters
  if (mcfg == CFG_METHOD_21 || mcfg == CFG_METHOD_22 ||
      mcfg == CFG_METHOD_23 || mcfg == CFG_METHOD_24 ||
      mcfg == CFG_METHOD_25 || mcfg == MCFG_8411B ||
      mcfg == CFG_METHOD_27)
    WriteERI(0x2F8, 2, 0x1D8F, ERIAR_ExGMAC);
  
  if (bios_setting & BIT_28) {
    if (mcfg == MCFG_8168F_1 || mcfg == MCFG_8168F_2 ||
        mcfg == MCFG_8411_1) {
      u32 gphy_val;
      
      WriteGMII16( 0x1F, 0x0007);
      WriteGMII16( 0x1E, 0x002C);
      gphy_val = ReadGMII16( 0x16);
      gphy_val |= BIT_10;
      WriteGMII16( 0x16, gphy_val);
      WriteGMII16( 0x1F, 0x0005);
      WriteGMII16( 0x05, 0x8B80);
      gphy_val = ReadGMII16( 0x06);
      gphy_val |= BIT_7;
      WriteGMII16( 0x06, gphy_val);
      WriteGMII16( 0x1F, 0x0000);
    }
  }
 
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      if (aspm) {
        rtl8168_init_pci_offset_99();
      }
      break;
  }
  switch (mcfg) {
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      if (aspm) {
        rtl8168_init_pci_offset_180();
      }
      break;
  }

  

  for (int timeout = 0; timeout < 10; timeout++) {
    if ((ReadERI(0x1AE, 2, ERIAR_ExGMAC) & BIT_13)==0)
      break;
    IODelay(1000);
  }

}

void RealtekR1000::rtl8168_enable_rxdvgate()
{

  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      WriteMMIO8(0xF2, ReadMMIO8(0xF2) | BIT_3);
      IODelay(2000);
      break;
  }
}


void RealtekR1000::rtl8168_disable_rxdvgate()
{

  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      WriteMMIO8(0xF2, ReadMMIO8(0xF2) & ~BIT_3);
      IODelay(2000);
      break;
  }
}

void RealtekR1000::rtl8168_wait_txrx_fifo_empty()
{
  int i;

  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      for (i = 0; i < 10; i++) {
        IODelay(100);
        if (ReadMMIO32(TxConfig) & BIT_11)
          break;
      }

      for (i = 0; i < 10; i++) {
        IODelay(100);
        if ((ReadMMIO8(MCUCmd_reg) & (Txfifo_empty | Rxfifo_empty)) == (Txfifo_empty | Rxfifo_empty))
          break;

      }
      break;
  }
}


// taken from rtl8168_nic_reset()
void RealtekR1000::RTL8168NicReset()
{
//	DLog("RTL8168NicReset\n");
	
  WriteMMIO32(RxConfig, ReadMMIO32(RxConfig) &
              ~(AcceptErr | AcceptRunt | AcceptBroadcast | AcceptMulticast |
                AcceptMyPhys |  AcceptAllPhys));
  
  rtl8168_enable_rxdvgate();

  rtl8168_wait_txrx_fifo_empty();

  switch (mcfg) {
    case MCFG_8168B_1:
    case MCFG_8168B_2:
    case MCFG_8168B_3:
      break;
    case MCFG_8168C_1:
    case MCFG_8168C_2:
    case MCFG_8168C_3:
    case MCFG_8168CP_1:
    case MCFG_8168CP_2:
    case MCFG_8168D_1:
    case MCFG_8168D_2:
    case MCFG_8168E_1:
    case MCFG_8168E_2:
      WriteMMIO8(ChipCmd, StopReq | CmdRxEnb | CmdTxEnb);
      IODelay(100);
      break;
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
      while (ReadMMIO8(TxPoll) & NPQ)
        IODelay(20);
      break;
    default:
      IODelay(10000);
      WriteMMIO8(ChipCmd, StopReq | CmdRxEnb | CmdTxEnb);
      while (!(ReadMMIO32(TxConfig) & BIT_11)) IODelay(100);
      break;
	}

  
	/* Soft reset the chip. */
	WriteMMIO8(ChipCmd, CmdReset);
	
	/* Check that the chip has finished the reset. */
	for (int i = 1000; i > 0; i--)
	{
		if ((ReadMMIO8(ChipCmd) & CmdReset) == 0)
			break;
		IODelay(100);
	}
	
	// Clear Rx counter
	cur_rx = 0;
	
	if (mcfg == MCFG_8168DP_1)
	{
		WriteMMIO32(OCPDR, 0x01);
		WriteMMIO32(OCPAR, 0x80001038);
		WriteMMIO32(OCPDR, 0x01);
		WriteMMIO32(OCPAR, 0x00001030);
		IODelay(100);
		WriteMMIO32(OCPAR, 0x00001034);
		for (int i = 1000; i > 0; i--)
		{
			if ((ReadMMIO32(OCPDR) & 0xFFFF) == 0)
				break;
			IODelay(100);
		}
	}
}

u8 RealtekR1000::rtl8168_csi_fun0_read_byte(u32 addr)
{
  u8 RetVal = 0;

  if (mcfg == MCFG_8411_1 || mcfg == MCFG_8411B) {
    u32 TmpUlong;
    u16 RegAlignAddr;
    u8 ShiftByte;

    RegAlignAddr = addr & ~(0x3);
    ShiftByte = addr & (0x3);
    TmpUlong = rtl8168_csi_other_fun_read(0, addr);
    TmpUlong >>= (8*ShiftByte);
    RetVal = (u8)TmpUlong;
  } else {

    RetVal = pciDev->configRead8(addr);
  }

  return RetVal;
}


void RealtekR1000::rtl8168_csi_fun0_write_byte(
                            u32 addr,
                            u8 value)
{
  if (mcfg == MCFG_8411_1 || mcfg == MCFG_8411B) {
    u32 TmpUlong;
    u16 RegAlignAddr;
    u8 ShiftByte;

    RegAlignAddr = addr & ~(0x3);
    ShiftByte = addr & (0x3);
    TmpUlong = rtl8168_csi_other_fun_read(0, RegAlignAddr);
    TmpUlong &= ~(0xFF << (8*ShiftByte));
    TmpUlong |= (value << (8*ShiftByte));
    rtl8168_csi_other_fun_write(0, RegAlignAddr, TmpUlong );
  } else {

    pciDev->configWrite8(addr, value);
  }
}

void RealtekR1000::rtl8168_get_bios_setting()
{  
  switch (mcfg) {
    case MCFG_8168D_1:
    case MCFG_8168D_2:
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
    case MCFG_8168E_1:
    case MCFG_8168E_2:
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      bios_setting = ReadMMIO32(0x8c);
      break;
  }
}

void RealtekR1000::rtl8168_set_bios_setting()
{
  
  switch (mcfg) {
    case MCFG_8168D_1:
    case MCFG_8168D_2:
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
    case MCFG_8168E_1:
    case MCFG_8168E_2:
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      WriteMMIO32(0x8C, bios_setting);
      break;
  }
}


void RealtekR1000::rtl8168_init_software_variable()
{
  rtl8168_get_bios_setting();

  switch (mcfg) {
    case MCFG_8101E_1:
      intr_mask = RxDescUnavail | RxFIFOOver | TxDescUnavail | TxOK | RxOK | SWInt;
      break;
    case MCFG_8101E_2:
    case MCFG_8101E_3:
    case MCFG_8102E_1:
      intr_mask = RxDescUnavail | TxDescUnavail | TxOK | RxOK | SWInt;
      break;
    default:
      intr_mask = RxDescUnavail | TxOK | RxOK | SWInt;
      break;
  }

//  max_jumbo_frame_size = rtl_chip_info[tp->chipset].jumbo_frame_sz;

  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      org_pci_offset_99 = rtl8168_csi_fun0_read_byte(0x99);
      break;
  }
  switch (mcfg) {
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      org_pci_offset_180 = rtl8168_csi_fun0_read_byte(0x180);
      break;
  }

  org_pci_offset_80 = pciDev->configRead8(0x80);
  org_pci_offset_81 = pciDev->configRead8(0x81);

  switch (mcfg) {
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      if ((features & RTL_FEATURE_MSI) && (org_pci_offset_80 & BIT_1))
        use_timer_interrrupt = FALSE;
      else
        use_timer_interrrupt = TRUE;
      break;
    default:
      use_timer_interrrupt = TRUE;
      break;
  }

  rtl8168_get_hw_wol();
}

void RealtekR1000::rtl8168_get_hw_wol()
{
  u8 options;
  u32 csi_tmp;
//  unsigned long flags;


  wol_opts = 0;
  options = ReadMMIO8(Config1);
  if (!(options & PMEnable))
    goto out_unlock;

  options = ReadMMIO8(Config3);
  if (options & LinkUp)
    wol_opts |= WAKE_PHY;

  switch (mcfg) {
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
      csi_tmp = ReadERI(0xDE, 1, ERIAR_ExGMAC);
      if (csi_tmp & BIT_0)
        wol_opts |= WAKE_MAGIC;
      break;
    default:
      if (options & MagicPacket)
        wol_opts |= WAKE_MAGIC;
      break;
  }

  options = ReadMMIO8(Config5);
  if (options & UWF)
    wol_opts |= WAKE_UCAST;
  if (options & BWF)
    wol_opts |= WAKE_BCAST;
  if (options & MWF)
    wol_opts |= WAKE_MCAST;

out_unlock:
  wol_enabled = (wol_opts) ? WOL_ENABLED : WOL_DISABLED;

}

void RealtekR1000::rtl8168_set_hw_wol(u32 wolopts)
{
  int i,tmp;
  u32 csi_tmp;
  static struct {
    u32 opt;
    u16 reg;
    u8  mask;
  } cfg[] = {
    { WAKE_ANY,   Config1, PMEnable },
    { WAKE_PHY,   Config3, LinkUp },
    { WAKE_UCAST, Config5, UWF },
    { WAKE_BCAST, Config5, BWF },
    { WAKE_MCAST, Config5, MWF },
    { WAKE_ANY,   Config5, LanWake },
    { WAKE_MAGIC, Config3, MagicPacket },
  };

  WriteMMIO8(Cfg9346, Cfg9346_Unlock);

  switch (mcfg) {
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
      tmp = ARRAY_SIZE(cfg) - 1;

      csi_tmp = ReadERI(0xDE, 1, ERIAR_ExGMAC);
      if (wolopts & WAKE_MAGIC)
        csi_tmp |= BIT_0;
      else
        csi_tmp &= ~BIT_0;
      WriteERI(0xDE, 1, csi_tmp, ERIAR_ExGMAC);
      break;
    default:
      tmp = ARRAY_SIZE(cfg);
      break;
  }

  for (i = 0; i < tmp; i++) {
    u8 options = ReadMMIO8(cfg[i].reg) & ~cfg[i].mask;
    if (wolopts & cfg[i].opt)
      options |= cfg[i].mask;
    WriteMMIO8(cfg[i].reg, options);
  }

  WriteMMIO8(Cfg9346, Cfg9346_Lock);
}


// Configure the PHY interface rtl8168_hw_phy_config
void RealtekR1000::RTL8168HwPhyConfig()
{
	switch (mcfg)
	{
		case MCFG_8168B_1:
		case MCFG_8168B_2:
		case MCFG_8168B_3:
			RTL8168BHwPhyConfig();
			break;
			
		case MCFG_8168C_1:
		case MCFG_8168C_2:
		case MCFG_8168C_3:
			RTL8168CHwPhyConfig();
			break;
			
		case MCFG_8168CP_1:
		case MCFG_8168CP_2:
			RTL8168CPHwPhyConfig();
			break;
			
		case MCFG_8168D_1:
		case MCFG_8168D_2:
			RTL8168DHwPhyConfig();
			break;
			
		case MCFG_8168DP_1:
		case MCFG_8168DP_2:
		case MCFG_8168DP_3:
			RTL8168DPHwPhyConfig();
			break;
      
    case MCFG_8168E_1:
    case MCFG_8168E_2:
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
			RTL8168EHwPhyConfig();
			break;

    case MCFG_8168F_1:
    case MCFG_8168F_2:
			RTL8168FHwPhyConfig();
			break;

    case CFG_METHOD_21:
    case CFG_METHOD_22: 
    case CFG_METHOD_23: 
    case CFG_METHOD_24:
			RTL8168GHwPhyConfig();
			break;      
      
    case MCFG_8411_1: 
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27: 
      RTL8411HwPhyConfig();
      break;
	}
  WriteGMII16(0x1F, 0x0000);
}

// subroutines of above
void RealtekR1000::RTL8168BHwPhyConfig()
{
	if (mcfg == MCFG_8168B_1)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x0B, 0x94B0);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x12, 0x6096);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x0D, 0xF8A0);
	}
	else if (mcfg == MCFG_8168B_2)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x0B, 0x94B0);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x12, 0x6096);
		
		WriteGMII16(0x1F, 0x0000);
	}
	else if (mcfg == MCFG_8168B_3)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x0B, 0x94B0);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x12, 0x6096);
		
		WriteGMII16(0x1F, 0x0000);
	}
}

void RealtekR1000::RTL8168CHwPhyConfig()
{
	DLog("RTL8168CHwPhyConfig\n");
	
	if (mcfg == MCFG_8168C_1)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x12, 0x2300);
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x16, 0x000A);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x12, 0xC096);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x00, 0x88DE);
		WriteGMII16(0x01, 0x82B1);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x08, 0x9E30);
		WriteGMII16(0x09, 0x01F0);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x0A, 0x5500);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x03, 0x7002);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x0C, 0x00C8);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x14, ReadGMII16(0x14) | (1 << 5));
		WriteGMII16(0x0D, ReadGMII16(0x0D) & ~(1 << 5));
	}
	else if (mcfg == MCFG_8168C_2)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x12, 0x2300);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x16, 0x0F0A);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x00, 0x88DE);
		WriteGMII16(0x01, 0x82B1);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x0C, 0x7EB8);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x06, 0x0761);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x03, 0x802F);
		WriteGMII16(0x02, 0x4F02);
		WriteGMII16(0x01, 0x0409);
		WriteGMII16(0x00, 0xF099);
		WriteGMII16(0x04, 0x9800);
		WriteGMII16(0x04, 0x9000);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x16, ReadGMII16(0x16) | (1 << 0));
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x14, ReadGMII16(0x14) | (1 << 5));
		WriteGMII16(0x0D, ReadGMII16(0x0D) & ~(1 << 5));
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x1D, 0x3D98);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
		WriteGMII16(0x1F, 0x0000);
	}
	else if (mcfg == MCFG_8168C_3)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x12, 0x2300);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x16, 0x0F0A);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x00, 0x88DE);
		WriteGMII16(0x01, 0x82B1);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x0C, 0x7EB8);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x06, 0x0761);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x06, 0x5461);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x16, ReadGMII16(0x16) | (1 << 0));
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x14, ReadGMII16(0x14) | (1 << 5));
		WriteGMII16(0x0D, ReadGMII16(0x0D) & ~(1 << 5));
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x1D, 0x3D98);
		WriteGMII16(0x1F, 0x0000);
		
		WriteGMII16(0x1f, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
		WriteGMII16(0x1F, 0x0000);
	}
}

void RealtekR1000::RTL8168CPHwPhyConfig()
{
	if (mcfg == MCFG_8168CP_1)
	{
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x14, ReadGMII16(0x14) | (1 << 5));
		WriteGMII16(0x0D, ReadGMII16(0x0D) & ~(1 << 5));
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x1D, 0x3D98);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x14, 0xCAA3);
		WriteGMII16(0x1C, 0x000A);
		WriteGMII16(0x18, 0x65D0);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x17, 0xB580);
		WriteGMII16(0x18, 0xFF54);
		WriteGMII16(0x19, 0x3954);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x0D, 0x310C);
		WriteGMII16(0x0E, 0x310C);
		WriteGMII16(0x0F, 0x311C);
		WriteGMII16(0x06, 0x0761);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x18, 0xFF55);
		WriteGMII16(0x19, 0x3955);
		WriteGMII16(0x18, 0xFF54);
		WriteGMII16(0x19, 0x3954);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
		
		WriteGMII16(0x1F, 0x0000);
	}
	else if (mcfg == MCFG_8168CP_2)
	{
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x14, ReadGMII16(0x14) | (1 << 5));
		WriteGMII16(0x0D, ReadGMII16(0x0D) & ~(1 << 5));
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x14, 0xCAA3);
		WriteGMII16(0x1C, 0x000A);
		WriteGMII16(0x18, 0x65D0);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x17, 0xB580);
		WriteGMII16(0x18, 0xFF54);
		WriteGMII16(0x19, 0x3954);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x0D, 0x310C);
		WriteGMII16(0x0E, 0x310C);
		WriteGMII16(0x0F, 0x311C);
		WriteGMII16(0x06, 0x0761);
		
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x18, 0xFF55);
		WriteGMII16(0x19, 0x3955);
		WriteGMII16(0x18, 0xFF54);
		WriteGMII16(0x19, 0x3954);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x16, ReadGMII16(0x16) | (1 << 0));
		
		WriteGMII16(0x1F, 0x0000);
	}
}

void RealtekR1000::RTL8168DHwPhyConfig()
{
	u32 gphy_val;
	if (mcfg == MCFG_8168D_1)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x06, 0x4064);
		WriteGMII16(0x07, 0x2863);
		WriteGMII16(0x08, 0x059C);
		WriteGMII16(0x09, 0x26B4);
		WriteGMII16(0x0A, 0x6A19);
		WriteGMII16(0x0B, 0xDCC8);
		WriteGMII16(0x10, 0xF06D);
		WriteGMII16(0x14, 0x7F68);
		WriteGMII16(0x18, 0x7FD9);
		WriteGMII16(0x1C, 0xF0FF);
		WriteGMII16(0x1D, 0x3D9C);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x12, 0xF49F);
		WriteGMII16(0x13, 0x070B);
		WriteGMII16(0x1A, 0x05AD);
		WriteGMII16(0x14, 0x94C0);
		
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x0B) & 0xFF00;
		gphy_val |= 0x10;
		WriteGMII16(0x0B, gphy_val);
		gphy_val = ReadGMII16(0x0C) & 0x00FF;
		gphy_val |= 0xA200;
		WriteGMII16(0x0C, gphy_val);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x06, 0x5561);
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8332);
		WriteGMII16(0x06, 0x5561);
		
		if (RTL8168ReadEfuse(0x01) == 0xb1)
		{
			WriteGMII16(0x1F, 0x0002);
			WriteGMII16(0x05, 0x669A);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8330);
			WriteGMII16(0x06, 0x669A);
			
			WriteGMII16(0x1F, 0x0002);
			gphy_val = ReadGMII16(0x0D);
			if ((gphy_val & 0x00FF) != 0x006C)
			{
				gphy_val &= 0xFF00;
				WriteGMII16(0x1F, 0x0002);
				WriteGMII16(0x0D, gphy_val | 0x0065);
				WriteGMII16(0x0D, gphy_val | 0x0066);
				WriteGMII16(0x0D, gphy_val | 0x0067);
				WriteGMII16(0x0D, gphy_val | 0x0068);
				WriteGMII16(0x0D, gphy_val | 0x0069);
				WriteGMII16(0x0D, gphy_val | 0x006A);
				WriteGMII16(0x0D, gphy_val | 0x006B);
				WriteGMII16(0x0D, gphy_val | 0x006C);
			}
		}
		else
		{
			WriteGMII16(0x1F, 0x0002);
			WriteGMII16(0x05, 0x6662);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8330);
			WriteGMII16(0x06, 0x6662);
		}
		
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x0D);
		gphy_val |= BIT_9;
		gphy_val |= BIT_8;
		WriteGMII16(0x0D, gphy_val);
		gphy_val = ReadGMII16(0x0F);
		gphy_val |= BIT_4;
		WriteGMII16(0x0F, gphy_val);
		
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x02);
		gphy_val &= ~BIT_10;
		gphy_val &= ~BIT_9;
		gphy_val |= BIT_8;
		WriteGMII16(0x02, gphy_val);
		gphy_val = ReadGMII16(0x03);
		gphy_val &= ~BIT_15;
		gphy_val &= ~BIT_14;
		gphy_val &= ~BIT_13;
		WriteGMII16(0x03, gphy_val);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
		
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x001B);
		if (ReadGMII16(0x06) == 0xBF00)
		{
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x0080);
			WriteGMII16(0x05, 0x8000);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfaef);
			WriteGMII16(0x06, 0x59ee);
			WriteGMII16(0x06, 0xf8ea);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0xf8eb);
			WriteGMII16(0x06, 0x00e0);
			WriteGMII16(0x06, 0xf87c);
			WriteGMII16(0x06, 0xe1f8);
			WriteGMII16(0x06, 0x7d59);
			WriteGMII16(0x06, 0x0fef);
			WriteGMII16(0x06, 0x0139);
			WriteGMII16(0x06, 0x029e);
			WriteGMII16(0x06, 0x06ef);
			WriteGMII16(0x06, 0x1039);
			WriteGMII16(0x06, 0x089f);
			WriteGMII16(0x06, 0x2aee);
			WriteGMII16(0x06, 0xf8ea);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0xf8eb);
			WriteGMII16(0x06, 0x01e0);
			WriteGMII16(0x06, 0xf87c);
			WriteGMII16(0x06, 0xe1f8);
			WriteGMII16(0x06, 0x7d58);
			WriteGMII16(0x06, 0x409e);
			WriteGMII16(0x06, 0x0f39);
			WriteGMII16(0x06, 0x46aa);
			WriteGMII16(0x06, 0x0bbf);
			WriteGMII16(0x06, 0x8290);
			WriteGMII16(0x06, 0xd682);
			WriteGMII16(0x06, 0x9802);
			WriteGMII16(0x06, 0x014f);
			WriteGMII16(0x06, 0xae09);
			WriteGMII16(0x06, 0xbf82);
			WriteGMII16(0x06, 0x98d6);
			WriteGMII16(0x06, 0x82a0);
			WriteGMII16(0x06, 0x0201);
			WriteGMII16(0x06, 0x4fef);
			WriteGMII16(0x06, 0x95fe);
			WriteGMII16(0x06, 0xfdfc);
			WriteGMII16(0x06, 0x05f8);
			WriteGMII16(0x06, 0xf9fa);
			WriteGMII16(0x06, 0xeef8);
			WriteGMII16(0x06, 0xea00);
			WriteGMII16(0x06, 0xeef8);
			WriteGMII16(0x06, 0xeb00);
			WriteGMII16(0x06, 0xe2f8);
			WriteGMII16(0x06, 0x7ce3);
			WriteGMII16(0x06, 0xf87d);
			WriteGMII16(0x06, 0xa511);
			WriteGMII16(0x06, 0x1112);
			WriteGMII16(0x06, 0xd240);
			WriteGMII16(0x06, 0xd644);
			WriteGMII16(0x06, 0x4402);
			WriteGMII16(0x06, 0x8217);
			WriteGMII16(0x06, 0xd2a0);
			WriteGMII16(0x06, 0xd6aa);
			WriteGMII16(0x06, 0xaa02);
			WriteGMII16(0x06, 0x8217);
			WriteGMII16(0x06, 0xae0f);
			WriteGMII16(0x06, 0xa544);
			WriteGMII16(0x06, 0x4402);
			WriteGMII16(0x06, 0xae4d);
			WriteGMII16(0x06, 0xa5aa);
			WriteGMII16(0x06, 0xaa02);
			WriteGMII16(0x06, 0xae47);
			WriteGMII16(0x06, 0xaf82);
			WriteGMII16(0x06, 0x13ee);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0x0fee);
			WriteGMII16(0x06, 0x834c);
			WriteGMII16(0x06, 0x0fee);
			WriteGMII16(0x06, 0x834f);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8351);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x834a);
			WriteGMII16(0x06, 0xffee);
			WriteGMII16(0x06, 0x834b);
			WriteGMII16(0x06, 0xffe0);
			WriteGMII16(0x06, 0x8330);
			WriteGMII16(0x06, 0xe183);
			WriteGMII16(0x06, 0x3158);
			WriteGMII16(0x06, 0xfee4);
			WriteGMII16(0x06, 0xf88a);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x8be0);
			WriteGMII16(0x06, 0x8332);
			WriteGMII16(0x06, 0xe183);
			WriteGMII16(0x06, 0x3359);
			WriteGMII16(0x06, 0x0fe2);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0x0c24);
			WriteGMII16(0x06, 0x5af0);
			WriteGMII16(0x06, 0x1e12);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x8ce5);
			WriteGMII16(0x06, 0xf88d);
			WriteGMII16(0x06, 0xaf82);
			WriteGMII16(0x06, 0x13e0);
			WriteGMII16(0x06, 0x834f);
			WriteGMII16(0x06, 0x10e4);
			WriteGMII16(0x06, 0x834f);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x009f);
			WriteGMII16(0x06, 0x0ae0);
			WriteGMII16(0x06, 0x834f);
			WriteGMII16(0x06, 0xa010);
			WriteGMII16(0x06, 0xa5ee);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x01e0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7805);
			WriteGMII16(0x06, 0x9e9a);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x049e);
			WriteGMII16(0x06, 0x10e0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7803);
			WriteGMII16(0x06, 0x9e0f);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x019e);
			WriteGMII16(0x06, 0x05ae);
			WriteGMII16(0x06, 0x0caf);
			WriteGMII16(0x06, 0x81f8);
			WriteGMII16(0x06, 0xaf81);
			WriteGMII16(0x06, 0xa3af);
			WriteGMII16(0x06, 0x81dc);
			WriteGMII16(0x06, 0xaf82);
			WriteGMII16(0x06, 0x13ee);
			WriteGMII16(0x06, 0x8348);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8349);
			WriteGMII16(0x06, 0x00e0);
			WriteGMII16(0x06, 0x8351);
			WriteGMII16(0x06, 0x10e4);
			WriteGMII16(0x06, 0x8351);
			WriteGMII16(0x06, 0x5801);
			WriteGMII16(0x06, 0x9fea);
			WriteGMII16(0x06, 0xd000);
			WriteGMII16(0x06, 0xd180);
			WriteGMII16(0x06, 0x1f66);
			WriteGMII16(0x06, 0xe2f8);
			WriteGMII16(0x06, 0xeae3);
			WriteGMII16(0x06, 0xf8eb);
			WriteGMII16(0x06, 0x5af8);
			WriteGMII16(0x06, 0x1e20);
			WriteGMII16(0x06, 0xe6f8);
			WriteGMII16(0x06, 0xeae5);
			WriteGMII16(0x06, 0xf8eb);
			WriteGMII16(0x06, 0xd302);
			WriteGMII16(0x06, 0xb3fe);
			WriteGMII16(0x06, 0xe2f8);
			WriteGMII16(0x06, 0x7cef);
			WriteGMII16(0x06, 0x325b);
			WriteGMII16(0x06, 0x80e3);
			WriteGMII16(0x06, 0xf87d);
			WriteGMII16(0x06, 0x9e03);
			WriteGMII16(0x06, 0x7dff);
			WriteGMII16(0x06, 0xff0d);
			WriteGMII16(0x06, 0x581c);
			WriteGMII16(0x06, 0x551a);
			WriteGMII16(0x06, 0x6511);
			WriteGMII16(0x06, 0xa190);
			WriteGMII16(0x06, 0xd3e2);
			WriteGMII16(0x06, 0x8348);
			WriteGMII16(0x06, 0xe383);
			WriteGMII16(0x06, 0x491b);
			WriteGMII16(0x06, 0x56ab);
			WriteGMII16(0x06, 0x08ef);
			WriteGMII16(0x06, 0x56e6);
			WriteGMII16(0x06, 0x8348);
			WriteGMII16(0x06, 0xe783);
			WriteGMII16(0x06, 0x4910);
			WriteGMII16(0x06, 0xd180);
			WriteGMII16(0x06, 0x1f66);
			WriteGMII16(0x06, 0xa004);
			WriteGMII16(0x06, 0xb9e2);
			WriteGMII16(0x06, 0x8348);
			WriteGMII16(0x06, 0xe383);
			WriteGMII16(0x06, 0x49ef);
			WriteGMII16(0x06, 0x65e2);
			WriteGMII16(0x06, 0x834a);
			WriteGMII16(0x06, 0xe383);
			WriteGMII16(0x06, 0x4b1b);
			WriteGMII16(0x06, 0x56aa);
			WriteGMII16(0x06, 0x0eef);
			WriteGMII16(0x06, 0x56e6);
			WriteGMII16(0x06, 0x834a);
			WriteGMII16(0x06, 0xe783);
			WriteGMII16(0x06, 0x4be2);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0xe683);
			WriteGMII16(0x06, 0x4ce0);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0xa000);
			WriteGMII16(0x06, 0x0caf);
			WriteGMII16(0x06, 0x81dc);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4d10);
			WriteGMII16(0x06, 0xe483);
			WriteGMII16(0x06, 0x4dae);
			WriteGMII16(0x06, 0x0480);
			WriteGMII16(0x06, 0xe483);
			WriteGMII16(0x06, 0x4de0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7803);
			WriteGMII16(0x06, 0x9e0b);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x049e);
			WriteGMII16(0x06, 0x04ee);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x02e0);
			WriteGMII16(0x06, 0x8332);
			WriteGMII16(0x06, 0xe183);
			WriteGMII16(0x06, 0x3359);
			WriteGMII16(0x06, 0x0fe2);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0x0c24);
			WriteGMII16(0x06, 0x5af0);
			WriteGMII16(0x06, 0x1e12);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x8ce5);
			WriteGMII16(0x06, 0xf88d);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x30e1);
			WriteGMII16(0x06, 0x8331);
			WriteGMII16(0x06, 0x6801);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x8ae5);
			WriteGMII16(0x06, 0xf88b);
			WriteGMII16(0x06, 0xae37);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4e03);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4ce1);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0x1b01);
			WriteGMII16(0x06, 0x9e04);
			WriteGMII16(0x06, 0xaaa1);
			WriteGMII16(0x06, 0xaea8);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4e04);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4f00);
			WriteGMII16(0x06, 0xaeab);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4f78);
			WriteGMII16(0x06, 0x039f);
			WriteGMII16(0x06, 0x14ee);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x05d2);
			WriteGMII16(0x06, 0x40d6);
			WriteGMII16(0x06, 0x5554);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0x17d2);
			WriteGMII16(0x06, 0xa0d6);
			WriteGMII16(0x06, 0xba00);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0x17fe);
			WriteGMII16(0x06, 0xfdfc);
			WriteGMII16(0x06, 0x05f8);
			WriteGMII16(0x06, 0xe0f8);
			WriteGMII16(0x06, 0x60e1);
			WriteGMII16(0x06, 0xf861);
			WriteGMII16(0x06, 0x6802);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x60e5);
			WriteGMII16(0x06, 0xf861);
			WriteGMII16(0x06, 0xe0f8);
			WriteGMII16(0x06, 0x48e1);
			WriteGMII16(0x06, 0xf849);
			WriteGMII16(0x06, 0x580f);
			WriteGMII16(0x06, 0x1e02);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x48e5);
			WriteGMII16(0x06, 0xf849);
			WriteGMII16(0x06, 0xd000);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0x5bbf);
			WriteGMII16(0x06, 0x8350);
			WriteGMII16(0x06, 0xef46);
			WriteGMII16(0x06, 0xdc19);
			WriteGMII16(0x06, 0xddd0);
			WriteGMII16(0x06, 0x0102);
			WriteGMII16(0x06, 0x825b);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0x77e0);
			WriteGMII16(0x06, 0xf860);
			WriteGMII16(0x06, 0xe1f8);
			WriteGMII16(0x06, 0x6158);
			WriteGMII16(0x06, 0xfde4);
			WriteGMII16(0x06, 0xf860);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x61fc);
			WriteGMII16(0x06, 0x04f9);
			WriteGMII16(0x06, 0xfafb);
			WriteGMII16(0x06, 0xc6bf);
			WriteGMII16(0x06, 0xf840);
			WriteGMII16(0x06, 0xbe83);
			WriteGMII16(0x06, 0x50a0);
			WriteGMII16(0x06, 0x0101);
			WriteGMII16(0x06, 0x071b);
			WriteGMII16(0x06, 0x89cf);
			WriteGMII16(0x06, 0xd208);
			WriteGMII16(0x06, 0xebdb);
			WriteGMII16(0x06, 0x19b2);
			WriteGMII16(0x06, 0xfbff);
			WriteGMII16(0x06, 0xfefd);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe0f8);
			WriteGMII16(0x06, 0x48e1);
			WriteGMII16(0x06, 0xf849);
			WriteGMII16(0x06, 0x6808);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x48e5);
			WriteGMII16(0x06, 0xf849);
			WriteGMII16(0x06, 0x58f7);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x48e5);
			WriteGMII16(0x06, 0xf849);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0x4d20);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x4e22);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x4ddf);
			WriteGMII16(0x06, 0xff01);
			WriteGMII16(0x06, 0x4edd);
			WriteGMII16(0x06, 0xff01);
			WriteGMII16(0x06, 0xf8fa);
			WriteGMII16(0x06, 0xfbef);
			WriteGMII16(0x06, 0x79bf);
			WriteGMII16(0x06, 0xf822);
			WriteGMII16(0x06, 0xd819);
			WriteGMII16(0x06, 0xd958);
			WriteGMII16(0x06, 0x849f);
			WriteGMII16(0x06, 0x09bf);
			WriteGMII16(0x06, 0x82be);
			WriteGMII16(0x06, 0xd682);
			WriteGMII16(0x06, 0xc602);
			WriteGMII16(0x06, 0x014f);
			WriteGMII16(0x06, 0xef97);
			WriteGMII16(0x06, 0xfffe);
			WriteGMII16(0x06, 0xfc05);
			WriteGMII16(0x06, 0x17ff);
			WriteGMII16(0x06, 0xfe01);
			WriteGMII16(0x06, 0x1700);
			WriteGMII16(0x06, 0x0102);
			WriteGMII16(0x05, 0x83d8);
			WriteGMII16(0x06, 0x8051);
			WriteGMII16(0x05, 0x83d6);
			WriteGMII16(0x06, 0x82a0);
			WriteGMII16(0x05, 0x83d4);
			WriteGMII16(0x06, 0x8000);
			WriteGMII16(0x02, 0x2010);
			WriteGMII16(0x03, 0xdc00);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x0b, 0x0600);
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x00fc);
			WriteGMII16(0x1f, 0x0000);
		}
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x0D, 0xF880);
		WriteGMII16(0x1F, 0x0000);
	}
	else if (mcfg == MCFG_8168D_2)
	{
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x06, 0x4064);
		WriteGMII16(0x07, 0x2863);
		WriteGMII16(0x08, 0x059C);
		WriteGMII16(0x09, 0x26B4);
		WriteGMII16(0x0A, 0x6A19);
		WriteGMII16(0x0B, 0xDCC8);
		WriteGMII16(0x10, 0xF06D);
		WriteGMII16(0x14, 0x7F68);
		WriteGMII16(0x18, 0x7FD9);
		WriteGMII16(0x1C, 0xF0FF);
		WriteGMII16(0x1D, 0x3D9C);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x12, 0xF49F);
		WriteGMII16(0x13, 0x070B);
		WriteGMII16(0x1A, 0x05AD);
		WriteGMII16(0x14, 0x94C0);
		
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x06, 0x5561);
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8332);
		WriteGMII16(0x06, 0x5561);
		
		if (RTL8168ReadEfuse(0x01) == 0xb1)
		{
			WriteGMII16(0x1F, 0x0002);
			WriteGMII16(0x05, 0x669A);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8330);
			WriteGMII16(0x06, 0x669A);
			
			WriteGMII16(0x1F, 0x0002);
			gphy_val = ReadGMII16(0x0D);
			if ((gphy_val & 0x00FF) != 0x006C)
			{
				gphy_val &= 0xFF00;
				WriteGMII16(0x1F, 0x0002);
				WriteGMII16(0x0D, gphy_val | 0x0065);
				WriteGMII16(0x0D, gphy_val | 0x0066);
				WriteGMII16(0x0D, gphy_val | 0x0067);
				WriteGMII16(0x0D, gphy_val | 0x0068);
				WriteGMII16(0x0D, gphy_val | 0x0069);
				WriteGMII16(0x0D, gphy_val | 0x006A);
				WriteGMII16(0x0D, gphy_val | 0x006B);
				WriteGMII16(0x0D, gphy_val | 0x006C);
			}
		}
		else
		{
			WriteGMII16(0x1F, 0x0002);
			WriteGMII16(0x05, 0x2642);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8330);
			WriteGMII16(0x06, 0x2642);
		}
		
		if (RTL8168ReadEfuse(0x30) == 0x98)
		{
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x11, ReadGMII16(0x11) & ~BIT_1);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x01, ReadGMII16(0x01) | BIT_9);
		}
		else if (RTL8168ReadEfuse(0x30) == 0x90)
		{
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x01, ReadGMII16(0x01) & ~BIT_9);
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x16, 0x5101);
		}
		
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x02);
		gphy_val &= ~BIT_10;
		gphy_val &= ~BIT_9;
		gphy_val |= BIT_8;
		WriteGMII16(0x02, gphy_val);
		gphy_val = ReadGMII16(0x03);
		gphy_val &= ~BIT_15;
		gphy_val &= ~BIT_14;
		gphy_val &= ~BIT_13;
		WriteGMII16(0x03, gphy_val);
		
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
		
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x0F);
		gphy_val |= BIT_4;
		gphy_val |= BIT_2;
		gphy_val |= BIT_1;
		gphy_val |= BIT_0;
		WriteGMII16(0x0F, gphy_val);
		
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x001B);
		if (ReadGMII16(0x06) == 0xB300)
		{
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x0080);
			WriteGMII16(0x05, 0x8000);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfaee);
			WriteGMII16(0x06, 0xf8ea);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0xf8eb);
			WriteGMII16(0x06, 0x00e2);
			WriteGMII16(0x06, 0xf87c);
			WriteGMII16(0x06, 0xe3f8);
			WriteGMII16(0x06, 0x7da5);
			WriteGMII16(0x06, 0x1111);
			WriteGMII16(0x06, 0x12d2);
			WriteGMII16(0x06, 0x40d6);
			WriteGMII16(0x06, 0x4444);
			WriteGMII16(0x06, 0x0281);
			WriteGMII16(0x06, 0xc6d2);
			WriteGMII16(0x06, 0xa0d6);
			WriteGMII16(0x06, 0xaaaa);
			WriteGMII16(0x06, 0x0281);
			WriteGMII16(0x06, 0xc6ae);
			WriteGMII16(0x06, 0x0fa5);
			WriteGMII16(0x06, 0x4444);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x4da5);
			WriteGMII16(0x06, 0xaaaa);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x47af);
			WriteGMII16(0x06, 0x81c2);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4e00);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4d0f);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4c0f);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4f00);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x5100);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4aff);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4bff);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x30e1);
			WriteGMII16(0x06, 0x8331);
			WriteGMII16(0x06, 0x58fe);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x8ae5);
			WriteGMII16(0x06, 0xf88b);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x32e1);
			WriteGMII16(0x06, 0x8333);
			WriteGMII16(0x06, 0x590f);
			WriteGMII16(0x06, 0xe283);
			WriteGMII16(0x06, 0x4d0c);
			WriteGMII16(0x06, 0x245a);
			WriteGMII16(0x06, 0xf01e);
			WriteGMII16(0x06, 0x12e4);
			WriteGMII16(0x06, 0xf88c);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x8daf);
			WriteGMII16(0x06, 0x81c2);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4f10);
			WriteGMII16(0x06, 0xe483);
			WriteGMII16(0x06, 0x4fe0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7800);
			WriteGMII16(0x06, 0x9f0a);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4fa0);
			WriteGMII16(0x06, 0x10a5);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4e01);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x059e);
			WriteGMII16(0x06, 0x9ae0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7804);
			WriteGMII16(0x06, 0x9e10);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x039e);
			WriteGMII16(0x06, 0x0fe0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7801);
			WriteGMII16(0x06, 0x9e05);
			WriteGMII16(0x06, 0xae0c);
			WriteGMII16(0x06, 0xaf81);
			WriteGMII16(0x06, 0xa7af);
			WriteGMII16(0x06, 0x8152);
			WriteGMII16(0x06, 0xaf81);
			WriteGMII16(0x06, 0x8baf);
			WriteGMII16(0x06, 0x81c2);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4800);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4900);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x5110);
			WriteGMII16(0x06, 0xe483);
			WriteGMII16(0x06, 0x5158);
			WriteGMII16(0x06, 0x019f);
			WriteGMII16(0x06, 0xead0);
			WriteGMII16(0x06, 0x00d1);
			WriteGMII16(0x06, 0x801f);
			WriteGMII16(0x06, 0x66e2);
			WriteGMII16(0x06, 0xf8ea);
			WriteGMII16(0x06, 0xe3f8);
			WriteGMII16(0x06, 0xeb5a);
			WriteGMII16(0x06, 0xf81e);
			WriteGMII16(0x06, 0x20e6);
			WriteGMII16(0x06, 0xf8ea);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0xebd3);
			WriteGMII16(0x06, 0x02b3);
			WriteGMII16(0x06, 0xfee2);
			WriteGMII16(0x06, 0xf87c);
			WriteGMII16(0x06, 0xef32);
			WriteGMII16(0x06, 0x5b80);
			WriteGMII16(0x06, 0xe3f8);
			WriteGMII16(0x06, 0x7d9e);
			WriteGMII16(0x06, 0x037d);
			WriteGMII16(0x06, 0xffff);
			WriteGMII16(0x06, 0x0d58);
			WriteGMII16(0x06, 0x1c55);
			WriteGMII16(0x06, 0x1a65);
			WriteGMII16(0x06, 0x11a1);
			WriteGMII16(0x06, 0x90d3);
			WriteGMII16(0x06, 0xe283);
			WriteGMII16(0x06, 0x48e3);
			WriteGMII16(0x06, 0x8349);
			WriteGMII16(0x06, 0x1b56);
			WriteGMII16(0x06, 0xab08);
			WriteGMII16(0x06, 0xef56);
			WriteGMII16(0x06, 0xe683);
			WriteGMII16(0x06, 0x48e7);
			WriteGMII16(0x06, 0x8349);
			WriteGMII16(0x06, 0x10d1);
			WriteGMII16(0x06, 0x801f);
			WriteGMII16(0x06, 0x66a0);
			WriteGMII16(0x06, 0x04b9);
			WriteGMII16(0x06, 0xe283);
			WriteGMII16(0x06, 0x48e3);
			WriteGMII16(0x06, 0x8349);
			WriteGMII16(0x06, 0xef65);
			WriteGMII16(0x06, 0xe283);
			WriteGMII16(0x06, 0x4ae3);
			WriteGMII16(0x06, 0x834b);
			WriteGMII16(0x06, 0x1b56);
			WriteGMII16(0x06, 0xaa0e);
			WriteGMII16(0x06, 0xef56);
			WriteGMII16(0x06, 0xe683);
			WriteGMII16(0x06, 0x4ae7);
			WriteGMII16(0x06, 0x834b);
			WriteGMII16(0x06, 0xe283);
			WriteGMII16(0x06, 0x4de6);
			WriteGMII16(0x06, 0x834c);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4da0);
			WriteGMII16(0x06, 0x000c);
			WriteGMII16(0x06, 0xaf81);
			WriteGMII16(0x06, 0x8be0);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0x10e4);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0xae04);
			WriteGMII16(0x06, 0x80e4);
			WriteGMII16(0x06, 0x834d);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x4e78);
			WriteGMII16(0x06, 0x039e);
			WriteGMII16(0x06, 0x0be0);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x7804);
			WriteGMII16(0x06, 0x9e04);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4e02);
			WriteGMII16(0x06, 0xe083);
			WriteGMII16(0x06, 0x32e1);
			WriteGMII16(0x06, 0x8333);
			WriteGMII16(0x06, 0x590f);
			WriteGMII16(0x06, 0xe283);
			WriteGMII16(0x06, 0x4d0c);
			WriteGMII16(0x06, 0x245a);
			WriteGMII16(0x06, 0xf01e);
			WriteGMII16(0x06, 0x12e4);
			WriteGMII16(0x06, 0xf88c);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x8de0);
			WriteGMII16(0x06, 0x8330);
			WriteGMII16(0x06, 0xe183);
			WriteGMII16(0x06, 0x3168);
			WriteGMII16(0x06, 0x01e4);
			WriteGMII16(0x06, 0xf88a);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x8bae);
			WriteGMII16(0x06, 0x37ee);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x03e0);
			WriteGMII16(0x06, 0x834c);
			WriteGMII16(0x06, 0xe183);
			WriteGMII16(0x06, 0x4d1b);
			WriteGMII16(0x06, 0x019e);
			WriteGMII16(0x06, 0x04aa);
			WriteGMII16(0x06, 0xa1ae);
			WriteGMII16(0x06, 0xa8ee);
			WriteGMII16(0x06, 0x834e);
			WriteGMII16(0x06, 0x04ee);
			WriteGMII16(0x06, 0x834f);
			WriteGMII16(0x06, 0x00ae);
			WriteGMII16(0x06, 0xabe0);
			WriteGMII16(0x06, 0x834f);
			WriteGMII16(0x06, 0x7803);
			WriteGMII16(0x06, 0x9f14);
			WriteGMII16(0x06, 0xee83);
			WriteGMII16(0x06, 0x4e05);
			WriteGMII16(0x06, 0xd240);
			WriteGMII16(0x06, 0xd655);
			WriteGMII16(0x06, 0x5402);
			WriteGMII16(0x06, 0x81c6);
			WriteGMII16(0x06, 0xd2a0);
			WriteGMII16(0x06, 0xd6ba);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x81c6);
			WriteGMII16(0x06, 0xfefd);
			WriteGMII16(0x06, 0xfc05);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0xf860);
			WriteGMII16(0x06, 0xe1f8);
			WriteGMII16(0x06, 0x6168);
			WriteGMII16(0x06, 0x02e4);
			WriteGMII16(0x06, 0xf860);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x61e0);
			WriteGMII16(0x06, 0xf848);
			WriteGMII16(0x06, 0xe1f8);
			WriteGMII16(0x06, 0x4958);
			WriteGMII16(0x06, 0x0f1e);
			WriteGMII16(0x06, 0x02e4);
			WriteGMII16(0x06, 0xf848);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x49d0);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x820a);
			WriteGMII16(0x06, 0xbf83);
			WriteGMII16(0x06, 0x50ef);
			WriteGMII16(0x06, 0x46dc);
			WriteGMII16(0x06, 0x19dd);
			WriteGMII16(0x06, 0xd001);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0x0a02);
			WriteGMII16(0x06, 0x8226);
			WriteGMII16(0x06, 0xe0f8);
			WriteGMII16(0x06, 0x60e1);
			WriteGMII16(0x06, 0xf861);
			WriteGMII16(0x06, 0x58fd);
			WriteGMII16(0x06, 0xe4f8);
			WriteGMII16(0x06, 0x60e5);
			WriteGMII16(0x06, 0xf861);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf9fa);
			WriteGMII16(0x06, 0xfbc6);
			WriteGMII16(0x06, 0xbff8);
			WriteGMII16(0x06, 0x40be);
			WriteGMII16(0x06, 0x8350);
			WriteGMII16(0x06, 0xa001);
			WriteGMII16(0x06, 0x0107);
			WriteGMII16(0x06, 0x1b89);
			WriteGMII16(0x06, 0xcfd2);
			WriteGMII16(0x06, 0x08eb);
			WriteGMII16(0x06, 0xdb19);
			WriteGMII16(0x06, 0xb2fb);
			WriteGMII16(0x06, 0xfffe);
			WriteGMII16(0x06, 0xfd04);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0xf848);
			WriteGMII16(0x06, 0xe1f8);
			WriteGMII16(0x06, 0x4968);
			WriteGMII16(0x06, 0x08e4);
			WriteGMII16(0x06, 0xf848);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x4958);
			WriteGMII16(0x06, 0xf7e4);
			WriteGMII16(0x06, 0xf848);
			WriteGMII16(0x06, 0xe5f8);
			WriteGMII16(0x06, 0x49fc);
			WriteGMII16(0x06, 0x044d);
			WriteGMII16(0x06, 0x2000);
			WriteGMII16(0x06, 0x024e);
			WriteGMII16(0x06, 0x2200);
			WriteGMII16(0x06, 0x024d);
			WriteGMII16(0x06, 0xdfff);
			WriteGMII16(0x06, 0x014e);
			WriteGMII16(0x06, 0xddff);
			WriteGMII16(0x06, 0x01f8);
			WriteGMII16(0x06, 0xfafb);
			WriteGMII16(0x06, 0xef79);
			WriteGMII16(0x06, 0xbff8);
			WriteGMII16(0x06, 0x22d8);
			WriteGMII16(0x06, 0x19d9);
			WriteGMII16(0x06, 0x5884);
			WriteGMII16(0x06, 0x9f09);
			WriteGMII16(0x06, 0xbf82);
			WriteGMII16(0x06, 0x6dd6);
			WriteGMII16(0x06, 0x8275);
			WriteGMII16(0x06, 0x0201);
			WriteGMII16(0x06, 0x4fef);
			WriteGMII16(0x06, 0x97ff);
			WriteGMII16(0x06, 0xfefc);
			WriteGMII16(0x06, 0x0517);
			WriteGMII16(0x06, 0xfffe);
			WriteGMII16(0x06, 0x0117);
			WriteGMII16(0x06, 0x0001);
			WriteGMII16(0x06, 0x0200);
			WriteGMII16(0x05, 0x83d8);
			WriteGMII16(0x06, 0x8000);
			WriteGMII16(0x05, 0x83d6);
			WriteGMII16(0x06, 0x824f);
			WriteGMII16(0x02, 0x2010);
			WriteGMII16(0x03, 0xdc00);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x0b, 0x0600);
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x00fc);
			WriteGMII16(0x1f, 0x0000);
		}
		
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x0D, 0xF880);
		WriteGMII16(0x1F, 0x0000);
	}
}

void RealtekR1000::RTL8168DPHwPhyConfig()
{
  	u32 gphy_val;
	if (mcfg == MCFG_8168DP_1)
	{
		RTL8168WriteOCP_GPHY(0x1F, 0x0002);
		RTL8168WriteOCP_GPHY(0x10, 0x0008);
		RTL8168WriteOCP_GPHY(0x0D, 0x006C);
		
		RTL8168WriteOCP_GPHY(0x1F, 0x0000);
		RTL8168WriteOCP_GPHY(0x0D, 0xF880);
		
		RTL8168WriteOCP_GPHY(0x1F, 0x0001);
		RTL8168WriteOCP_GPHY(0x17, 0x0CC0);
		
		RTL8168WriteOCP_GPHY(0x1F, 0x0001);
		RTL8168WriteOCP_GPHY(0x0B, 0xA4D8);
		RTL8168WriteOCP_GPHY(0x09, 0x281C);
		RTL8168WriteOCP_GPHY(0x07, 0x2883);
		RTL8168WriteOCP_GPHY(0x0A, 0x6B35);
		RTL8168WriteOCP_GPHY(0x1D, 0x3DA4);
		RTL8168WriteOCP_GPHY(0x1C, 0xEFFD);
		RTL8168WriteOCP_GPHY(0x14, 0x7F52);
		RTL8168WriteOCP_GPHY(0x18, 0x7FC6);
		RTL8168WriteOCP_GPHY(0x08, 0x0601);
		RTL8168WriteOCP_GPHY(0x06, 0x4063);
		RTL8168WriteOCP_GPHY(0x10, 0xF074);
		RTL8168WriteOCP_GPHY(0x1F, 0x0003);
		RTL8168WriteOCP_GPHY(0x13, 0x0789);
		RTL8168WriteOCP_GPHY(0x12, 0xF4BD);
		RTL8168WriteOCP_GPHY(0x1A, 0x04FD);
		RTL8168WriteOCP_GPHY(0x14, 0x84B0);
		RTL8168WriteOCP_GPHY(0x1F, 0x0000);
		RTL8168WriteOCP_GPHY(0x00, 0x9200);
		
		RTL8168WriteOCP_GPHY(0x1F, 0x0005);
		RTL8168WriteOCP_GPHY(0x01, 0x0340);
		RTL8168WriteOCP_GPHY(0x1F, 0x0001);
		RTL8168WriteOCP_GPHY(0x04, 0x4000);
		RTL8168WriteOCP_GPHY(0x03, 0x1D21);
		RTL8168WriteOCP_GPHY(0x02, 0x0C32);
		RTL8168WriteOCP_GPHY(0x01, 0x0200);
		RTL8168WriteOCP_GPHY(0x00, 0x5554);
		RTL8168WriteOCP_GPHY(0x04, 0x4800);
		RTL8168WriteOCP_GPHY(0x04, 0x4000);
		RTL8168WriteOCP_GPHY(0x04, 0xF000);
		RTL8168WriteOCP_GPHY(0x03, 0xDF01);
		RTL8168WriteOCP_GPHY(0x02, 0xDF20);
		RTL8168WriteOCP_GPHY(0x01, 0x101A);
		RTL8168WriteOCP_GPHY(0x00, 0xA0FF);
		RTL8168WriteOCP_GPHY(0x04, 0xF800);
		RTL8168WriteOCP_GPHY(0x04, 0xF000);
		RTL8168WriteOCP_GPHY(0x1F, 0x0000);
		
		RTL8168WriteOCP_GPHY(0x1F, 0x0007);
		RTL8168WriteOCP_GPHY(0x1E, 0x0023);
		RTL8168WriteOCP_GPHY(0x16, 0x0000);
		RTL8168WriteOCP_GPHY(0x1F, 0x0000);
	} else if (mcfg == MCFG_8168DP_2 || mcfg == MCFG_8168DP_3) {
		// TO DO:
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x17, 0x0CC0);
    
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x002D);
		WriteGMII16(0x18, 0x0040);
    
		WriteGMII16(0x1F, 0x0000);
		gphy_val = ReadGMII16(0x0D);
		gphy_val |= BIT_5;
		WriteGMII16(0x0D, gphy_val);
    
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x0C);
		gphy_val |= BIT_10;
		WriteGMII16(0x0C, gphy_val);    
  }
}

void RealtekR1000::RTL8168EHwPhyConfig()
{
  u16 gphy_val;
  if (mcfg == MCFG_8168E_1 || mcfg == MCFG_8168E_2) {
    
		WriteMMIO8(0xF3, ReadMMIO8(0xF3) | BIT_2);
    
		if (mcfg == MCFG_8168E_1) {
//			spin_lock_irqsave(&tp->phy_lock, flags);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x00, 0x1800);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			WriteGMII16(0x17, 0x0117);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1E, 0x002C);
			WriteGMII16(0x1B, 0x5000);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x16, 0x4104);
			for (int i = 0; i < 200; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x1E);
				gphy_val &= 0x03FF;
				if (gphy_val == 0x000C)
					break;
			}
			WriteGMII16(0x1f, 0x0005);
			for (int i = 0; i < 200; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x07);
				if ((gphy_val & BIT_5) == 0)
					break;
			}
			gphy_val = ReadGMII16(0x07);
			if (gphy_val & BIT_5) {
				WriteGMII16(0x1f, 0x0007);
				WriteGMII16(0x1e, 0x00a1);
				WriteGMII16(0x17, 0x1000);
				WriteGMII16(0x17, 0x0000);
				WriteGMII16(0x17, 0x2000);
				WriteGMII16(0x1e, 0x002f);
				WriteGMII16(0x18, 0x9bfb);
				WriteGMII16(0x1f, 0x0005);
				WriteGMII16(0x07, 0x0000);
				WriteGMII16(0x1f, 0x0000);
			}
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x0080);
			gphy_val = ReadGMII16(0x00);
			gphy_val &= ~(BIT_7);
			WriteGMII16(0x00, gphy_val);
			WriteGMII16(0x1f, 0x0002);
			gphy_val = ReadGMII16(0x08);
			gphy_val &= ~(BIT_7);
			WriteGMII16(0x08, gphy_val);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			WriteGMII16(0x16, 0x0306);
			WriteGMII16(0x16, 0x0307);
			WriteGMII16(0x15, 0x000e);
			WriteGMII16(0x19, 0x000a);
			WriteGMII16(0x15, 0x0010);
			WriteGMII16(0x19, 0x0008);
			WriteGMII16(0x15, 0x0018);
			WriteGMII16(0x19, 0x4801);
			WriteGMII16(0x15, 0x0019);
			WriteGMII16(0x19, 0x6801);
			WriteGMII16(0x15, 0x001a);
			WriteGMII16(0x19, 0x66a1);
			WriteGMII16(0x15, 0x001f);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0020);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0021);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0022);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0023);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0024);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0025);
			WriteGMII16(0x19, 0x64a1);
			WriteGMII16(0x15, 0x0026);
			WriteGMII16(0x19, 0x40ea);
			WriteGMII16(0x15, 0x0027);
			WriteGMII16(0x19, 0x4503);
			WriteGMII16(0x15, 0x0028);
			WriteGMII16(0x19, 0x9f00);
			WriteGMII16(0x15, 0x0029);
			WriteGMII16(0x19, 0xa631);
			WriteGMII16(0x15, 0x002a);
			WriteGMII16(0x19, 0x9717);
			WriteGMII16(0x15, 0x002b);
			WriteGMII16(0x19, 0x302c);
			WriteGMII16(0x15, 0x002c);
			WriteGMII16(0x19, 0x4802);
			WriteGMII16(0x15, 0x002d);
			WriteGMII16(0x19, 0x58da);
			WriteGMII16(0x15, 0x002e);
			WriteGMII16(0x19, 0x400d);
			WriteGMII16(0x15, 0x002f);
			WriteGMII16(0x19, 0x4488);
			WriteGMII16(0x15, 0x0030);
			WriteGMII16(0x19, 0x9e00);
			WriteGMII16(0x15, 0x0031);
			WriteGMII16(0x19, 0x63c8);
			WriteGMII16(0x15, 0x0032);
			WriteGMII16(0x19, 0x6481);
			WriteGMII16(0x15, 0x0033);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0034);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0035);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0036);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0037);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0038);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0039);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x003a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x003b);
			WriteGMII16(0x19, 0x63e8);
			WriteGMII16(0x15, 0x003c);
			WriteGMII16(0x19, 0x7d00);
			WriteGMII16(0x15, 0x003d);
			WriteGMII16(0x19, 0x59d4);
			WriteGMII16(0x15, 0x003e);
			WriteGMII16(0x19, 0x63f8);
			WriteGMII16(0x15, 0x0040);
			WriteGMII16(0x19, 0x64a1);
			WriteGMII16(0x15, 0x0041);
			WriteGMII16(0x19, 0x30de);
			WriteGMII16(0x15, 0x0044);
			WriteGMII16(0x19, 0x480f);
			WriteGMII16(0x15, 0x0045);
			WriteGMII16(0x19, 0x6800);
			WriteGMII16(0x15, 0x0046);
			WriteGMII16(0x19, 0x6680);
			WriteGMII16(0x15, 0x0047);
			WriteGMII16(0x19, 0x7c10);
			WriteGMII16(0x15, 0x0048);
			WriteGMII16(0x19, 0x63c8);
			WriteGMII16(0x15, 0x0049);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004b);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004c);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004d);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004e);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004f);
			WriteGMII16(0x19, 0x40ea);
			WriteGMII16(0x15, 0x0050);
			WriteGMII16(0x19, 0x4503);
			WriteGMII16(0x15, 0x0051);
			WriteGMII16(0x19, 0x58ca);
			WriteGMII16(0x15, 0x0052);
			WriteGMII16(0x19, 0x63c8);
			WriteGMII16(0x15, 0x0053);
			WriteGMII16(0x19, 0x63d8);
			WriteGMII16(0x15, 0x0054);
			WriteGMII16(0x19, 0x66a0);
			WriteGMII16(0x15, 0x0055);
			WriteGMII16(0x19, 0x9f00);
			WriteGMII16(0x15, 0x0056);
			WriteGMII16(0x19, 0x3000);
			WriteGMII16(0x15, 0x006E);
			WriteGMII16(0x19, 0x9afa);
			WriteGMII16(0x15, 0x00a1);
			WriteGMII16(0x19, 0x3044);
			WriteGMII16(0x15, 0x00ab);
			WriteGMII16(0x19, 0x5820);
			WriteGMII16(0x15, 0x00ac);
			WriteGMII16(0x19, 0x5e04);
			WriteGMII16(0x15, 0x00ad);
			WriteGMII16(0x19, 0xb60c);
			WriteGMII16(0x15, 0x00af);
			WriteGMII16(0x19, 0x000a);
			WriteGMII16(0x15, 0x00b2);
			WriteGMII16(0x19, 0x30b9);
			WriteGMII16(0x15, 0x00b9);
			WriteGMII16(0x19, 0x4408);
			WriteGMII16(0x15, 0x00ba);
			WriteGMII16(0x19, 0x480b);
			WriteGMII16(0x15, 0x00bb);
			WriteGMII16(0x19, 0x5e00);
			WriteGMII16(0x15, 0x00bc);
			WriteGMII16(0x19, 0x405f);
			WriteGMII16(0x15, 0x00bd);
			WriteGMII16(0x19, 0x4448);
			WriteGMII16(0x15, 0x00be);
			WriteGMII16(0x19, 0x4020);
			WriteGMII16(0x15, 0x00bf);
			WriteGMII16(0x19, 0x4468);
			WriteGMII16(0x15, 0x00c0);
			WriteGMII16(0x19, 0x9c02);
			WriteGMII16(0x15, 0x00c1);
			WriteGMII16(0x19, 0x58a0);
			WriteGMII16(0x15, 0x00c2);
			WriteGMII16(0x19, 0xb605);
			WriteGMII16(0x15, 0x00c3);
			WriteGMII16(0x19, 0xc0d3);
			WriteGMII16(0x15, 0x00c4);
			WriteGMII16(0x19, 0x00e6);
			WriteGMII16(0x15, 0x00c5);
			WriteGMII16(0x19, 0xdaec);
			WriteGMII16(0x15, 0x00c6);
			WriteGMII16(0x19, 0x00fa);
			WriteGMII16(0x15, 0x00c7);
			WriteGMII16(0x19, 0x9df9);
			WriteGMII16(0x15, 0x00c8);
			WriteGMII16(0x19, 0x307a);
			WriteGMII16(0x15, 0x0112);
			WriteGMII16(0x19, 0x6421);
			WriteGMII16(0x15, 0x0113);
			WriteGMII16(0x19, 0x7c08);
			WriteGMII16(0x15, 0x0114);
			WriteGMII16(0x19, 0x63f0);
			WriteGMII16(0x15, 0x0115);
			WriteGMII16(0x19, 0x4003);
			WriteGMII16(0x15, 0x0116);
			WriteGMII16(0x19, 0x4418);
			WriteGMII16(0x15, 0x0117);
			WriteGMII16(0x19, 0x9b00);
			WriteGMII16(0x15, 0x0118);
			WriteGMII16(0x19, 0x6461);
			WriteGMII16(0x15, 0x0119);
			WriteGMII16(0x19, 0x64e1);
			WriteGMII16(0x15, 0x011a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0150);
			WriteGMII16(0x19, 0x7c80);
			WriteGMII16(0x15, 0x0151);
			WriteGMII16(0x19, 0x6461);
			WriteGMII16(0x15, 0x0152);
			WriteGMII16(0x19, 0x4003);
			WriteGMII16(0x15, 0x0153);
			WriteGMII16(0x19, 0x4540);
			WriteGMII16(0x15, 0x0154);
			WriteGMII16(0x19, 0x9f00);
			WriteGMII16(0x15, 0x0155);
			WriteGMII16(0x19, 0x9d00);
			WriteGMII16(0x15, 0x0156);
			WriteGMII16(0x19, 0x7c40);
			WriteGMII16(0x15, 0x0157);
			WriteGMII16(0x19, 0x6421);
			WriteGMII16(0x15, 0x0158);
			WriteGMII16(0x19, 0x7c80);
			WriteGMII16(0x15, 0x0159);
			WriteGMII16(0x19, 0x64a1);
			WriteGMII16(0x15, 0x015a);
			WriteGMII16(0x19, 0x30fe);
			WriteGMII16(0x15, 0x021e);
			WriteGMII16(0x19, 0x5410);
			WriteGMII16(0x15, 0x0225);
			WriteGMII16(0x19, 0x5400);
			WriteGMII16(0x15, 0x023D);
			WriteGMII16(0x19, 0x4050);
			WriteGMII16(0x15, 0x0295);
			WriteGMII16(0x19, 0x6c08);
			WriteGMII16(0x15, 0x02bd);
			WriteGMII16(0x19, 0xa523);
			WriteGMII16(0x15, 0x02be);
			WriteGMII16(0x19, 0x32ca);
			WriteGMII16(0x15, 0x02ca);
			WriteGMII16(0x19, 0x48b3);
			WriteGMII16(0x15, 0x02cb);
			WriteGMII16(0x19, 0x4020);
			WriteGMII16(0x15, 0x02cc);
			WriteGMII16(0x19, 0x4823);
			WriteGMII16(0x15, 0x02cd);
			WriteGMII16(0x19, 0x4510);
			WriteGMII16(0x15, 0x02ce);
			WriteGMII16(0x19, 0xb63a);
			WriteGMII16(0x15, 0x02cf);
			WriteGMII16(0x19, 0x7dc8);
			WriteGMII16(0x15, 0x02d6);
			WriteGMII16(0x19, 0x9bf8);
			WriteGMII16(0x15, 0x02d8);
			WriteGMII16(0x19, 0x85f6);
			WriteGMII16(0x15, 0x02d9);
			WriteGMII16(0x19, 0x32e0);
			WriteGMII16(0x15, 0x02e0);
			WriteGMII16(0x19, 0x4834);
			WriteGMII16(0x15, 0x02e1);
			WriteGMII16(0x19, 0x6c08);
			WriteGMII16(0x15, 0x02e2);
			WriteGMII16(0x19, 0x4020);
			WriteGMII16(0x15, 0x02e3);
			WriteGMII16(0x19, 0x4824);
			WriteGMII16(0x15, 0x02e4);
			WriteGMII16(0x19, 0x4520);
			WriteGMII16(0x15, 0x02e5);
			WriteGMII16(0x19, 0x4008);
			WriteGMII16(0x15, 0x02e6);
			WriteGMII16(0x19, 0x4560);
			WriteGMII16(0x15, 0x02e7);
			WriteGMII16(0x19, 0x9d04);
			WriteGMII16(0x15, 0x02e8);
			WriteGMII16(0x19, 0x48c4);
			WriteGMII16(0x15, 0x02e9);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x02ea);
			WriteGMII16(0x19, 0x4844);
			WriteGMII16(0x15, 0x02eb);
			WriteGMII16(0x19, 0x7dc8);
			WriteGMII16(0x15, 0x02f0);
			WriteGMII16(0x19, 0x9cf7);
			WriteGMII16(0x15, 0x02f1);
			WriteGMII16(0x19, 0xdf94);
			WriteGMII16(0x15, 0x02f2);
			WriteGMII16(0x19, 0x0002);
			WriteGMII16(0x15, 0x02f3);
			WriteGMII16(0x19, 0x6810);
			WriteGMII16(0x15, 0x02f4);
			WriteGMII16(0x19, 0xb614);
			WriteGMII16(0x15, 0x02f5);
			WriteGMII16(0x19, 0xc42b);
			WriteGMII16(0x15, 0x02f6);
			WriteGMII16(0x19, 0x00d4);
			WriteGMII16(0x15, 0x02f7);
			WriteGMII16(0x19, 0xc455);
			WriteGMII16(0x15, 0x02f8);
			WriteGMII16(0x19, 0x0093);
			WriteGMII16(0x15, 0x02f9);
			WriteGMII16(0x19, 0x92ee);
			WriteGMII16(0x15, 0x02fa);
			WriteGMII16(0x19, 0xefed);
			WriteGMII16(0x15, 0x02fb);
			WriteGMII16(0x19, 0x3312);
			WriteGMII16(0x15, 0x0312);
			WriteGMII16(0x19, 0x49b5);
			WriteGMII16(0x15, 0x0313);
			WriteGMII16(0x19, 0x7d00);
			WriteGMII16(0x15, 0x0314);
			WriteGMII16(0x19, 0x4d00);
			WriteGMII16(0x15, 0x0315);
			WriteGMII16(0x19, 0x6810);
			WriteGMII16(0x15, 0x031e);
			WriteGMII16(0x19, 0x404f);
			WriteGMII16(0x15, 0x031f);
			WriteGMII16(0x19, 0x44c8);
			WriteGMII16(0x15, 0x0320);
			WriteGMII16(0x19, 0xd64f);
			WriteGMII16(0x15, 0x0321);
			WriteGMII16(0x19, 0x00e7);
			WriteGMII16(0x15, 0x0322);
			WriteGMII16(0x19, 0x7c08);
			WriteGMII16(0x15, 0x0323);
			WriteGMII16(0x19, 0x8203);
			WriteGMII16(0x15, 0x0324);
			WriteGMII16(0x19, 0x4d48);
			WriteGMII16(0x15, 0x0325);
			WriteGMII16(0x19, 0x3327);
			WriteGMII16(0x15, 0x0326);
			WriteGMII16(0x19, 0x4d40);
			WriteGMII16(0x15, 0x0327);
			WriteGMII16(0x19, 0xc8d7);
			WriteGMII16(0x15, 0x0328);
			WriteGMII16(0x19, 0x0003);
			WriteGMII16(0x15, 0x0329);
			WriteGMII16(0x19, 0x7c20);
			WriteGMII16(0x15, 0x032a);
			WriteGMII16(0x19, 0x4c20);
			WriteGMII16(0x15, 0x032b);
			WriteGMII16(0x19, 0xc8ed);
			WriteGMII16(0x15, 0x032c);
			WriteGMII16(0x19, 0x00f4);
			WriteGMII16(0x15, 0x032d);
			WriteGMII16(0x19, 0x82b3);
			WriteGMII16(0x15, 0x032e);
			WriteGMII16(0x19, 0xd11d);
			WriteGMII16(0x15, 0x032f);
			WriteGMII16(0x19, 0x00b1);
			WriteGMII16(0x15, 0x0330);
			WriteGMII16(0x19, 0xde18);
			WriteGMII16(0x15, 0x0331);
			WriteGMII16(0x19, 0x0008);
			WriteGMII16(0x15, 0x0332);
			WriteGMII16(0x19, 0x91ee);
			WriteGMII16(0x15, 0x0333);
			WriteGMII16(0x19, 0x3339);
			WriteGMII16(0x15, 0x033a);
			WriteGMII16(0x19, 0x4064);
			WriteGMII16(0x15, 0x0340);
			WriteGMII16(0x19, 0x9e06);
			WriteGMII16(0x15, 0x0341);
			WriteGMII16(0x19, 0x7c08);
			WriteGMII16(0x15, 0x0342);
			WriteGMII16(0x19, 0x8203);
			WriteGMII16(0x15, 0x0343);
			WriteGMII16(0x19, 0x4d48);
			WriteGMII16(0x15, 0x0344);
			WriteGMII16(0x19, 0x3346);
			WriteGMII16(0x15, 0x0345);
			WriteGMII16(0x19, 0x4d40);
			WriteGMII16(0x15, 0x0346);
			WriteGMII16(0x19, 0xd11d);
			WriteGMII16(0x15, 0x0347);
			WriteGMII16(0x19, 0x0099);
			WriteGMII16(0x15, 0x0348);
			WriteGMII16(0x19, 0xbb17);
			WriteGMII16(0x15, 0x0349);
			WriteGMII16(0x19, 0x8102);
			WriteGMII16(0x15, 0x034a);
			WriteGMII16(0x19, 0x334d);
			WriteGMII16(0x15, 0x034b);
			WriteGMII16(0x19, 0xa22c);
			WriteGMII16(0x15, 0x034c);
			WriteGMII16(0x19, 0x3397);
			WriteGMII16(0x15, 0x034d);
			WriteGMII16(0x19, 0x91f2);
			WriteGMII16(0x15, 0x034e);
			WriteGMII16(0x19, 0xc218);
			WriteGMII16(0x15, 0x034f);
			WriteGMII16(0x19, 0x00f0);
			WriteGMII16(0x15, 0x0350);
			WriteGMII16(0x19, 0x3397);
			WriteGMII16(0x15, 0x0351);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0364);
			WriteGMII16(0x19, 0xbc05);
			WriteGMII16(0x15, 0x0367);
			WriteGMII16(0x19, 0xa1fc);
			WriteGMII16(0x15, 0x0368);
			WriteGMII16(0x19, 0x3377);
			WriteGMII16(0x15, 0x0369);
			WriteGMII16(0x19, 0x328b);
			WriteGMII16(0x15, 0x036a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0377);
			WriteGMII16(0x19, 0x4b97);
			WriteGMII16(0x15, 0x0378);
			WriteGMII16(0x19, 0x6818);
			WriteGMII16(0x15, 0x0379);
			WriteGMII16(0x19, 0x4b07);
			WriteGMII16(0x15, 0x037a);
			WriteGMII16(0x19, 0x40ac);
			WriteGMII16(0x15, 0x037b);
			WriteGMII16(0x19, 0x4445);
			WriteGMII16(0x15, 0x037c);
			WriteGMII16(0x19, 0x404e);
			WriteGMII16(0x15, 0x037d);
			WriteGMII16(0x19, 0x4461);
			WriteGMII16(0x15, 0x037e);
			WriteGMII16(0x19, 0x9c09);
			WriteGMII16(0x15, 0x037f);
			WriteGMII16(0x19, 0x63da);
			WriteGMII16(0x15, 0x0380);
			WriteGMII16(0x19, 0x5440);
			WriteGMII16(0x15, 0x0381);
			WriteGMII16(0x19, 0x4b98);
			WriteGMII16(0x15, 0x0382);
			WriteGMII16(0x19, 0x7c60);
			WriteGMII16(0x15, 0x0383);
			WriteGMII16(0x19, 0x4c00);
			WriteGMII16(0x15, 0x0384);
			WriteGMII16(0x19, 0x4b08);
			WriteGMII16(0x15, 0x0385);
			WriteGMII16(0x19, 0x63d8);
			WriteGMII16(0x15, 0x0386);
			WriteGMII16(0x19, 0x338d);
			WriteGMII16(0x15, 0x0387);
			WriteGMII16(0x19, 0xd64f);
			WriteGMII16(0x15, 0x0388);
			WriteGMII16(0x19, 0x0080);
			WriteGMII16(0x15, 0x0389);
			WriteGMII16(0x19, 0x820c);
			WriteGMII16(0x15, 0x038a);
			WriteGMII16(0x19, 0xa10b);
			WriteGMII16(0x15, 0x038b);
			WriteGMII16(0x19, 0x9df3);
			WriteGMII16(0x15, 0x038c);
			WriteGMII16(0x19, 0x3395);
			WriteGMII16(0x15, 0x038d);
			WriteGMII16(0x19, 0xd64f);
			WriteGMII16(0x15, 0x038e);
			WriteGMII16(0x19, 0x00f9);
			WriteGMII16(0x15, 0x038f);
			WriteGMII16(0x19, 0xc017);
			WriteGMII16(0x15, 0x0390);
			WriteGMII16(0x19, 0x0005);
			WriteGMII16(0x15, 0x0391);
			WriteGMII16(0x19, 0x6c0b);
			WriteGMII16(0x15, 0x0392);
			WriteGMII16(0x19, 0xa103);
			WriteGMII16(0x15, 0x0393);
			WriteGMII16(0x19, 0x6c08);
			WriteGMII16(0x15, 0x0394);
			WriteGMII16(0x19, 0x9df9);
			WriteGMII16(0x15, 0x0395);
			WriteGMII16(0x19, 0x6c08);
			WriteGMII16(0x15, 0x0396);
			WriteGMII16(0x19, 0x3397);
			WriteGMII16(0x15, 0x0399);
			WriteGMII16(0x19, 0x6810);
			WriteGMII16(0x15, 0x03a4);
			WriteGMII16(0x19, 0x7c08);
			WriteGMII16(0x15, 0x03a5);
			WriteGMII16(0x19, 0x8203);
			WriteGMII16(0x15, 0x03a6);
			WriteGMII16(0x19, 0x4d08);
			WriteGMII16(0x15, 0x03a7);
			WriteGMII16(0x19, 0x33a9);
			WriteGMII16(0x15, 0x03a8);
			WriteGMII16(0x19, 0x4d00);
			WriteGMII16(0x15, 0x03a9);
			WriteGMII16(0x19, 0x9bfa);
			WriteGMII16(0x15, 0x03aa);
			WriteGMII16(0x19, 0x33b6);
			WriteGMII16(0x15, 0x03bb);
			WriteGMII16(0x19, 0x4056);
			WriteGMII16(0x15, 0x03bc);
			WriteGMII16(0x19, 0x44e9);
			WriteGMII16(0x15, 0x03bd);
			WriteGMII16(0x19, 0x405e);
			WriteGMII16(0x15, 0x03be);
			WriteGMII16(0x19, 0x44f8);
			WriteGMII16(0x15, 0x03bf);
			WriteGMII16(0x19, 0xd64f);
			WriteGMII16(0x15, 0x03c0);
			WriteGMII16(0x19, 0x0037);
			WriteGMII16(0x15, 0x03c1);
			WriteGMII16(0x19, 0xbd37);
			WriteGMII16(0x15, 0x03c2);
			WriteGMII16(0x19, 0x9cfd);
			WriteGMII16(0x15, 0x03c3);
			WriteGMII16(0x19, 0xc639);
			WriteGMII16(0x15, 0x03c4);
			WriteGMII16(0x19, 0x0011);
			WriteGMII16(0x15, 0x03c5);
			WriteGMII16(0x19, 0x9b03);
			WriteGMII16(0x15, 0x03c6);
			WriteGMII16(0x19, 0x7c01);
			WriteGMII16(0x15, 0x03c7);
			WriteGMII16(0x19, 0x4c01);
			WriteGMII16(0x15, 0x03c8);
			WriteGMII16(0x19, 0x9e03);
			WriteGMII16(0x15, 0x03c9);
			WriteGMII16(0x19, 0x7c20);
			WriteGMII16(0x15, 0x03ca);
			WriteGMII16(0x19, 0x4c20);
			WriteGMII16(0x15, 0x03cb);
			WriteGMII16(0x19, 0x9af4);
			WriteGMII16(0x15, 0x03cc);
			WriteGMII16(0x19, 0x7c12);
			WriteGMII16(0x15, 0x03cd);
			WriteGMII16(0x19, 0x4c52);
			WriteGMII16(0x15, 0x03ce);
			WriteGMII16(0x19, 0x4470);
			WriteGMII16(0x15, 0x03cf);
			WriteGMII16(0x19, 0x7c12);
			WriteGMII16(0x15, 0x03d0);
			WriteGMII16(0x19, 0x4c40);
			WriteGMII16(0x15, 0x03d1);
			WriteGMII16(0x19, 0x33bf);
			WriteGMII16(0x15, 0x03d6);
			WriteGMII16(0x19, 0x4047);
			WriteGMII16(0x15, 0x03d7);
			WriteGMII16(0x19, 0x4469);
			WriteGMII16(0x15, 0x03d8);
			WriteGMII16(0x19, 0x492b);
			WriteGMII16(0x15, 0x03d9);
			WriteGMII16(0x19, 0x4479);
			WriteGMII16(0x15, 0x03da);
			WriteGMII16(0x19, 0x7c09);
			WriteGMII16(0x15, 0x03db);
			WriteGMII16(0x19, 0x8203);
			WriteGMII16(0x15, 0x03dc);
			WriteGMII16(0x19, 0x4d48);
			WriteGMII16(0x15, 0x03dd);
			WriteGMII16(0x19, 0x33df);
			WriteGMII16(0x15, 0x03de);
			WriteGMII16(0x19, 0x4d40);
			WriteGMII16(0x15, 0x03df);
			WriteGMII16(0x19, 0xd64f);
			WriteGMII16(0x15, 0x03e0);
			WriteGMII16(0x19, 0x0017);
			WriteGMII16(0x15, 0x03e1);
			WriteGMII16(0x19, 0xbd17);
			WriteGMII16(0x15, 0x03e2);
			WriteGMII16(0x19, 0x9b03);
			WriteGMII16(0x15, 0x03e3);
			WriteGMII16(0x19, 0x7c20);
			WriteGMII16(0x15, 0x03e4);
			WriteGMII16(0x19, 0x4c20);
			WriteGMII16(0x15, 0x03e5);
			WriteGMII16(0x19, 0x88f5);
			WriteGMII16(0x15, 0x03e6);
			WriteGMII16(0x19, 0xc428);
			WriteGMII16(0x15, 0x03e7);
			WriteGMII16(0x19, 0x0008);
			WriteGMII16(0x15, 0x03e8);
			WriteGMII16(0x19, 0x9af2);
			WriteGMII16(0x15, 0x03e9);
			WriteGMII16(0x19, 0x7c12);
			WriteGMII16(0x15, 0x03ea);
			WriteGMII16(0x19, 0x4c52);
			WriteGMII16(0x15, 0x03eb);
			WriteGMII16(0x19, 0x4470);
			WriteGMII16(0x15, 0x03ec);
			WriteGMII16(0x19, 0x7c12);
			WriteGMII16(0x15, 0x03ed);
			WriteGMII16(0x19, 0x4c40);
			WriteGMII16(0x15, 0x03ee);
			WriteGMII16(0x19, 0x33da);
			WriteGMII16(0x15, 0x03ef);
			WriteGMII16(0x19, 0x3312);
			WriteGMII16(0x16, 0x0306);
			WriteGMII16(0x16, 0x0300);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x17, 0x2179);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0040);
			WriteGMII16(0x18, 0x0645);
			WriteGMII16(0x19, 0xe200);
			WriteGMII16(0x18, 0x0655);
			WriteGMII16(0x19, 0x9000);
			WriteGMII16(0x18, 0x0d05);
			WriteGMII16(0x19, 0xbe00);
			WriteGMII16(0x18, 0x0d15);
			WriteGMII16(0x19, 0xd300);
			WriteGMII16(0x18, 0x0d25);
			WriteGMII16(0x19, 0xfe00);
			WriteGMII16(0x18, 0x0d35);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x0d45);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x0d55);
			WriteGMII16(0x19, 0x1000);
			WriteGMII16(0x18, 0x0d65);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x0d75);
			WriteGMII16(0x19, 0x8200);
			WriteGMII16(0x18, 0x0d85);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x0d95);
			WriteGMII16(0x19, 0x7000);
			WriteGMII16(0x18, 0x0da5);
			WriteGMII16(0x19, 0x0f00);
			WriteGMII16(0x18, 0x0db5);
			WriteGMII16(0x19, 0x0100);
			WriteGMII16(0x18, 0x0dc5);
			WriteGMII16(0x19, 0x9b00);
			WriteGMII16(0x18, 0x0dd5);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x0de5);
			WriteGMII16(0x19, 0xe000);
			WriteGMII16(0x18, 0x0df5);
			WriteGMII16(0x19, 0xef00);
			WriteGMII16(0x18, 0x16d5);
			WriteGMII16(0x19, 0xe200);
			WriteGMII16(0x18, 0x16e5);
			WriteGMII16(0x19, 0xab00);
			WriteGMII16(0x18, 0x2904);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x2914);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x2924);
			WriteGMII16(0x19, 0x0100);
			WriteGMII16(0x18, 0x2934);
			WriteGMII16(0x19, 0x2000);
			WriteGMII16(0x18, 0x2944);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2954);
			WriteGMII16(0x19, 0x4600);
			WriteGMII16(0x18, 0x2964);
			WriteGMII16(0x19, 0xfc00);
			WriteGMII16(0x18, 0x2974);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2984);
			WriteGMII16(0x19, 0x5000);
			WriteGMII16(0x18, 0x2994);
			WriteGMII16(0x19, 0x9d00);
			WriteGMII16(0x18, 0x29a4);
			WriteGMII16(0x19, 0xff00);
			WriteGMII16(0x18, 0x29b4);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x29c4);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x29d4);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x29e4);
			WriteGMII16(0x19, 0x2000);
			WriteGMII16(0x18, 0x29f4);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2a04);
			WriteGMII16(0x19, 0xe600);
			WriteGMII16(0x18, 0x2a14);
			WriteGMII16(0x19, 0xff00);
			WriteGMII16(0x18, 0x2a24);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2a34);
			WriteGMII16(0x19, 0x5000);
			WriteGMII16(0x18, 0x2a44);
			WriteGMII16(0x19, 0x8500);
			WriteGMII16(0x18, 0x2a54);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x2a64);
			WriteGMII16(0x19, 0xac00);
			WriteGMII16(0x18, 0x2a74);
			WriteGMII16(0x19, 0x0800);
			WriteGMII16(0x18, 0x2a84);
			WriteGMII16(0x19, 0xfc00);
			WriteGMII16(0x18, 0x2a94);
			WriteGMII16(0x19, 0xe000);
			WriteGMII16(0x18, 0x2aa4);
			WriteGMII16(0x19, 0x7400);
			WriteGMII16(0x18, 0x2ab4);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x2ac4);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x2ad4);
			WriteGMII16(0x19, 0x0100);
			WriteGMII16(0x18, 0x2ae4);
			WriteGMII16(0x19, 0xff00);
			WriteGMII16(0x18, 0x2af4);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2b04);
			WriteGMII16(0x19, 0x4400);
			WriteGMII16(0x18, 0x2b14);
			WriteGMII16(0x19, 0xfc00);
			WriteGMII16(0x18, 0x2b24);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2b34);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x2b44);
			WriteGMII16(0x19, 0x9d00);
			WriteGMII16(0x18, 0x2b54);
			WriteGMII16(0x19, 0xff00);
			WriteGMII16(0x18, 0x2b64);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x2b74);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x2b84);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2b94);
			WriteGMII16(0x19, 0xff00);
			WriteGMII16(0x18, 0x2ba4);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2bb4);
			WriteGMII16(0x19, 0xfc00);
			WriteGMII16(0x18, 0x2bc4);
			WriteGMII16(0x19, 0xff00);
			WriteGMII16(0x18, 0x2bd4);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2be4);
			WriteGMII16(0x19, 0x4000);
			WriteGMII16(0x18, 0x2bf4);
			WriteGMII16(0x19, 0x8900);
			WriteGMII16(0x18, 0x2c04);
			WriteGMII16(0x19, 0x8300);
			WriteGMII16(0x18, 0x2c14);
			WriteGMII16(0x19, 0xe000);
			WriteGMII16(0x18, 0x2c24);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x18, 0x2c34);
			WriteGMII16(0x19, 0xac00);
			WriteGMII16(0x18, 0x2c44);
			WriteGMII16(0x19, 0x0800);
			WriteGMII16(0x18, 0x2c54);
			WriteGMII16(0x19, 0xfa00);
			WriteGMII16(0x18, 0x2c64);
			WriteGMII16(0x19, 0xe100);
			WriteGMII16(0x18, 0x2c74);
			WriteGMII16(0x19, 0x7f00);
			WriteGMII16(0x18, 0x0001);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x17, 0x2100);
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x0080);
			WriteGMII16(0x05, 0x8b88);
			WriteGMII16(0x06, 0x0000);
			WriteGMII16(0x06, 0x0000);
			WriteGMII16(0x06, 0x0000);
			WriteGMII16(0x06, 0x0000);
			WriteGMII16(0x05, 0x8000);
			WriteGMII16(0x06, 0xd480);
			WriteGMII16(0x06, 0xc1e4);
			WriteGMII16(0x06, 0x8b9a);
			WriteGMII16(0x06, 0xe58b);
			WriteGMII16(0x06, 0x9bee);
			WriteGMII16(0x06, 0x8b83);
			WriteGMII16(0x06, 0x41bf);
			WriteGMII16(0x06, 0x8b88);
			WriteGMII16(0x06, 0xec00);
			WriteGMII16(0x06, 0x19a9);
			WriteGMII16(0x06, 0x8b90);
			WriteGMII16(0x06, 0xf9ee);
			WriteGMII16(0x06, 0xfff6);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0xfff7);
			WriteGMII16(0x06, 0xffe0);
			WriteGMII16(0x06, 0xe140);
			WriteGMII16(0x06, 0xe1e1);
			WriteGMII16(0x06, 0x41f7);
			WriteGMII16(0x06, 0x2ff6);
			WriteGMII16(0x06, 0x28e4);
			WriteGMII16(0x06, 0xe140);
			WriteGMII16(0x06, 0xe5e1);
			WriteGMII16(0x06, 0x41f7);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x020c);
			WriteGMII16(0x06, 0x0202);
			WriteGMII16(0x06, 0x1d02);
			WriteGMII16(0x06, 0x0230);
			WriteGMII16(0x06, 0x0202);
			WriteGMII16(0x06, 0x4002);
			WriteGMII16(0x06, 0x028b);
			WriteGMII16(0x06, 0x0280);
			WriteGMII16(0x06, 0x6c02);
			WriteGMII16(0x06, 0x8085);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x88e1);
			WriteGMII16(0x06, 0x8b89);
			WriteGMII16(0x06, 0x1e01);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x8a1e);
			WriteGMII16(0x06, 0x01e1);
			WriteGMII16(0x06, 0x8b8b);
			WriteGMII16(0x06, 0x1e01);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x8c1e);
			WriteGMII16(0x06, 0x01e1);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0x1e01);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x8e1e);
			WriteGMII16(0x06, 0x01a0);
			WriteGMII16(0x06, 0x00c7);
			WriteGMII16(0x06, 0xaec3);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0xad20);
			WriteGMII16(0x06, 0x10ee);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x1310);
			WriteGMII16(0x06, 0x021f);
			WriteGMII16(0x06, 0x9d02);
			WriteGMII16(0x06, 0x1f0c);
			WriteGMII16(0x06, 0x0227);
			WriteGMII16(0x06, 0x49fc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x8ead);
			WriteGMII16(0x06, 0x200b);
			WriteGMII16(0x06, 0xf620);
			WriteGMII16(0x06, 0xe48b);
			WriteGMII16(0x06, 0x8e02);
			WriteGMII16(0x06, 0x830e);
			WriteGMII16(0x06, 0x021b);
			WriteGMII16(0x06, 0x67ad);
			WriteGMII16(0x06, 0x2211);
			WriteGMII16(0x06, 0xf622);
			WriteGMII16(0x06, 0xe48b);
			WriteGMII16(0x06, 0x8e02);
			WriteGMII16(0x06, 0x2ba5);
			WriteGMII16(0x06, 0x022a);
			WriteGMII16(0x06, 0x2402);
			WriteGMII16(0x06, 0x80c6);
			WriteGMII16(0x06, 0x022a);
			WriteGMII16(0x06, 0xf0ad);
			WriteGMII16(0x06, 0x2511);
			WriteGMII16(0x06, 0xf625);
			WriteGMII16(0x06, 0xe48b);
			WriteGMII16(0x06, 0x8e02);
			WriteGMII16(0x06, 0x8226);
			WriteGMII16(0x06, 0x0204);
			WriteGMII16(0x06, 0x0302);
			WriteGMII16(0x06, 0x19cc);
			WriteGMII16(0x06, 0x022b);
			WriteGMII16(0x06, 0x5bfc);
			WriteGMII16(0x06, 0x04ee);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0x0105);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0x8b83);
			WriteGMII16(0x06, 0xad24);
			WriteGMII16(0x06, 0x44e0);
			WriteGMII16(0x06, 0xe022);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x23ad);
			WriteGMII16(0x06, 0x223b);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xbea0);
			WriteGMII16(0x06, 0x0005);
			WriteGMII16(0x06, 0x0228);
			WriteGMII16(0x06, 0xdeae);
			WriteGMII16(0x06, 0x42a0);
			WriteGMII16(0x06, 0x0105);
			WriteGMII16(0x06, 0x0228);
			WriteGMII16(0x06, 0xf1ae);
			WriteGMII16(0x06, 0x3aa0);
			WriteGMII16(0x06, 0x0205);
			WriteGMII16(0x06, 0x0281);
			WriteGMII16(0x06, 0x25ae);
			WriteGMII16(0x06, 0x32a0);
			WriteGMII16(0x06, 0x0305);
			WriteGMII16(0x06, 0x0229);
			WriteGMII16(0x06, 0x9aae);
			WriteGMII16(0x06, 0x2aa0);
			WriteGMII16(0x06, 0x0405);
			WriteGMII16(0x06, 0x0229);
			WriteGMII16(0x06, 0xaeae);
			WriteGMII16(0x06, 0x22a0);
			WriteGMII16(0x06, 0x0505);
			WriteGMII16(0x06, 0x0229);
			WriteGMII16(0x06, 0xd7ae);
			WriteGMII16(0x06, 0x1aa0);
			WriteGMII16(0x06, 0x0605);
			WriteGMII16(0x06, 0x0229);
			WriteGMII16(0x06, 0xfeae);
			WriteGMII16(0x06, 0x12ee);
			WriteGMII16(0x06, 0x8ac0);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8ac1);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8ac6);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8abe);
			WriteGMII16(0x06, 0x00ae);
			WriteGMII16(0x06, 0x00fc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0x022a);
			WriteGMII16(0x06, 0x67e0);
			WriteGMII16(0x06, 0xe022);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x230d);
			WriteGMII16(0x06, 0x0658);
			WriteGMII16(0x06, 0x03a0);
			WriteGMII16(0x06, 0x0202);
			WriteGMII16(0x06, 0xae2d);
			WriteGMII16(0x06, 0xa001);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x2da0);
			WriteGMII16(0x06, 0x004d);
			WriteGMII16(0x06, 0xe0e2);
			WriteGMII16(0x06, 0x00e1);
			WriteGMII16(0x06, 0xe201);
			WriteGMII16(0x06, 0xad24);
			WriteGMII16(0x06, 0x44e0);
			WriteGMII16(0x06, 0x8ac2);
			WriteGMII16(0x06, 0xe48a);
			WriteGMII16(0x06, 0xc4e0);
			WriteGMII16(0x06, 0x8ac3);
			WriteGMII16(0x06, 0xe48a);
			WriteGMII16(0x06, 0xc5ee);
			WriteGMII16(0x06, 0x8abe);
			WriteGMII16(0x06, 0x03e0);
			WriteGMII16(0x06, 0x8b83);
			WriteGMII16(0x06, 0xad25);
			WriteGMII16(0x06, 0x3aee);
			WriteGMII16(0x06, 0x8abe);
			WriteGMII16(0x06, 0x05ae);
			WriteGMII16(0x06, 0x34e0);
			WriteGMII16(0x06, 0x8ace);
			WriteGMII16(0x06, 0xae03);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xcfe1);
			WriteGMII16(0x06, 0x8ac2);
			WriteGMII16(0x06, 0x4905);
			WriteGMII16(0x06, 0xe58a);
			WriteGMII16(0x06, 0xc4e1);
			WriteGMII16(0x06, 0x8ac3);
			WriteGMII16(0x06, 0x4905);
			WriteGMII16(0x06, 0xe58a);
			WriteGMII16(0x06, 0xc5ee);
			WriteGMII16(0x06, 0x8abe);
			WriteGMII16(0x06, 0x0502);
			WriteGMII16(0x06, 0x2ab6);
			WriteGMII16(0x06, 0xac20);
			WriteGMII16(0x06, 0x1202);
			WriteGMII16(0x06, 0x819b);
			WriteGMII16(0x06, 0xac20);
			WriteGMII16(0x06, 0x0cee);
			WriteGMII16(0x06, 0x8ac1);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8ac6);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8abe);
			WriteGMII16(0x06, 0x02fc);
			WriteGMII16(0x06, 0x04d0);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x81ad);
			WriteGMII16(0x06, 0x590f);
			WriteGMII16(0x06, 0x3902);
			WriteGMII16(0x06, 0xaa04);
			WriteGMII16(0x06, 0xd001);
			WriteGMII16(0x06, 0xae02);
			WriteGMII16(0x06, 0xd000);
			WriteGMII16(0x06, 0x04f9);
			WriteGMII16(0x06, 0xfae2);
			WriteGMII16(0x06, 0xe2d2);
			WriteGMII16(0x06, 0xe3e2);
			WriteGMII16(0x06, 0xd3f9);
			WriteGMII16(0x06, 0x5af7);
			WriteGMII16(0x06, 0xe6e2);
			WriteGMII16(0x06, 0xd2e7);
			WriteGMII16(0x06, 0xe2d3);
			WriteGMII16(0x06, 0xe2e0);
			WriteGMII16(0x06, 0x2ce3);
			WriteGMII16(0x06, 0xe02d);
			WriteGMII16(0x06, 0xf95b);
			WriteGMII16(0x06, 0xe01e);
			WriteGMII16(0x06, 0x30e6);
			WriteGMII16(0x06, 0xe02c);
			WriteGMII16(0x06, 0xe7e0);
			WriteGMII16(0x06, 0x2de2);
			WriteGMII16(0x06, 0xe2cc);
			WriteGMII16(0x06, 0xe3e2);
			WriteGMII16(0x06, 0xcdf9);
			WriteGMII16(0x06, 0x5a0f);
			WriteGMII16(0x06, 0x6a50);
			WriteGMII16(0x06, 0xe6e2);
			WriteGMII16(0x06, 0xcce7);
			WriteGMII16(0x06, 0xe2cd);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x3ce1);
			WriteGMII16(0x06, 0xe03d);
			WriteGMII16(0x06, 0xef64);
			WriteGMII16(0x06, 0xfde0);
			WriteGMII16(0x06, 0xe2cc);
			WriteGMII16(0x06, 0xe1e2);
			WriteGMII16(0x06, 0xcd58);
			WriteGMII16(0x06, 0x0f5a);
			WriteGMII16(0x06, 0xf01e);
			WriteGMII16(0x06, 0x02e4);
			WriteGMII16(0x06, 0xe2cc);
			WriteGMII16(0x06, 0xe5e2);
			WriteGMII16(0x06, 0xcdfd);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x2ce1);
			WriteGMII16(0x06, 0xe02d);
			WriteGMII16(0x06, 0x59e0);
			WriteGMII16(0x06, 0x5b1f);
			WriteGMII16(0x06, 0x1e13);
			WriteGMII16(0x06, 0xe4e0);
			WriteGMII16(0x06, 0x2ce5);
			WriteGMII16(0x06, 0xe02d);
			WriteGMII16(0x06, 0xfde0);
			WriteGMII16(0x06, 0xe2d2);
			WriteGMII16(0x06, 0xe1e2);
			WriteGMII16(0x06, 0xd358);
			WriteGMII16(0x06, 0xf75a);
			WriteGMII16(0x06, 0x081e);
			WriteGMII16(0x06, 0x02e4);
			WriteGMII16(0x06, 0xe2d2);
			WriteGMII16(0x06, 0xe5e2);
			WriteGMII16(0x06, 0xd3ef);
			WriteGMII16(0x06, 0x46fe);
			WriteGMII16(0x06, 0xfd04);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfaef);
			WriteGMII16(0x06, 0x69e0);
			WriteGMII16(0x06, 0xe022);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x2358);
			WriteGMII16(0x06, 0xc4e1);
			WriteGMII16(0x06, 0x8b6e);
			WriteGMII16(0x06, 0x1f10);
			WriteGMII16(0x06, 0x9e58);
			WriteGMII16(0x06, 0xe48b);
			WriteGMII16(0x06, 0x6ead);
			WriteGMII16(0x06, 0x2222);
			WriteGMII16(0x06, 0xac27);
			WriteGMII16(0x06, 0x55ac);
			WriteGMII16(0x06, 0x2602);
			WriteGMII16(0x06, 0xae1a);
			WriteGMII16(0x06, 0xd106);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xba02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd107);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xbd02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd107);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xc002);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xae30);
			WriteGMII16(0x06, 0xd103);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xc302);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd100);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xc602);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd100);
			WriteGMII16(0x06, 0xbf82);
			WriteGMII16(0x06, 0xca02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd10f);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xba02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xbd02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xc002);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xef96);
			WriteGMII16(0x06, 0xfefd);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xd100);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xc302);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd011);
			WriteGMII16(0x06, 0x022b);
			WriteGMII16(0x06, 0xfb59);
			WriteGMII16(0x06, 0x03ef);
			WriteGMII16(0x06, 0x01d1);
			WriteGMII16(0x06, 0x00a0);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0xc602);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xd111);
			WriteGMII16(0x06, 0xad20);
			WriteGMII16(0x06, 0x020c);
			WriteGMII16(0x06, 0x11ad);
			WriteGMII16(0x06, 0x2102);
			WriteGMII16(0x06, 0x0c12);
			WriteGMII16(0x06, 0xbf82);
			WriteGMII16(0x06, 0xca02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xaec8);
			WriteGMII16(0x06, 0x70e4);
			WriteGMII16(0x06, 0x2602);
			WriteGMII16(0x06, 0x82d1);
			WriteGMII16(0x06, 0x05f8);
			WriteGMII16(0x06, 0xfaef);
			WriteGMII16(0x06, 0x69e0);
			WriteGMII16(0x06, 0xe2fe);
			WriteGMII16(0x06, 0xe1e2);
			WriteGMII16(0x06, 0xffad);
			WriteGMII16(0x06, 0x2d1a);
			WriteGMII16(0x06, 0xe0e1);
			WriteGMII16(0x06, 0x4ee1);
			WriteGMII16(0x06, 0xe14f);
			WriteGMII16(0x06, 0xac2d);
			WriteGMII16(0x06, 0x22f6);
			WriteGMII16(0x06, 0x0302);
			WriteGMII16(0x06, 0x033b);
			WriteGMII16(0x06, 0xf703);
			WriteGMII16(0x06, 0xf706);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0x4402);
			WriteGMII16(0x06, 0x2d21);
			WriteGMII16(0x06, 0xae11);
			WriteGMII16(0x06, 0xe0e1);
			WriteGMII16(0x06, 0x4ee1);
			WriteGMII16(0x06, 0xe14f);
			WriteGMII16(0x06, 0xad2d);
			WriteGMII16(0x06, 0x08bf);
			WriteGMII16(0x06, 0x844f);
			WriteGMII16(0x06, 0x022d);
			WriteGMII16(0x06, 0x21f6);
			WriteGMII16(0x06, 0x06ef);
			WriteGMII16(0x06, 0x96fe);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8fa);
			WriteGMII16(0x06, 0xef69);
			WriteGMII16(0x06, 0x0283);
			WriteGMII16(0x06, 0x4502);
			WriteGMII16(0x06, 0x83a2);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x00e1);
			WriteGMII16(0x06, 0xe001);
			WriteGMII16(0x06, 0xad27);
			WriteGMII16(0x06, 0x1fd1);
			WriteGMII16(0x06, 0x01bf);
			WriteGMII16(0x06, 0x843b);
			WriteGMII16(0x06, 0x022d);
			WriteGMII16(0x06, 0xc1e0);
			WriteGMII16(0x06, 0xe020);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x21ad);
			WriteGMII16(0x06, 0x200e);
			WriteGMII16(0x06, 0xd100);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0x3b02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xbf3b);
			WriteGMII16(0x06, 0x9602);
			WriteGMII16(0x06, 0x2d21);
			WriteGMII16(0x06, 0xef96);
			WriteGMII16(0x06, 0xfefc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xf9fa);
			WriteGMII16(0x06, 0xef69);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x87ad);
			WriteGMII16(0x06, 0x204c);
			WriteGMII16(0x06, 0xd200);
			WriteGMII16(0x06, 0xe0e2);
			WriteGMII16(0x06, 0x0058);
			WriteGMII16(0x06, 0x010c);
			WriteGMII16(0x06, 0x021e);
			WriteGMII16(0x06, 0x20e0);
			WriteGMII16(0x06, 0xe000);
			WriteGMII16(0x06, 0x5810);
			WriteGMII16(0x06, 0x1e20);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x3658);
			WriteGMII16(0x06, 0x031e);
			WriteGMII16(0x06, 0x20e0);
			WriteGMII16(0x06, 0xe022);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x2358);
			WriteGMII16(0x06, 0xe01e);
			WriteGMII16(0x06, 0x20e0);
			WriteGMII16(0x06, 0x8b64);
			WriteGMII16(0x06, 0x1f02);
			WriteGMII16(0x06, 0x9e22);
			WriteGMII16(0x06, 0xe68b);
			WriteGMII16(0x06, 0x64ad);
			WriteGMII16(0x06, 0x3214);
			WriteGMII16(0x06, 0xad34);
			WriteGMII16(0x06, 0x11ef);
			WriteGMII16(0x06, 0x0258);
			WriteGMII16(0x06, 0x039e);
			WriteGMII16(0x06, 0x07ad);
			WriteGMII16(0x06, 0x3508);
			WriteGMII16(0x06, 0x5ac0);
			WriteGMII16(0x06, 0x9f04);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xae02);
			WriteGMII16(0x06, 0xd100);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0x3e02);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xef96);
			WriteGMII16(0x06, 0xfefd);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfbe0);
			WriteGMII16(0x06, 0x8b85);
			WriteGMII16(0x06, 0xad25);
			WriteGMII16(0x06, 0x22e0);
			WriteGMII16(0x06, 0xe022);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x23e2);
			WriteGMII16(0x06, 0xe036);
			WriteGMII16(0x06, 0xe3e0);
			WriteGMII16(0x06, 0x375a);
			WriteGMII16(0x06, 0xc40d);
			WriteGMII16(0x06, 0x0158);
			WriteGMII16(0x06, 0x021e);
			WriteGMII16(0x06, 0x20e3);
			WriteGMII16(0x06, 0x8ae7);
			WriteGMII16(0x06, 0xac31);
			WriteGMII16(0x06, 0x60ac);
			WriteGMII16(0x06, 0x3a08);
			WriteGMII16(0x06, 0xac3e);
			WriteGMII16(0x06, 0x26ae);
			WriteGMII16(0x06, 0x67af);
			WriteGMII16(0x06, 0x8437);
			WriteGMII16(0x06, 0xad37);
			WriteGMII16(0x06, 0x61e0);
			WriteGMII16(0x06, 0x8ae8);
			WriteGMII16(0x06, 0x10e4);
			WriteGMII16(0x06, 0x8ae8);
			WriteGMII16(0x06, 0xe18a);
			WriteGMII16(0x06, 0xe91b);
			WriteGMII16(0x06, 0x109e);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x51d1);
			WriteGMII16(0x06, 0x00bf);
			WriteGMII16(0x06, 0x8441);
			WriteGMII16(0x06, 0x022d);
			WriteGMII16(0x06, 0xc1ee);
			WriteGMII16(0x06, 0x8ae8);
			WriteGMII16(0x06, 0x00ae);
			WriteGMII16(0x06, 0x43ad);
			WriteGMII16(0x06, 0x3627);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xeee1);
			WriteGMII16(0x06, 0x8aef);
			WriteGMII16(0x06, 0xef74);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xeae1);
			WriteGMII16(0x06, 0x8aeb);
			WriteGMII16(0x06, 0x1b74);
			WriteGMII16(0x06, 0x9e2e);
			WriteGMII16(0x06, 0x14e4);
			WriteGMII16(0x06, 0x8aea);
			WriteGMII16(0x06, 0xe58a);
			WriteGMII16(0x06, 0xebef);
			WriteGMII16(0x06, 0x74e0);
			WriteGMII16(0x06, 0x8aee);
			WriteGMII16(0x06, 0xe18a);
			WriteGMII16(0x06, 0xef1b);
			WriteGMII16(0x06, 0x479e);
			WriteGMII16(0x06, 0x0fae);
			WriteGMII16(0x06, 0x19ee);
			WriteGMII16(0x06, 0x8aea);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8aeb);
			WriteGMII16(0x06, 0x00ae);
			WriteGMII16(0x06, 0x0fac);
			WriteGMII16(0x06, 0x390c);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0x4102);
			WriteGMII16(0x06, 0x2dc1);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xe800);
			WriteGMII16(0x06, 0xe68a);
			WriteGMII16(0x06, 0xe7ff);
			WriteGMII16(0x06, 0xfdfc);
			WriteGMII16(0x06, 0x0400);
			WriteGMII16(0x06, 0xe234);
			WriteGMII16(0x06, 0xcce2);
			WriteGMII16(0x06, 0x0088);
			WriteGMII16(0x06, 0xe200);
			WriteGMII16(0x06, 0xa725);
			WriteGMII16(0x06, 0xe50a);
			WriteGMII16(0x06, 0x1de5);
			WriteGMII16(0x06, 0x0a2c);
			WriteGMII16(0x06, 0xe50a);
			WriteGMII16(0x06, 0x6de5);
			WriteGMII16(0x06, 0x0a1d);
			WriteGMII16(0x06, 0xe50a);
			WriteGMII16(0x06, 0x1ce5);
			WriteGMII16(0x06, 0x0a2d);
			WriteGMII16(0x06, 0xa755);
			WriteGMII16(0x05, 0x8b64);
			WriteGMII16(0x06, 0x0000);
			WriteGMII16(0x05, 0x8b94);
			WriteGMII16(0x06, 0x82cd);
			WriteGMII16(0x05, 0x8b85);
			WriteGMII16(0x06, 0x2000);
			WriteGMII16(0x05, 0x8aee);
			WriteGMII16(0x06, 0x03b8);
			WriteGMII16(0x05, 0x8ae8);
			WriteGMII16(0x06, 0x0002);
			gphy_val = ReadGMII16(0x01);
			gphy_val |= BIT_0;
			WriteGMII16(0x01, gphy_val);
			gphy_val = ReadGMII16(0x00);
			gphy_val |= BIT_0;
			WriteGMII16(0x00, gphy_val);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x1f, 0x0005);
			for (int i = 0; i < 200; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x00);
				if (gphy_val & BIT_7)
					break;
			}
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			gphy_val = ReadGMII16(0x17);
			gphy_val &= ~(BIT_0);
/*			if ((subsystem_vendor == 0x144d &&
			     subsystem_device == 0xc098) ||
			    (subsystem_vendor == 0x144d &&
			     subsystem_device == 0xc0b1)) {
            gphy_val &= ~(BIT_2);
      } */
			WriteGMII16(0x17, gphy_val);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0028);
			WriteGMII16(0x15, 0x0010);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0041);
			WriteGMII16(0x15, 0x0802);
			WriteGMII16(0x16, 0x2185);
			WriteGMII16(0x1f, 0x0000);
//			spin_unlock_irqrestore(&tp->phy_lock, flags);
		} else {
//			spin_lock_irqsave(&tp->phy_lock, flags);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x00, 0x1800);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			WriteGMII16(0x17, 0x0117);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1E, 0x002C);
			WriteGMII16(0x1B, 0x5000);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x16, 0x4104);
			for (int i = 0; i < 2000; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x1E);
				gphy_val &= 0x03FF;
				if (gphy_val==0x000C)
					break;
			}
			WriteGMII16(0x1f, 0x0005);
			for (int i = 0; i < 200; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x07);
				if ((gphy_val & BIT_5) == 0)
					break;
			}
			gphy_val = ReadGMII16(0x07);
			if (gphy_val & BIT_5) {
				WriteGMII16(0x1f, 0x0007);
				WriteGMII16(0x1e, 0x00a1);
				WriteGMII16(0x17, 0x1000);
				WriteGMII16(0x17, 0x0000);
				WriteGMII16(0x17, 0x2000);
				WriteGMII16(0x1e, 0x002f);
				WriteGMII16(0x18, 0x9bfb);
				WriteGMII16(0x1f, 0x0005);
				WriteGMII16(0x07, 0x0000);
				WriteGMII16(0x1f, 0x0000);
			}
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x0080);
			gphy_val = ReadGMII16(0x00);
			gphy_val &= ~(BIT_7);
			WriteGMII16(0x00, gphy_val);
			WriteGMII16(0x1f, 0x0002);
			gphy_val = ReadGMII16(0x08);
			gphy_val &= ~(BIT_7);
			WriteGMII16(0x08, gphy_val);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			WriteGMII16(0x16, 0x0306);
			WriteGMII16(0x16, 0x0307);
			WriteGMII16(0x15, 0x000e);
			WriteGMII16(0x19, 0x000a);
			WriteGMII16(0x15, 0x0010);
			WriteGMII16(0x19, 0x0008);
			WriteGMII16(0x15, 0x0018);
			WriteGMII16(0x19, 0x4801);
			WriteGMII16(0x15, 0x0019);
			WriteGMII16(0x19, 0x6801);
			WriteGMII16(0x15, 0x001a);
			WriteGMII16(0x19, 0x66a1);
			WriteGMII16(0x15, 0x001f);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0020);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0021);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0022);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0023);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0024);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0025);
			WriteGMII16(0x19, 0x64a1);
			WriteGMII16(0x15, 0x0026);
			WriteGMII16(0x19, 0x40ea);
			WriteGMII16(0x15, 0x0027);
			WriteGMII16(0x19, 0x4503);
			WriteGMII16(0x15, 0x0028);
			WriteGMII16(0x19, 0x9f00);
			WriteGMII16(0x15, 0x0029);
			WriteGMII16(0x19, 0xa631);
			WriteGMII16(0x15, 0x002a);
			WriteGMII16(0x19, 0x9717);
			WriteGMII16(0x15, 0x002b);
			WriteGMII16(0x19, 0x302c);
			WriteGMII16(0x15, 0x002c);
			WriteGMII16(0x19, 0x4802);
			WriteGMII16(0x15, 0x002d);
			WriteGMII16(0x19, 0x58da);
			WriteGMII16(0x15, 0x002e);
			WriteGMII16(0x19, 0x400d);
			WriteGMII16(0x15, 0x002f);
			WriteGMII16(0x19, 0x4488);
			WriteGMII16(0x15, 0x0030);
			WriteGMII16(0x19, 0x9e00);
			WriteGMII16(0x15, 0x0031);
			WriteGMII16(0x19, 0x63c8);
			WriteGMII16(0x15, 0x0032);
			WriteGMII16(0x19, 0x6481);
			WriteGMII16(0x15, 0x0033);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0034);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0035);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0036);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0037);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0038);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0039);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x003a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x003b);
			WriteGMII16(0x19, 0x63e8);
			WriteGMII16(0x15, 0x003c);
			WriteGMII16(0x19, 0x7d00);
			WriteGMII16(0x15, 0x003d);
			WriteGMII16(0x19, 0x59d4);
			WriteGMII16(0x15, 0x003e);
			WriteGMII16(0x19, 0x63f8);
			WriteGMII16(0x15, 0x0040);
			WriteGMII16(0x19, 0x64a1);
			WriteGMII16(0x15, 0x0041);
			WriteGMII16(0x19, 0x30de);
			WriteGMII16(0x15, 0x0044);
			WriteGMII16(0x19, 0x480f);
			WriteGMII16(0x15, 0x0045);
			WriteGMII16(0x19, 0x6800);
			WriteGMII16(0x15, 0x0046);
			WriteGMII16(0x19, 0x6680);
			WriteGMII16(0x15, 0x0047);
			WriteGMII16(0x19, 0x7c10);
			WriteGMII16(0x15, 0x0048);
			WriteGMII16(0x19, 0x63c8);
			WriteGMII16(0x15, 0x0049);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004b);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004c);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004d);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004e);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x004f);
			WriteGMII16(0x19, 0x40ea);
			WriteGMII16(0x15, 0x0050);
			WriteGMII16(0x19, 0x4503);
			WriteGMII16(0x15, 0x0051);
			WriteGMII16(0x19, 0x58ca);
			WriteGMII16(0x15, 0x0052);
			WriteGMII16(0x19, 0x63c8);
			WriteGMII16(0x15, 0x0053);
			WriteGMII16(0x19, 0x63d8);
			WriteGMII16(0x15, 0x0054);
			WriteGMII16(0x19, 0x66a0);
			WriteGMII16(0x15, 0x0055);
			WriteGMII16(0x19, 0x9f00);
			WriteGMII16(0x15, 0x0056);
			WriteGMII16(0x19, 0x3000);
			WriteGMII16(0x15, 0x00a1);
			WriteGMII16(0x19, 0x3044);
			WriteGMII16(0x15, 0x00ab);
			WriteGMII16(0x19, 0x5820);
			WriteGMII16(0x15, 0x00ac);
			WriteGMII16(0x19, 0x5e04);
			WriteGMII16(0x15, 0x00ad);
			WriteGMII16(0x19, 0xb60c);
			WriteGMII16(0x15, 0x00af);
			WriteGMII16(0x19, 0x000a);
			WriteGMII16(0x15, 0x00b2);
			WriteGMII16(0x19, 0x30b9);
			WriteGMII16(0x15, 0x00b9);
			WriteGMII16(0x19, 0x4408);
			WriteGMII16(0x15, 0x00ba);
			WriteGMII16(0x19, 0x480b);
			WriteGMII16(0x15, 0x00bb);
			WriteGMII16(0x19, 0x5e00);
			WriteGMII16(0x15, 0x00bc);
			WriteGMII16(0x19, 0x405f);
			WriteGMII16(0x15, 0x00bd);
			WriteGMII16(0x19, 0x4448);
			WriteGMII16(0x15, 0x00be);
			WriteGMII16(0x19, 0x4020);
			WriteGMII16(0x15, 0x00bf);
			WriteGMII16(0x19, 0x4468);
			WriteGMII16(0x15, 0x00c0);
			WriteGMII16(0x19, 0x9c02);
			WriteGMII16(0x15, 0x00c1);
			WriteGMII16(0x19, 0x58a0);
			WriteGMII16(0x15, 0x00c2);
			WriteGMII16(0x19, 0xb605);
			WriteGMII16(0x15, 0x00c3);
			WriteGMII16(0x19, 0xc0d3);
			WriteGMII16(0x15, 0x00c4);
			WriteGMII16(0x19, 0x00e6);
			WriteGMII16(0x15, 0x00c5);
			WriteGMII16(0x19, 0xdaec);
			WriteGMII16(0x15, 0x00c6);
			WriteGMII16(0x19, 0x00fa);
			WriteGMII16(0x15, 0x00c7);
			WriteGMII16(0x19, 0x9df9);
			WriteGMII16(0x15, 0x0112);
			WriteGMII16(0x19, 0x6421);
			WriteGMII16(0x15, 0x0113);
			WriteGMII16(0x19, 0x7c08);
			WriteGMII16(0x15, 0x0114);
			WriteGMII16(0x19, 0x63f0);
			WriteGMII16(0x15, 0x0115);
			WriteGMII16(0x19, 0x4003);
			WriteGMII16(0x15, 0x0116);
			WriteGMII16(0x19, 0x4418);
			WriteGMII16(0x15, 0x0117);
			WriteGMII16(0x19, 0x9b00);
			WriteGMII16(0x15, 0x0118);
			WriteGMII16(0x19, 0x6461);
			WriteGMII16(0x15, 0x0119);
			WriteGMII16(0x19, 0x64e1);
			WriteGMII16(0x15, 0x011a);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0150);
			WriteGMII16(0x19, 0x7c80);
			WriteGMII16(0x15, 0x0151);
			WriteGMII16(0x19, 0x6461);
			WriteGMII16(0x15, 0x0152);
			WriteGMII16(0x19, 0x4003);
			WriteGMII16(0x15, 0x0153);
			WriteGMII16(0x19, 0x4540);
			WriteGMII16(0x15, 0x0154);
			WriteGMII16(0x19, 0x9f00);
			WriteGMII16(0x15, 0x0155);
			WriteGMII16(0x19, 0x9d00);
			WriteGMII16(0x15, 0x0156);
			WriteGMII16(0x19, 0x7c40);
			WriteGMII16(0x15, 0x0157);
			WriteGMII16(0x19, 0x6421);
			WriteGMII16(0x15, 0x0158);
			WriteGMII16(0x19, 0x7c80);
			WriteGMII16(0x15, 0x0159);
			WriteGMII16(0x19, 0x64a1);
			WriteGMII16(0x15, 0x015a);
			WriteGMII16(0x19, 0x30fe);
			WriteGMII16(0x15, 0x02e7);
			WriteGMII16(0x19, 0x0000);
			WriteGMII16(0x15, 0x0329);
			WriteGMII16(0x19, 0x7c00);
			WriteGMII16(0x15, 0x0382);
			WriteGMII16(0x19, 0x7c40);
			WriteGMII16(0x15, 0x03bd);
			WriteGMII16(0x19, 0x405e);
			WriteGMII16(0x15, 0x03c9);
			WriteGMII16(0x19, 0x7c00);
			WriteGMII16(0x15, 0x03e3);
			WriteGMII16(0x19, 0x7c00);
			WriteGMII16(0x16, 0x0306);
			WriteGMII16(0x16, 0x0300);
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x05, 0xfff6);
			WriteGMII16(0x06, 0x0080);
			WriteGMII16(0x05, 0x8000);
			WriteGMII16(0x06, 0x0280);
			WriteGMII16(0x06, 0x48f7);
			WriteGMII16(0x06, 0x00e0);
			WriteGMII16(0x06, 0xfff7);
			WriteGMII16(0x06, 0xa080);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0xf602);
			WriteGMII16(0x06, 0x0200);
			WriteGMII16(0x06, 0x0280);
			WriteGMII16(0x06, 0x8c02);
			WriteGMII16(0x06, 0x0224);
			WriteGMII16(0x06, 0x0202);
			WriteGMII16(0x06, 0x3402);
			WriteGMII16(0x06, 0x027f);
			WriteGMII16(0x06, 0x0280);
			WriteGMII16(0x06, 0xa202);
			WriteGMII16(0x06, 0x80bb);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x88e1);
			WriteGMII16(0x06, 0x8b89);
			WriteGMII16(0x06, 0x1e01);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x8a1e);
			WriteGMII16(0x06, 0x01e1);
			WriteGMII16(0x06, 0x8b8b);
			WriteGMII16(0x06, 0x1e01);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x8c1e);
			WriteGMII16(0x06, 0x01e1);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0x1e01);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x8e1e);
			WriteGMII16(0x06, 0x01a0);
			WriteGMII16(0x06, 0x00c7);
			WriteGMII16(0x06, 0xaebb);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xe600);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xee03);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xefb8);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xe902);
			WriteGMII16(0x06, 0xee8b);
			WriteGMII16(0x06, 0x8520);
			WriteGMII16(0x06, 0xee8b);
			WriteGMII16(0x06, 0x8701);
			WriteGMII16(0x06, 0xd481);
			WriteGMII16(0x06, 0x31e4);
			WriteGMII16(0x06, 0x8b94);
			WriteGMII16(0x06, 0xe58b);
			WriteGMII16(0x06, 0x95bf);
			WriteGMII16(0x06, 0x8b88);
			WriteGMII16(0x06, 0xec00);
			WriteGMII16(0x06, 0x19a9);
			WriteGMII16(0x06, 0x8b90);
			WriteGMII16(0x06, 0xf9ee);
			WriteGMII16(0x06, 0xfff6);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0xfff7);
			WriteGMII16(0x06, 0xffe0);
			WriteGMII16(0x06, 0xe140);
			WriteGMII16(0x06, 0xe1e1);
			WriteGMII16(0x06, 0x41f7);
			WriteGMII16(0x06, 0x2ff6);
			WriteGMII16(0x06, 0x28e4);
			WriteGMII16(0x06, 0xe140);
			WriteGMII16(0x06, 0xe5e1);
			WriteGMII16(0x06, 0x4104);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0x8b89);
			WriteGMII16(0x06, 0xad20);
			WriteGMII16(0x06, 0x0dee);
			WriteGMII16(0x06, 0x8b89);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x82ed);
			WriteGMII16(0x06, 0x021f);
			WriteGMII16(0x06, 0x4102);
			WriteGMII16(0x06, 0x2812);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0xad20);
			WriteGMII16(0x06, 0x10ee);
			WriteGMII16(0x06, 0x8b8d);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x139d);
			WriteGMII16(0x06, 0x0281);
			WriteGMII16(0x06, 0xcf02);
			WriteGMII16(0x06, 0x1f99);
			WriteGMII16(0x06, 0x0227);
			WriteGMII16(0x06, 0xeafc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x8ead);
			WriteGMII16(0x06, 0x2014);
			WriteGMII16(0x06, 0xf620);
			WriteGMII16(0x06, 0xe48b);
			WriteGMII16(0x06, 0x8e02);
			WriteGMII16(0x06, 0x8100);
			WriteGMII16(0x06, 0x021b);
			WriteGMII16(0x06, 0xf402);
			WriteGMII16(0x06, 0x2c9c);
			WriteGMII16(0x06, 0x0281);
			WriteGMII16(0x06, 0x7202);
			WriteGMII16(0x06, 0x843c);
			WriteGMII16(0x06, 0xad22);
			WriteGMII16(0x06, 0x11f6);
			WriteGMII16(0x06, 0x22e4);
			WriteGMII16(0x06, 0x8b8e);
			WriteGMII16(0x06, 0x022c);
			WriteGMII16(0x06, 0x4602);
			WriteGMII16(0x06, 0x2ac5);
			WriteGMII16(0x06, 0x0229);
			WriteGMII16(0x06, 0x2002);
			WriteGMII16(0x06, 0x2b91);
			WriteGMII16(0x06, 0xad25);
			WriteGMII16(0x06, 0x11f6);
			WriteGMII16(0x06, 0x25e4);
			WriteGMII16(0x06, 0x8b8e);
			WriteGMII16(0x06, 0x0203);
			WriteGMII16(0x06, 0x5a02);
			WriteGMII16(0x06, 0x043a);
			WriteGMII16(0x06, 0x021a);
			WriteGMII16(0x06, 0x5902);
			WriteGMII16(0x06, 0x2bfc);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8fa);
			WriteGMII16(0x06, 0xef69);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x00e1);
			WriteGMII16(0x06, 0xe001);
			WriteGMII16(0x06, 0xad27);
			WriteGMII16(0x06, 0x1fd1);
			WriteGMII16(0x06, 0x01bf);
			WriteGMII16(0x06, 0x84eb);
			WriteGMII16(0x06, 0x022f);
			WriteGMII16(0x06, 0x50e0);
			WriteGMII16(0x06, 0xe020);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x21ad);
			WriteGMII16(0x06, 0x200e);
			WriteGMII16(0x06, 0xd100);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0xeb02);
			WriteGMII16(0x06, 0x2f50);
			WriteGMII16(0x06, 0xbf3d);
			WriteGMII16(0x06, 0x3902);
			WriteGMII16(0x06, 0x2eb0);
			WriteGMII16(0x06, 0xef96);
			WriteGMII16(0x06, 0xfefc);
			WriteGMII16(0x06, 0x0402);
			WriteGMII16(0x06, 0x8135);
			WriteGMII16(0x06, 0x05f8);
			WriteGMII16(0x06, 0xfaef);
			WriteGMII16(0x06, 0x69e0);
			WriteGMII16(0x06, 0xe2fe);
			WriteGMII16(0x06, 0xe1e2);
			WriteGMII16(0x06, 0xffad);
			WriteGMII16(0x06, 0x2d1a);
			WriteGMII16(0x06, 0xe0e1);
			WriteGMII16(0x06, 0x4ee1);
			WriteGMII16(0x06, 0xe14f);
			WriteGMII16(0x06, 0xac2d);
			WriteGMII16(0x06, 0x22f6);
			WriteGMII16(0x06, 0x0302);
			WriteGMII16(0x06, 0x0336);
			WriteGMII16(0x06, 0xf703);
			WriteGMII16(0x06, 0xf706);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0xd502);
			WriteGMII16(0x06, 0x2eb0);
			WriteGMII16(0x06, 0xae11);
			WriteGMII16(0x06, 0xe0e1);
			WriteGMII16(0x06, 0x4ee1);
			WriteGMII16(0x06, 0xe14f);
			WriteGMII16(0x06, 0xad2d);
			WriteGMII16(0x06, 0x08bf);
			WriteGMII16(0x06, 0x84e0);
			WriteGMII16(0x06, 0x022e);
			WriteGMII16(0x06, 0xb0f6);
			WriteGMII16(0x06, 0x06ef);
			WriteGMII16(0x06, 0x96fe);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfaef);
			WriteGMII16(0x06, 0x69e0);
			WriteGMII16(0x06, 0x8b87);
			WriteGMII16(0x06, 0xad20);
			WriteGMII16(0x06, 0x4cd2);
			WriteGMII16(0x06, 0x00e0);
			WriteGMII16(0x06, 0xe200);
			WriteGMII16(0x06, 0x5801);
			WriteGMII16(0x06, 0x0c02);
			WriteGMII16(0x06, 0x1e20);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x0058);
			WriteGMII16(0x06, 0x101e);
			WriteGMII16(0x06, 0x20e0);
			WriteGMII16(0x06, 0xe036);
			WriteGMII16(0x06, 0x5803);
			WriteGMII16(0x06, 0x1e20);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x22e1);
			WriteGMII16(0x06, 0xe023);
			WriteGMII16(0x06, 0x58e0);
			WriteGMII16(0x06, 0x1e20);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xe61f);
			WriteGMII16(0x06, 0x029e);
			WriteGMII16(0x06, 0x22e6);
			WriteGMII16(0x06, 0x8ae6);
			WriteGMII16(0x06, 0xad32);
			WriteGMII16(0x06, 0x14ad);
			WriteGMII16(0x06, 0x3411);
			WriteGMII16(0x06, 0xef02);
			WriteGMII16(0x06, 0x5803);
			WriteGMII16(0x06, 0x9e07);
			WriteGMII16(0x06, 0xad35);
			WriteGMII16(0x06, 0x085a);
			WriteGMII16(0x06, 0xc09f);
			WriteGMII16(0x06, 0x04d1);
			WriteGMII16(0x06, 0x01ae);
			WriteGMII16(0x06, 0x02d1);
			WriteGMII16(0x06, 0x00bf);
			WriteGMII16(0x06, 0x84f1);
			WriteGMII16(0x06, 0x022f);
			WriteGMII16(0x06, 0x50ef);
			WriteGMII16(0x06, 0x96fe);
			WriteGMII16(0x06, 0xfdfc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xf9fa);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x81ac);
			WriteGMII16(0x06, 0x260e);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x81ac);
			WriteGMII16(0x06, 0x2108);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x87ac);
			WriteGMII16(0x06, 0x2402);
			WriteGMII16(0x06, 0xae6b);
			WriteGMII16(0x06, 0xeee0);
			WriteGMII16(0x06, 0xea00);
			WriteGMII16(0x06, 0xeee0);
			WriteGMII16(0x06, 0xeb00);
			WriteGMII16(0x06, 0xe2e0);
			WriteGMII16(0x06, 0x7ce3);
			WriteGMII16(0x06, 0xe07d);
			WriteGMII16(0x06, 0xa511);
			WriteGMII16(0x06, 0x1115);
			WriteGMII16(0x06, 0xd260);
			WriteGMII16(0x06, 0xd666);
			WriteGMII16(0x06, 0x6602);
			WriteGMII16(0x06, 0x07f9);
			WriteGMII16(0x06, 0xd2a0);
			WriteGMII16(0x06, 0xd6aa);
			WriteGMII16(0x06, 0xaa02);
			WriteGMII16(0x06, 0x07f9);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0x55ae);
			WriteGMII16(0x06, 0x44a5);
			WriteGMII16(0x06, 0x6666);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x38a5);
			WriteGMII16(0x06, 0xaaaa);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x32ee);
			WriteGMII16(0x06, 0xe0ea);
			WriteGMII16(0x06, 0x04ee);
			WriteGMII16(0x06, 0xe0eb);
			WriteGMII16(0x06, 0x06e2);
			WriteGMII16(0x06, 0xe07c);
			WriteGMII16(0x06, 0xe3e0);
			WriteGMII16(0x06, 0x7de0);
			WriteGMII16(0x06, 0xe038);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x39ad);
			WriteGMII16(0x06, 0x2e21);
			WriteGMII16(0x06, 0xad3f);
			WriteGMII16(0x06, 0x13e0);
			WriteGMII16(0x06, 0xe414);
			WriteGMII16(0x06, 0xe1e4);
			WriteGMII16(0x06, 0x1568);
			WriteGMII16(0x06, 0x80e4);
			WriteGMII16(0x06, 0xe414);
			WriteGMII16(0x06, 0xe5e4);
			WriteGMII16(0x06, 0x1502);
			WriteGMII16(0x06, 0x8255);
			WriteGMII16(0x06, 0xae0b);
			WriteGMII16(0x06, 0xac3e);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x0602);
			WriteGMII16(0x06, 0x827f);
			WriteGMII16(0x06, 0x0282);
			WriteGMII16(0x06, 0xa9fe);
			WriteGMII16(0x06, 0xfdfc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x2ee0);
			WriteGMII16(0x06, 0x8b81);
			WriteGMII16(0x06, 0xad26);
			WriteGMII16(0x06, 0x0502);
			WriteGMII16(0x06, 0x21f3);
			WriteGMII16(0x06, 0xf728);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x81ad);
			WriteGMII16(0x06, 0x2105);
			WriteGMII16(0x06, 0x0222);
			WriteGMII16(0x06, 0xf8f7);
			WriteGMII16(0x06, 0x29e0);
			WriteGMII16(0x06, 0x8b87);
			WriteGMII16(0x06, 0xad24);
			WriteGMII16(0x06, 0x0502);
			WriteGMII16(0x06, 0x82e4);
			WriteGMII16(0x06, 0xf72a);
			WriteGMII16(0x06, 0xe58b);
			WriteGMII16(0x06, 0x2efc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x81ad);
			WriteGMII16(0x06, 0x2603);
			WriteGMII16(0x06, 0x0221);
			WriteGMII16(0x06, 0x34e0);
			WriteGMII16(0x06, 0x8b81);
			WriteGMII16(0x06, 0xad21);
			WriteGMII16(0x06, 0x09e0);
			WriteGMII16(0x06, 0x8b2e);
			WriteGMII16(0x06, 0xac20);
			WriteGMII16(0x06, 0x0302);
			WriteGMII16(0x06, 0x834b);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x87ad);
			WriteGMII16(0x06, 0x2409);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x2eac);
			WriteGMII16(0x06, 0x2103);
			WriteGMII16(0x06, 0x0283);
			WriteGMII16(0x06, 0x30fc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x2ee0);
			WriteGMII16(0x06, 0x8b81);
			WriteGMII16(0x06, 0xad26);
			WriteGMII16(0x06, 0x08e0);
			WriteGMII16(0x06, 0x85d2);
			WriteGMII16(0x06, 0xad25);
			WriteGMII16(0x06, 0x02f6);
			WriteGMII16(0x06, 0x28e0);
			WriteGMII16(0x06, 0x8b81);
			WriteGMII16(0x06, 0xad21);
			WriteGMII16(0x06, 0x0ae0);
			WriteGMII16(0x06, 0x860a);
			WriteGMII16(0x06, 0xf627);
			WriteGMII16(0x06, 0xa005);
			WriteGMII16(0x06, 0x02f6);
			WriteGMII16(0x06, 0x29e0);
			WriteGMII16(0x06, 0x8b87);
			WriteGMII16(0x06, 0xad24);
			WriteGMII16(0x06, 0x08e0);
			WriteGMII16(0x06, 0x8aed);
			WriteGMII16(0x06, 0xad20);
			WriteGMII16(0x06, 0x02f6);
			WriteGMII16(0x06, 0x2ae5);
			WriteGMII16(0x06, 0x8b2e);
			WriteGMII16(0x06, 0xa100);
			WriteGMII16(0x06, 0x0302);
			WriteGMII16(0x06, 0x2111);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xed00);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xec00);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x87ad);
			WriteGMII16(0x06, 0x243a);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0xeae1);
			WriteGMII16(0x06, 0xe0eb);
			WriteGMII16(0x06, 0x58f8);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xe4e0);
			WriteGMII16(0x06, 0xeae5);
			WriteGMII16(0x06, 0xe0eb);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x7ce1);
			WriteGMII16(0x06, 0xe07d);
			WriteGMII16(0x06, 0x5c00);
			WriteGMII16(0x06, 0xff3c);
			WriteGMII16(0x06, 0x001e);
			WriteGMII16(0x06, 0xab1c);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0x4ce1);
			WriteGMII16(0x06, 0xe04d);
			WriteGMII16(0x06, 0x58c1);
			WriteGMII16(0x06, 0xe4e0);
			WriteGMII16(0x06, 0x4ce5);
			WriteGMII16(0x06, 0xe04d);
			WriteGMII16(0x06, 0xe0e0);
			WriteGMII16(0x06, 0xeee1);
			WriteGMII16(0x06, 0xe0ef);
			WriteGMII16(0x06, 0x693c);
			WriteGMII16(0x06, 0xe4e0);
			WriteGMII16(0x06, 0xeee5);
			WriteGMII16(0x06, 0xe0ef);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8e0);
			WriteGMII16(0x06, 0x8b87);
			WriteGMII16(0x06, 0xad24);
			WriteGMII16(0x06, 0x12e0);
			WriteGMII16(0x06, 0xe0ee);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0xef59);
			WriteGMII16(0x06, 0xc3e4);
			WriteGMII16(0x06, 0xe0ee);
			WriteGMII16(0x06, 0xe5e0);
			WriteGMII16(0x06, 0xefee);
			WriteGMII16(0x06, 0x8aed);
			WriteGMII16(0x06, 0x01fc);
			WriteGMII16(0x06, 0x04f8);
			WriteGMII16(0x06, 0xe08b);
			WriteGMII16(0x06, 0x81ac);
			WriteGMII16(0x06, 0x2505);
			WriteGMII16(0x06, 0x0283);
			WriteGMII16(0x06, 0x5cae);
			WriteGMII16(0x06, 0x0302);
			WriteGMII16(0x06, 0x2516);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfaef);
			WriteGMII16(0x06, 0x69fa);
			WriteGMII16(0x06, 0xe086);
			WriteGMII16(0x06, 0x0aa0);
			WriteGMII16(0x06, 0x0019);
			WriteGMII16(0x06, 0xe086);
			WriteGMII16(0x06, 0x0be1);
			WriteGMII16(0x06, 0x8b33);
			WriteGMII16(0x06, 0x1b10);
			WriteGMII16(0x06, 0x9e04);
			WriteGMII16(0x06, 0xaa02);
			WriteGMII16(0x06, 0xae06);
			WriteGMII16(0x06, 0xee86);
			WriteGMII16(0x06, 0x0a01);
			WriteGMII16(0x06, 0xaee6);
			WriteGMII16(0x06, 0x0224);
			WriteGMII16(0x06, 0x1eae);
			WriteGMII16(0x06, 0x14a0);
			WriteGMII16(0x06, 0x0114);
			WriteGMII16(0x06, 0x0224);
			WriteGMII16(0x06, 0x26bf);
			WriteGMII16(0x06, 0x266d);
			WriteGMII16(0x06, 0x022e);
			WriteGMII16(0x06, 0xb0ee);
			WriteGMII16(0x06, 0x860b);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x860a);
			WriteGMII16(0x06, 0x02af);
			WriteGMII16(0x06, 0x8435);
			WriteGMII16(0x06, 0xa002);
			WriteGMII16(0x06, 0x52ee);
			WriteGMII16(0x06, 0x8604);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8605);
			WriteGMII16(0x06, 0x00e0);
			WriteGMII16(0x06, 0x860b);
			WriteGMII16(0x06, 0xe18b);
			WriteGMII16(0x06, 0x321b);
			WriteGMII16(0x06, 0x109e);
			WriteGMII16(0x06, 0x04aa);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0xcbee);
			WriteGMII16(0x06, 0x860b);
			WriteGMII16(0x06, 0x0002);
			WriteGMII16(0x06, 0x243a);
			WriteGMII16(0x06, 0xe286);
			WriteGMII16(0x06, 0x04e3);
			WriteGMII16(0x06, 0x8605);
			WriteGMII16(0x06, 0xef65);
			WriteGMII16(0x06, 0xe286);
			WriteGMII16(0x06, 0x06e3);
			WriteGMII16(0x06, 0x8607);
			WriteGMII16(0x06, 0x1b56);
			WriteGMII16(0x06, 0xaa0e);
			WriteGMII16(0x06, 0xef56);
			WriteGMII16(0x06, 0xe686);
			WriteGMII16(0x06, 0x06e7);
			WriteGMII16(0x06, 0x8607);
			WriteGMII16(0x06, 0xe286);
			WriteGMII16(0x06, 0x09e6);
			WriteGMII16(0x06, 0x8608);
			WriteGMII16(0x06, 0xe086);
			WriteGMII16(0x06, 0x09a0);
			WriteGMII16(0x06, 0x0007);
			WriteGMII16(0x06, 0xee86);
			WriteGMII16(0x06, 0x0a03);
			WriteGMII16(0x06, 0xaf83);
			WriteGMII16(0x06, 0x6202);
			WriteGMII16(0x06, 0x248e);
			WriteGMII16(0x06, 0x0224);
			WriteGMII16(0x06, 0x26ae);
			WriteGMII16(0x06, 0x48a0);
			WriteGMII16(0x06, 0x0321);
			WriteGMII16(0x06, 0xe086);
			WriteGMII16(0x06, 0x08e1);
			WriteGMII16(0x06, 0x8609);
			WriteGMII16(0x06, 0x1b01);
			WriteGMII16(0x06, 0x9e0c);
			WriteGMII16(0x06, 0xaa05);
			WriteGMII16(0x06, 0x0224);
			WriteGMII16(0x06, 0x9dae);
			WriteGMII16(0x06, 0xe702);
			WriteGMII16(0x06, 0x248e);
			WriteGMII16(0x06, 0xaee2);
			WriteGMII16(0x06, 0xee86);
			WriteGMII16(0x06, 0x0a04);
			WriteGMII16(0x06, 0xee86);
			WriteGMII16(0x06, 0x0b00);
			WriteGMII16(0x06, 0xaf83);
			WriteGMII16(0x06, 0x62a0);
			WriteGMII16(0x06, 0x0415);
			WriteGMII16(0x06, 0xe086);
			WriteGMII16(0x06, 0x0be1);
			WriteGMII16(0x06, 0x8b34);
			WriteGMII16(0x06, 0x1b10);
			WriteGMII16(0x06, 0x9e05);
			WriteGMII16(0x06, 0xaa03);
			WriteGMII16(0x06, 0xaf83);
			WriteGMII16(0x06, 0x7cee);
			WriteGMII16(0x06, 0x860a);
			WriteGMII16(0x06, 0x05ae);
			WriteGMII16(0x06, 0x0ca0);
			WriteGMII16(0x06, 0x0502);
			WriteGMII16(0x06, 0xae07);
			WriteGMII16(0x06, 0x0223);
			WriteGMII16(0x06, 0x09ee);
			WriteGMII16(0x06, 0x860a);
			WriteGMII16(0x06, 0x00fe);
			WriteGMII16(0x06, 0xef96);
			WriteGMII16(0x06, 0xfefd);
			WriteGMII16(0x06, 0xfc04);
			WriteGMII16(0x06, 0xf8f9);
			WriteGMII16(0x06, 0xfbe0);
			WriteGMII16(0x06, 0x8b85);
			WriteGMII16(0x06, 0xad25);
			WriteGMII16(0x06, 0x22e0);
			WriteGMII16(0x06, 0xe022);
			WriteGMII16(0x06, 0xe1e0);
			WriteGMII16(0x06, 0x23e2);
			WriteGMII16(0x06, 0xe036);
			WriteGMII16(0x06, 0xe3e0);
			WriteGMII16(0x06, 0x375a);
			WriteGMII16(0x06, 0xc40d);
			WriteGMII16(0x06, 0x0158);
			WriteGMII16(0x06, 0x021e);
			WriteGMII16(0x06, 0x20e3);
			WriteGMII16(0x06, 0x8ae7);
			WriteGMII16(0x06, 0xac31);
			WriteGMII16(0x06, 0x60ac);
			WriteGMII16(0x06, 0x3a08);
			WriteGMII16(0x06, 0xac3e);
			WriteGMII16(0x06, 0x26ae);
			WriteGMII16(0x06, 0x67af);
			WriteGMII16(0x06, 0x84d1);
			WriteGMII16(0x06, 0xad37);
			WriteGMII16(0x06, 0x61e0);
			WriteGMII16(0x06, 0x8ae8);
			WriteGMII16(0x06, 0x10e4);
			WriteGMII16(0x06, 0x8ae8);
			WriteGMII16(0x06, 0xe18a);
			WriteGMII16(0x06, 0xe91b);
			WriteGMII16(0x06, 0x109e);
			WriteGMII16(0x06, 0x02ae);
			WriteGMII16(0x06, 0x51d1);
			WriteGMII16(0x06, 0x00bf);
			WriteGMII16(0x06, 0x84ee);
			WriteGMII16(0x06, 0x022f);
			WriteGMII16(0x06, 0x50ee);
			WriteGMII16(0x06, 0x8ae8);
			WriteGMII16(0x06, 0x00ae);
			WriteGMII16(0x06, 0x43ad);
			WriteGMII16(0x06, 0x3627);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xeee1);
			WriteGMII16(0x06, 0x8aef);
			WriteGMII16(0x06, 0xef74);
			WriteGMII16(0x06, 0xe08a);
			WriteGMII16(0x06, 0xeae1);
			WriteGMII16(0x06, 0x8aeb);
			WriteGMII16(0x06, 0x1b74);
			WriteGMII16(0x06, 0x9e2e);
			WriteGMII16(0x06, 0x14e4);
			WriteGMII16(0x06, 0x8aea);
			WriteGMII16(0x06, 0xe58a);
			WriteGMII16(0x06, 0xebef);
			WriteGMII16(0x06, 0x74e0);
			WriteGMII16(0x06, 0x8aee);
			WriteGMII16(0x06, 0xe18a);
			WriteGMII16(0x06, 0xef1b);
			WriteGMII16(0x06, 0x479e);
			WriteGMII16(0x06, 0x0fae);
			WriteGMII16(0x06, 0x19ee);
			WriteGMII16(0x06, 0x8aea);
			WriteGMII16(0x06, 0x00ee);
			WriteGMII16(0x06, 0x8aeb);
			WriteGMII16(0x06, 0x00ae);
			WriteGMII16(0x06, 0x0fac);
			WriteGMII16(0x06, 0x390c);
			WriteGMII16(0x06, 0xd101);
			WriteGMII16(0x06, 0xbf84);
			WriteGMII16(0x06, 0xee02);
			WriteGMII16(0x06, 0x2f50);
			WriteGMII16(0x06, 0xee8a);
			WriteGMII16(0x06, 0xe800);
			WriteGMII16(0x06, 0xe68a);
			WriteGMII16(0x06, 0xe7ff);
			WriteGMII16(0x06, 0xfdfc);
			WriteGMII16(0x06, 0x04a7);
			WriteGMII16(0x06, 0x25e5);
			WriteGMII16(0x06, 0x0a1d);
			WriteGMII16(0x06, 0xe50a);
			WriteGMII16(0x06, 0x2ce5);
			WriteGMII16(0x06, 0x0a6d);
			WriteGMII16(0x06, 0xe50a);
			WriteGMII16(0x06, 0x1de5);
			WriteGMII16(0x06, 0x0a1c);
			WriteGMII16(0x06, 0xe50a);
			WriteGMII16(0x06, 0x2da7);
			WriteGMII16(0x06, 0x5500);
			WriteGMII16(0x06, 0xe234);
			WriteGMII16(0x06, 0x88e2);
			WriteGMII16(0x06, 0x00cc);
			WriteGMII16(0x06, 0xe200);
			gphy_val = ReadGMII16(0x01);
			gphy_val |= BIT_0;
			WriteGMII16(0x01, gphy_val);
			gphy_val = ReadGMII16(0x00);
			gphy_val |= BIT_0;
			WriteGMII16(0x00, gphy_val);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x17, 0x2179);
			WriteGMII16(0x1f, 0x0001);
			WriteGMII16(0x10, 0xf274);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0042);
			WriteGMII16(0x15, 0x0f00);
			WriteGMII16(0x15, 0x0f00);
			WriteGMII16(0x16, 0x7408);
			WriteGMII16(0x15, 0x0e00);
			WriteGMII16(0x15, 0x0f00);
			WriteGMII16(0x15, 0x0f01);
			WriteGMII16(0x16, 0x4000);
			WriteGMII16(0x15, 0x0e01);
			WriteGMII16(0x15, 0x0f01);
			WriteGMII16(0x15, 0x0f02);
			WriteGMII16(0x16, 0x9400);
			WriteGMII16(0x15, 0x0e02);
			WriteGMII16(0x15, 0x0f02);
			WriteGMII16(0x15, 0x0f03);
			WriteGMII16(0x16, 0x7408);
			WriteGMII16(0x15, 0x0e03);
			WriteGMII16(0x15, 0x0f03);
			WriteGMII16(0x15, 0x0f04);
			WriteGMII16(0x16, 0x4008);
			WriteGMII16(0x15, 0x0e04);
			WriteGMII16(0x15, 0x0f04);
			WriteGMII16(0x15, 0x0f05);
			WriteGMII16(0x16, 0x9400);
			WriteGMII16(0x15, 0x0e05);
			WriteGMII16(0x15, 0x0f05);
			WriteGMII16(0x15, 0x0f06);
			WriteGMII16(0x16, 0x0803);
			WriteGMII16(0x15, 0x0e06);
			WriteGMII16(0x15, 0x0f06);
			WriteGMII16(0x15, 0x0d00);
			WriteGMII16(0x15, 0x0100);
			WriteGMII16(0x1f, 0x0001);
			WriteGMII16(0x10, 0xf074);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x17, 0x2149);
			WriteGMII16(0x1f, 0x0005);
			for (int i = 0; i < 200; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x00);
				if (gphy_val & BIT_7)
					break;
			}
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			gphy_val = ReadGMII16(0x17);
			gphy_val &= ~(BIT_0 | BIT_2);
			WriteGMII16(0x17, gphy_val);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x0023);
			gphy_val = ReadGMII16(0x17);
			gphy_val |= BIT_14;
			WriteGMII16(0x17, gphy_val);
			WriteGMII16(0x1e, 0x0020);
			gphy_val = ReadGMII16(0x1b);
			gphy_val |= BIT_7;
			WriteGMII16(0x1b, gphy_val);
			WriteGMII16(0x1e, 0x0041);
			WriteGMII16(0x15, 0x0e02);
			WriteGMII16(0x1e, 0x0028);
			gphy_val = ReadGMII16(0x19);
			gphy_val |= BIT_15;
			WriteGMII16(0x19, gphy_val);
			WriteGMII16(0x1f, 0x0000);
//			spin_unlock_irqrestore(&tp->phy_lock, flags);
      
/*			if (subsystem_vendor == 0x104d &&
			    subsystem_device == 0x907b) {
//				spin_lock_irqsave(&tp->phy_lock, flags);
				WriteGMII16(0x1F, 0x0005);
				WriteGMII16(0x05, 0x8B86);
				gphy_val = ReadGMII16(0x06) | BIT_4;
				WriteGMII16(0x06, gphy_val);
				WriteGMII16(0x1f, 0x0000);
//				spin_unlock_irqrestore(&tp->phy_lock, flags);
			} */
		}
    
//		spin_lock_irqsave(&tp->phy_lock, flags);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x0023);
		gphy_val = ReadGMII16(0x17)|0x02;
		WriteGMII16(0x17, gphy_val);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8b80);
		WriteGMII16(0x06, 0xc896);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x0B, 0x6C20);
		WriteGMII16(0x07, 0x2872);
		WriteGMII16(0x1C, 0xEFFF);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x14, 0x6420);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0002);
		gphy_val = ReadGMII16(0x08) & 0x00FF;
		WriteGMII16(0x08, gphy_val | 0x8000);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x002D);
		gphy_val = ReadGMII16(0x18);
		WriteGMII16(0x18, gphy_val | 0x0050);
		WriteGMII16(0x1F, 0x0000);
		gphy_val = ReadGMII16(0x14);
		WriteGMII16(0x14, gphy_val | 0x8000);
    
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x00, 0x080B);
		WriteGMII16(0x0B, 0x09D7);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x15, 0x1006);
    
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x002F);
		WriteGMII16(0x15, 0x1919);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B86);
		gphy_val = ReadGMII16(0x06);
		WriteGMII16(0x06, gphy_val | 0x0001);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x00AC);
		WriteGMII16(0x18, 0x0006);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x19, 0x7F46);
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8AD2);
		WriteGMII16(0x06, 0x6810);
		WriteGMII16(0x05, 0x8AD4);
		WriteGMII16(0x06, 0x8002);
		WriteGMII16(0x05, 0x8ADE);
		WriteGMII16(0x06, 0x8025);
		WriteGMII16(0x1F, 0x0000);
    
  } else if (mcfg == MCFG_8168E_VL_1)  {
    
/*		if (aspm) {
			WriteMMIO8(0x6E, ReadMMIO8(0x6E) | BIT_6);
			WriteERI(0x1AE, 2, 0x0403, ERIAR_ExGMAC);
		} */
    
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x1800);
		gphy_val = ReadGMII16(0x15);
		gphy_val &= ~(BIT_12);
		WriteGMII16(0x15, gphy_val);
		IODelay(20000);
		WriteGMII16(0x1f, 0x0004);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		gphy_val = ReadGMII16(0x17);
		if ((gphy_val & BIT_11) == 0x0000) {
			gphy_val |= BIT_0;
			WriteGMII16(0x17, gphy_val);
			for (int i = 0; i < 200; i++) {
				IODelay(100);
				gphy_val = ReadGMII16(0x17);
				if (gphy_val & BIT_11)
					break;
			}
		}
		gphy_val = ReadGMII16(0x17);
		gphy_val |= BIT_0;
		WriteGMII16(0x17, gphy_val);
		WriteGMII16(0x1f, 0x0004);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1E, 0x002C);
		WriteGMII16(0x1B, 0x5000);
		WriteGMII16(0x1E, 0x002d);
		WriteGMII16(0x19, 0x0004);
		WriteGMII16(0x1f, 0x0002);
		WriteGMII16(0x1f, 0x0000);
		for (int i = 0; i < 200; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x1E);
			if ((gphy_val & 0x03FF) == 0x0014)
				break;
		}
		WriteGMII16(0x1f, 0x0005);
		for (int i = 0; i < 200; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x07);
			if ((gphy_val & BIT_5) == 0)
				break;
		}
		gphy_val = ReadGMII16(0x07);
		if (gphy_val & BIT_5) {
			WriteGMII16(0x1f, 0x0004);
			WriteGMII16(0x1f, 0x0007);
			WriteGMII16(0x1e, 0x00a1);
			WriteGMII16(0x17, 0x1000);
			WriteGMII16(0x17, 0x0000);
			WriteGMII16(0x17, 0x2000);
			WriteGMII16(0x1e, 0x002f);
			WriteGMII16(0x18, 0x9bfb);
			WriteGMII16(0x1f, 0x0005);
			WriteGMII16(0x07, 0x0000);
			WriteGMII16(0x1f, 0x0002);
			WriteGMII16(0x1f, 0x0000);
		}
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		gphy_val = ReadGMII16(0x00);
		gphy_val &= ~(BIT_7);
		WriteGMII16(0x00, gphy_val);
		WriteGMII16(0x1f, 0x0004);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0307);
		WriteGMII16(0x15, 0x0000);
		WriteGMII16(0x19, 0x407d);
		WriteGMII16(0x15, 0x0001);
		WriteGMII16(0x19, 0x440f);
		WriteGMII16(0x15, 0x0002);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0003);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x0004);
		WriteGMII16(0x19, 0xc4d5);
		WriteGMII16(0x15, 0x0005);
		WriteGMII16(0x19, 0x00ff);
		WriteGMII16(0x15, 0x0006);
		WriteGMII16(0x19, 0x74f0);
		WriteGMII16(0x15, 0x0007);
		WriteGMII16(0x19, 0x4880);
		WriteGMII16(0x15, 0x0008);
		WriteGMII16(0x19, 0x4c00);
		WriteGMII16(0x15, 0x0009);
		WriteGMII16(0x19, 0x4800);
		WriteGMII16(0x15, 0x000a);
		WriteGMII16(0x19, 0x5000);
		WriteGMII16(0x15, 0x000b);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x000c);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x000d);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x15, 0x000e);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x000f);
		WriteGMII16(0x19, 0x7010);
		WriteGMII16(0x15, 0x0010);
		WriteGMII16(0x19, 0x6804);
		WriteGMII16(0x15, 0x0011);
		WriteGMII16(0x19, 0x64a0);
		WriteGMII16(0x15, 0x0012);
		WriteGMII16(0x19, 0x63da);
		WriteGMII16(0x15, 0x0013);
		WriteGMII16(0x19, 0x63d8);
		WriteGMII16(0x15, 0x0014);
		WriteGMII16(0x19, 0x6f05);
		WriteGMII16(0x15, 0x0015);
		WriteGMII16(0x19, 0x5420);
		WriteGMII16(0x15, 0x0016);
		WriteGMII16(0x19, 0x58ce);
		WriteGMII16(0x15, 0x0017);
		WriteGMII16(0x19, 0x5cf3);
		WriteGMII16(0x15, 0x0018);
		WriteGMII16(0x19, 0xb600);
		WriteGMII16(0x15, 0x0019);
		WriteGMII16(0x19, 0xc659);
		WriteGMII16(0x15, 0x001a);
		WriteGMII16(0x19, 0x0018);
		WriteGMII16(0x15, 0x001b);
		WriteGMII16(0x19, 0xc403);
		WriteGMII16(0x15, 0x001c);
		WriteGMII16(0x19, 0x0016);
		WriteGMII16(0x15, 0x001d);
		WriteGMII16(0x19, 0xaa05);
		WriteGMII16(0x15, 0x001e);
		WriteGMII16(0x19, 0xc503);
		WriteGMII16(0x15, 0x001f);
		WriteGMII16(0x19, 0x0003);
		WriteGMII16(0x15, 0x0020);
		WriteGMII16(0x19, 0x89f8);
		WriteGMII16(0x15, 0x0021);
		WriteGMII16(0x19, 0x32ae);
		WriteGMII16(0x15, 0x0022);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0023);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x0024);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0025);
		WriteGMII16(0x19, 0x6801);
		WriteGMII16(0x15, 0x0026);
		WriteGMII16(0x19, 0x66a0);
		WriteGMII16(0x15, 0x0027);
		WriteGMII16(0x19, 0xa300);
		WriteGMII16(0x15, 0x0028);
		WriteGMII16(0x19, 0x64a0);
		WriteGMII16(0x15, 0x0029);
		WriteGMII16(0x19, 0x76f0);
		WriteGMII16(0x15, 0x002a);
		WriteGMII16(0x19, 0x7670);
		WriteGMII16(0x15, 0x002b);
		WriteGMII16(0x19, 0x7630);
		WriteGMII16(0x15, 0x002c);
		WriteGMII16(0x19, 0x31a6);
		WriteGMII16(0x15, 0x002d);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x002e);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x002f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0030);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0031);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0032);
		WriteGMII16(0x19, 0x4801);
		WriteGMII16(0x15, 0x0033);
		WriteGMII16(0x19, 0x6803);
		WriteGMII16(0x15, 0x0034);
		WriteGMII16(0x19, 0x66a1);
		WriteGMII16(0x15, 0x0035);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0036);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x0037);
		WriteGMII16(0x19, 0xa300);
		WriteGMII16(0x15, 0x0038);
		WriteGMII16(0x19, 0x64a1);
		WriteGMII16(0x15, 0x0039);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x003a);
		WriteGMII16(0x19, 0x74f8);
		WriteGMII16(0x15, 0x003b);
		WriteGMII16(0x19, 0x63d0);
		WriteGMII16(0x15, 0x003c);
		WriteGMII16(0x19, 0x7ff0);
		WriteGMII16(0x15, 0x003d);
		WriteGMII16(0x19, 0x77f0);
		WriteGMII16(0x15, 0x003e);
		WriteGMII16(0x19, 0x7ff0);
		WriteGMII16(0x15, 0x003f);
		WriteGMII16(0x19, 0x7750);
		WriteGMII16(0x15, 0x0040);
		WriteGMII16(0x19, 0x63d8);
		WriteGMII16(0x15, 0x0041);
		WriteGMII16(0x19, 0x7cf0);
		WriteGMII16(0x15, 0x0042);
		WriteGMII16(0x19, 0x7708);
		WriteGMII16(0x15, 0x0043);
		WriteGMII16(0x19, 0xa654);
		WriteGMII16(0x15, 0x0044);
		WriteGMII16(0x19, 0x304a);
		WriteGMII16(0x15, 0x0045);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0046);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0047);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0048);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0049);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x004a);
		WriteGMII16(0x19, 0x4802);
		WriteGMII16(0x15, 0x004b);
		WriteGMII16(0x19, 0x4003);
		WriteGMII16(0x15, 0x004c);
		WriteGMII16(0x19, 0x4440);
		WriteGMII16(0x15, 0x004d);
		WriteGMII16(0x19, 0x63c8);
		WriteGMII16(0x15, 0x004e);
		WriteGMII16(0x19, 0x6481);
		WriteGMII16(0x15, 0x004f);
		WriteGMII16(0x19, 0x9d00);
		WriteGMII16(0x15, 0x0050);
		WriteGMII16(0x19, 0x63e8);
		WriteGMII16(0x15, 0x0051);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x15, 0x0052);
		WriteGMII16(0x19, 0x5900);
		WriteGMII16(0x15, 0x0053);
		WriteGMII16(0x19, 0x63f8);
		WriteGMII16(0x15, 0x0054);
		WriteGMII16(0x19, 0x64a1);
		WriteGMII16(0x15, 0x0055);
		WriteGMII16(0x19, 0x3116);
		WriteGMII16(0x15, 0x0056);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0057);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0058);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0059);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x005a);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x005b);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x005c);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x005d);
		WriteGMII16(0x19, 0x6000);
		WriteGMII16(0x15, 0x005e);
		WriteGMII16(0x19, 0x59ce);
		WriteGMII16(0x15, 0x005f);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x0060);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x15, 0x0061);
		WriteGMII16(0x19, 0x72b0);
		WriteGMII16(0x15, 0x0062);
		WriteGMII16(0x19, 0x400e);
		WriteGMII16(0x15, 0x0063);
		WriteGMII16(0x19, 0x4440);
		WriteGMII16(0x15, 0x0064);
		WriteGMII16(0x19, 0x9d00);
		WriteGMII16(0x15, 0x0065);
		WriteGMII16(0x19, 0x7f00);
		WriteGMII16(0x15, 0x0066);
		WriteGMII16(0x19, 0x70b0);
		WriteGMII16(0x15, 0x0067);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x0068);
		WriteGMII16(0x19, 0x6008);
		WriteGMII16(0x15, 0x0069);
		WriteGMII16(0x19, 0x7cf0);
		WriteGMII16(0x15, 0x006a);
		WriteGMII16(0x19, 0x7750);
		WriteGMII16(0x15, 0x006b);
		WriteGMII16(0x19, 0x4007);
		WriteGMII16(0x15, 0x006c);
		WriteGMII16(0x19, 0x4500);
		WriteGMII16(0x15, 0x006d);
		WriteGMII16(0x19, 0x4023);
		WriteGMII16(0x15, 0x006e);
		WriteGMII16(0x19, 0x4580);
		WriteGMII16(0x15, 0x006f);
		WriteGMII16(0x19, 0x9f00);
		WriteGMII16(0x15, 0x0070);
		WriteGMII16(0x19, 0xcd78);
		WriteGMII16(0x15, 0x0071);
		WriteGMII16(0x19, 0x0003);
		WriteGMII16(0x15, 0x0072);
		WriteGMII16(0x19, 0xbe02);
		WriteGMII16(0x15, 0x0073);
		WriteGMII16(0x19, 0x3070);
		WriteGMII16(0x15, 0x0074);
		WriteGMII16(0x19, 0x7cf0);
		WriteGMII16(0x15, 0x0075);
		WriteGMII16(0x19, 0x77f0);
		WriteGMII16(0x15, 0x0076);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x0077);
		WriteGMII16(0x19, 0x4007);
		WriteGMII16(0x15, 0x0078);
		WriteGMII16(0x19, 0x4500);
		WriteGMII16(0x15, 0x0079);
		WriteGMII16(0x19, 0x4023);
		WriteGMII16(0x15, 0x007a);
		WriteGMII16(0x19, 0x4580);
		WriteGMII16(0x15, 0x007b);
		WriteGMII16(0x19, 0x9f00);
		WriteGMII16(0x15, 0x007c);
		WriteGMII16(0x19, 0xce80);
		WriteGMII16(0x15, 0x007d);
		WriteGMII16(0x19, 0x0004);
		WriteGMII16(0x15, 0x007e);
		WriteGMII16(0x19, 0xce80);
		WriteGMII16(0x15, 0x007f);
		WriteGMII16(0x19, 0x0002);
		WriteGMII16(0x15, 0x0080);
		WriteGMII16(0x19, 0x307c);
		WriteGMII16(0x15, 0x0081);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x0082);
		WriteGMII16(0x19, 0x480f);
		WriteGMII16(0x15, 0x0083);
		WriteGMII16(0x19, 0x6802);
		WriteGMII16(0x15, 0x0084);
		WriteGMII16(0x19, 0x6680);
		WriteGMII16(0x15, 0x0085);
		WriteGMII16(0x19, 0x7c10);
		WriteGMII16(0x15, 0x0086);
		WriteGMII16(0x19, 0x6010);
		WriteGMII16(0x15, 0x0087);
		WriteGMII16(0x19, 0x400a);
		WriteGMII16(0x15, 0x0088);
		WriteGMII16(0x19, 0x4580);
		WriteGMII16(0x15, 0x0089);
		WriteGMII16(0x19, 0x9e00);
		WriteGMII16(0x15, 0x008a);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x15, 0x008b);
		WriteGMII16(0x19, 0x5800);
		WriteGMII16(0x15, 0x008c);
		WriteGMII16(0x19, 0x63c8);
		WriteGMII16(0x15, 0x008d);
		WriteGMII16(0x19, 0x63d8);
		WriteGMII16(0x15, 0x008e);
		WriteGMII16(0x19, 0x66a0);
		WriteGMII16(0x15, 0x008f);
		WriteGMII16(0x19, 0x8300);
		WriteGMII16(0x15, 0x0090);
		WriteGMII16(0x19, 0x7ff0);
		WriteGMII16(0x15, 0x0091);
		WriteGMII16(0x19, 0x74f0);
		WriteGMII16(0x15, 0x0092);
		WriteGMII16(0x19, 0x3006);
		WriteGMII16(0x15, 0x0093);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0094);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0095);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0096);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0097);
		WriteGMII16(0x19, 0x4803);
		WriteGMII16(0x15, 0x0098);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0099);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x009a);
		WriteGMII16(0x19, 0xa203);
		WriteGMII16(0x15, 0x009b);
		WriteGMII16(0x19, 0x64b1);
		WriteGMII16(0x15, 0x009c);
		WriteGMII16(0x19, 0x309e);
		WriteGMII16(0x15, 0x009d);
		WriteGMII16(0x19, 0x64b3);
		WriteGMII16(0x15, 0x009e);
		WriteGMII16(0x19, 0x4030);
		WriteGMII16(0x15, 0x009f);
		WriteGMII16(0x19, 0x440e);
		WriteGMII16(0x15, 0x00a0);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x00a1);
		WriteGMII16(0x19, 0x4419);
		WriteGMII16(0x15, 0x00a2);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x00a3);
		WriteGMII16(0x19, 0xc520);
		WriteGMII16(0x15, 0x00a4);
		WriteGMII16(0x19, 0x000b);
		WriteGMII16(0x15, 0x00a5);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x00a6);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x00a7);
		WriteGMII16(0x19, 0x58a4);
		WriteGMII16(0x15, 0x00a8);
		WriteGMII16(0x19, 0x63da);
		WriteGMII16(0x15, 0x00a9);
		WriteGMII16(0x19, 0x5cb0);
		WriteGMII16(0x15, 0x00aa);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x15, 0x00ab);
		WriteGMII16(0x19, 0x72b0);
		WriteGMII16(0x15, 0x00ac);
		WriteGMII16(0x19, 0x7f00);
		WriteGMII16(0x15, 0x00ad);
		WriteGMII16(0x19, 0x70b0);
		WriteGMII16(0x15, 0x00ae);
		WriteGMII16(0x19, 0x30b8);
		WriteGMII16(0x15, 0x00AF);
		WriteGMII16(0x19, 0x4060);
		WriteGMII16(0x15, 0x00B0);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x00B1);
		WriteGMII16(0x19, 0x7e00);
		WriteGMII16(0x15, 0x00B2);
		WriteGMII16(0x19, 0x72B0);
		WriteGMII16(0x15, 0x00B3);
		WriteGMII16(0x19, 0x7F00);
		WriteGMII16(0x15, 0x00B4);
		WriteGMII16(0x19, 0x73B0);
		WriteGMII16(0x15, 0x00b5);
		WriteGMII16(0x19, 0x58a0);
		WriteGMII16(0x15, 0x00b6);
		WriteGMII16(0x19, 0x63d2);
		WriteGMII16(0x15, 0x00b7);
		WriteGMII16(0x19, 0x5c00);
		WriteGMII16(0x15, 0x00b8);
		WriteGMII16(0x19, 0x5780);
		WriteGMII16(0x15, 0x00b9);
		WriteGMII16(0x19, 0xb60d);
		WriteGMII16(0x15, 0x00ba);
		WriteGMII16(0x19, 0x9bff);
		WriteGMII16(0x15, 0x00bb);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x00bc);
		WriteGMII16(0x19, 0x6001);
		WriteGMII16(0x15, 0x00bd);
		WriteGMII16(0x19, 0xc020);
		WriteGMII16(0x15, 0x00be);
		WriteGMII16(0x19, 0x002b);
		WriteGMII16(0x15, 0x00bf);
		WriteGMII16(0x19, 0xc137);
		WriteGMII16(0x15, 0x00c0);
		WriteGMII16(0x19, 0x0006);
		WriteGMII16(0x15, 0x00c1);
		WriteGMII16(0x19, 0x9af8);
		WriteGMII16(0x15, 0x00c2);
		WriteGMII16(0x19, 0x30c6);
		WriteGMII16(0x15, 0x00c3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00c4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00c5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00c6);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x15, 0x00c7);
		WriteGMII16(0x19, 0x70b0);
		WriteGMII16(0x15, 0x00c8);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x00c9);
		WriteGMII16(0x19, 0x4804);
		WriteGMII16(0x15, 0x00ca);
		WriteGMII16(0x19, 0x7c80);
		WriteGMII16(0x15, 0x00cb);
		WriteGMII16(0x19, 0x5c80);
		WriteGMII16(0x15, 0x00cc);
		WriteGMII16(0x19, 0x4010);
		WriteGMII16(0x15, 0x00cd);
		WriteGMII16(0x19, 0x4415);
		WriteGMII16(0x15, 0x00ce);
		WriteGMII16(0x19, 0x9b00);
		WriteGMII16(0x15, 0x00cf);
		WriteGMII16(0x19, 0x7f00);
		WriteGMII16(0x15, 0x00d0);
		WriteGMII16(0x19, 0x70b0);
		WriteGMII16(0x15, 0x00d1);
		WriteGMII16(0x19, 0x3177);
		WriteGMII16(0x15, 0x00d2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00d3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00d4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00d5);
		WriteGMII16(0x19, 0x4808);
		WriteGMII16(0x15, 0x00d6);
		WriteGMII16(0x19, 0x4007);
		WriteGMII16(0x15, 0x00d7);
		WriteGMII16(0x19, 0x4420);
		WriteGMII16(0x15, 0x00d8);
		WriteGMII16(0x19, 0x63d8);
		WriteGMII16(0x15, 0x00d9);
		WriteGMII16(0x19, 0xb608);
		WriteGMII16(0x15, 0x00da);
		WriteGMII16(0x19, 0xbcbd);
		WriteGMII16(0x15, 0x00db);
		WriteGMII16(0x19, 0xc60b);
		WriteGMII16(0x15, 0x00dc);
		WriteGMII16(0x19, 0x00fd);
		WriteGMII16(0x15, 0x00dd);
		WriteGMII16(0x19, 0x30e1);
		WriteGMII16(0x15, 0x00de);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00df);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00e0);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00e1);
		WriteGMII16(0x19, 0x4809);
		WriteGMII16(0x15, 0x00e2);
		WriteGMII16(0x19, 0x7e40);
		WriteGMII16(0x15, 0x00e3);
		WriteGMII16(0x19, 0x5a40);
		WriteGMII16(0x15, 0x00e4);
		WriteGMII16(0x19, 0x305a);
		WriteGMII16(0x15, 0x00e5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00e6);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00e7);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00e8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00e9);
		WriteGMII16(0x19, 0x480a);
		WriteGMII16(0x15, 0x00ea);
		WriteGMII16(0x19, 0x5820);
		WriteGMII16(0x15, 0x00eb);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x00ec);
		WriteGMII16(0x19, 0xb60a);
		WriteGMII16(0x15, 0x00ed);
		WriteGMII16(0x19, 0xda07);
		WriteGMII16(0x15, 0x00ee);
		WriteGMII16(0x19, 0x0008);
		WriteGMII16(0x15, 0x00ef);
		WriteGMII16(0x19, 0xc60b);
		WriteGMII16(0x15, 0x00f0);
		WriteGMII16(0x19, 0x00fc);
		WriteGMII16(0x15, 0x00f1);
		WriteGMII16(0x19, 0x30f6);
		WriteGMII16(0x15, 0x00f2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00f3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00f4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00f5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x00f6);
		WriteGMII16(0x19, 0x4408);
		WriteGMII16(0x15, 0x00f7);
		WriteGMII16(0x19, 0x480b);
		WriteGMII16(0x15, 0x00f8);
		WriteGMII16(0x19, 0x6f03);
		WriteGMII16(0x15, 0x00f9);
		WriteGMII16(0x19, 0x405f);
		WriteGMII16(0x15, 0x00fa);
		WriteGMII16(0x19, 0x4448);
		WriteGMII16(0x15, 0x00fb);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x00fc);
		WriteGMII16(0x19, 0x4468);
		WriteGMII16(0x15, 0x00fd);
		WriteGMII16(0x19, 0x9c03);
		WriteGMII16(0x15, 0x00fe);
		WriteGMII16(0x19, 0x6f07);
		WriteGMII16(0x15, 0x00ff);
		WriteGMII16(0x19, 0x58a0);
		WriteGMII16(0x15, 0x0100);
		WriteGMII16(0x19, 0xd6d1);
		WriteGMII16(0x15, 0x0101);
		WriteGMII16(0x19, 0x0004);
		WriteGMII16(0x15, 0x0102);
		WriteGMII16(0x19, 0xc137);
		WriteGMII16(0x15, 0x0103);
		WriteGMII16(0x19, 0x0002);
		WriteGMII16(0x15, 0x0104);
		WriteGMII16(0x19, 0xa0e5);
		WriteGMII16(0x15, 0x0105);
		WriteGMII16(0x19, 0x9df8);
		WriteGMII16(0x15, 0x0106);
		WriteGMII16(0x19, 0x30c6);
		WriteGMII16(0x15, 0x0107);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0108);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0109);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x010a);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x010b);
		WriteGMII16(0x19, 0x4808);
		WriteGMII16(0x15, 0x010c);
		WriteGMII16(0x19, 0xc32d);
		WriteGMII16(0x15, 0x010d);
		WriteGMII16(0x19, 0x0003);
		WriteGMII16(0x15, 0x010e);
		WriteGMII16(0x19, 0xc8b3);
		WriteGMII16(0x15, 0x010f);
		WriteGMII16(0x19, 0x00fc);
		WriteGMII16(0x15, 0x0110);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x0111);
		WriteGMII16(0x19, 0x3116);
		WriteGMII16(0x15, 0x0112);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0113);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0114);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0115);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0116);
		WriteGMII16(0x19, 0x4803);
		WriteGMII16(0x15, 0x0117);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0118);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x0119);
		WriteGMII16(0x19, 0x7c04);
		WriteGMII16(0x15, 0x011a);
		WriteGMII16(0x19, 0x6000);
		WriteGMII16(0x15, 0x011b);
		WriteGMII16(0x19, 0x5cf7);
		WriteGMII16(0x15, 0x011c);
		WriteGMII16(0x19, 0x7c2a);
		WriteGMII16(0x15, 0x011d);
		WriteGMII16(0x19, 0x5800);
		WriteGMII16(0x15, 0x011e);
		WriteGMII16(0x19, 0x5400);
		WriteGMII16(0x15, 0x011f);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x0120);
		WriteGMII16(0x19, 0x74f0);
		WriteGMII16(0x15, 0x0121);
		WriteGMII16(0x19, 0x4019);
		WriteGMII16(0x15, 0x0122);
		WriteGMII16(0x19, 0x440d);
		WriteGMII16(0x15, 0x0123);
		WriteGMII16(0x19, 0xb6c1);
		WriteGMII16(0x15, 0x0124);
		WriteGMII16(0x19, 0xc05b);
		WriteGMII16(0x15, 0x0125);
		WriteGMII16(0x19, 0x00bf);
		WriteGMII16(0x15, 0x0126);
		WriteGMII16(0x19, 0xc025);
		WriteGMII16(0x15, 0x0127);
		WriteGMII16(0x19, 0x00bd);
		WriteGMII16(0x15, 0x0128);
		WriteGMII16(0x19, 0xc603);
		WriteGMII16(0x15, 0x0129);
		WriteGMII16(0x19, 0x00bb);
		WriteGMII16(0x15, 0x012a);
		WriteGMII16(0x19, 0x8805);
		WriteGMII16(0x15, 0x012b);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x012c);
		WriteGMII16(0x19, 0x4001);
		WriteGMII16(0x15, 0x012d);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x012e);
		WriteGMII16(0x19, 0xa3dd);
		WriteGMII16(0x15, 0x012f);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0130);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x0131);
		WriteGMII16(0x19, 0x8407);
		WriteGMII16(0x15, 0x0132);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0133);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x0134);
		WriteGMII16(0x19, 0xd9b8);
		WriteGMII16(0x15, 0x0135);
		WriteGMII16(0x19, 0x0003);
		WriteGMII16(0x15, 0x0136);
		WriteGMII16(0x19, 0xc240);
		WriteGMII16(0x15, 0x0137);
		WriteGMII16(0x19, 0x0015);
		WriteGMII16(0x15, 0x0138);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0139);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x013a);
		WriteGMII16(0x19, 0x9ae9);
		WriteGMII16(0x15, 0x013b);
		WriteGMII16(0x19, 0x3140);
		WriteGMII16(0x15, 0x013c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x013d);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x013e);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x013f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0140);
		WriteGMII16(0x19, 0x4807);
		WriteGMII16(0x15, 0x0141);
		WriteGMII16(0x19, 0x4004);
		WriteGMII16(0x15, 0x0142);
		WriteGMII16(0x19, 0x4410);
		WriteGMII16(0x15, 0x0143);
		WriteGMII16(0x19, 0x7c0c);
		WriteGMII16(0x15, 0x0144);
		WriteGMII16(0x19, 0x600c);
		WriteGMII16(0x15, 0x0145);
		WriteGMII16(0x19, 0x9b00);
		WriteGMII16(0x15, 0x0146);
		WriteGMII16(0x19, 0xa68f);
		WriteGMII16(0x15, 0x0147);
		WriteGMII16(0x19, 0x3116);
		WriteGMII16(0x15, 0x0148);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0149);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x014a);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x014b);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x014c);
		WriteGMII16(0x19, 0x4804);
		WriteGMII16(0x15, 0x014d);
		WriteGMII16(0x19, 0x54c0);
		WriteGMII16(0x15, 0x014e);
		WriteGMII16(0x19, 0xb703);
		WriteGMII16(0x15, 0x014f);
		WriteGMII16(0x19, 0x5cff);
		WriteGMII16(0x15, 0x0150);
		WriteGMII16(0x19, 0x315f);
		WriteGMII16(0x15, 0x0151);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x0152);
		WriteGMII16(0x19, 0x74f8);
		WriteGMII16(0x15, 0x0153);
		WriteGMII16(0x19, 0x6421);
		WriteGMII16(0x15, 0x0154);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x0155);
		WriteGMII16(0x19, 0x6000);
		WriteGMII16(0x15, 0x0156);
		WriteGMII16(0x19, 0x4003);
		WriteGMII16(0x15, 0x0157);
		WriteGMII16(0x19, 0x4418);
		WriteGMII16(0x15, 0x0158);
		WriteGMII16(0x19, 0x9b00);
		WriteGMII16(0x15, 0x0159);
		WriteGMII16(0x19, 0x6461);
		WriteGMII16(0x15, 0x015a);
		WriteGMII16(0x19, 0x64e1);
		WriteGMII16(0x15, 0x015b);
		WriteGMII16(0x19, 0x7c20);
		WriteGMII16(0x15, 0x015c);
		WriteGMII16(0x19, 0x5820);
		WriteGMII16(0x15, 0x015d);
		WriteGMII16(0x19, 0x5ccf);
		WriteGMII16(0x15, 0x015e);
		WriteGMII16(0x19, 0x7050);
		WriteGMII16(0x15, 0x015f);
		WriteGMII16(0x19, 0xd9b8);
		WriteGMII16(0x15, 0x0160);
		WriteGMII16(0x19, 0x0008);
		WriteGMII16(0x15, 0x0161);
		WriteGMII16(0x19, 0xdab1);
		WriteGMII16(0x15, 0x0162);
		WriteGMII16(0x19, 0x0015);
		WriteGMII16(0x15, 0x0163);
		WriteGMII16(0x19, 0xc244);
		WriteGMII16(0x15, 0x0164);
		WriteGMII16(0x19, 0x0013);
		WriteGMII16(0x15, 0x0165);
		WriteGMII16(0x19, 0xc021);
		WriteGMII16(0x15, 0x0166);
		WriteGMII16(0x19, 0x00f9);
		WriteGMII16(0x15, 0x0167);
		WriteGMII16(0x19, 0x3177);
		WriteGMII16(0x15, 0x0168);
		WriteGMII16(0x19, 0x5cf7);
		WriteGMII16(0x15, 0x0169);
		WriteGMII16(0x19, 0x4010);
		WriteGMII16(0x15, 0x016a);
		WriteGMII16(0x19, 0x4428);
		WriteGMII16(0x15, 0x016b);
		WriteGMII16(0x19, 0x9c00);
		WriteGMII16(0x15, 0x016c);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x016d);
		WriteGMII16(0x19, 0x6008);
		WriteGMII16(0x15, 0x016e);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x016f);
		WriteGMII16(0x19, 0x74f0);
		WriteGMII16(0x15, 0x0170);
		WriteGMII16(0x19, 0x6461);
		WriteGMII16(0x15, 0x0171);
		WriteGMII16(0x19, 0x6421);
		WriteGMII16(0x15, 0x0172);
		WriteGMII16(0x19, 0x64a1);
		WriteGMII16(0x15, 0x0173);
		WriteGMII16(0x19, 0x3116);
		WriteGMII16(0x15, 0x0174);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0175);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0176);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0177);
		WriteGMII16(0x19, 0x4805);
		WriteGMII16(0x15, 0x0178);
		WriteGMII16(0x19, 0xa103);
		WriteGMII16(0x15, 0x0179);
		WriteGMII16(0x19, 0x7c02);
		WriteGMII16(0x15, 0x017a);
		WriteGMII16(0x19, 0x6002);
		WriteGMII16(0x15, 0x017b);
		WriteGMII16(0x19, 0x7e00);
		WriteGMII16(0x15, 0x017c);
		WriteGMII16(0x19, 0x5400);
		WriteGMII16(0x15, 0x017d);
		WriteGMII16(0x19, 0x7c6b);
		WriteGMII16(0x15, 0x017e);
		WriteGMII16(0x19, 0x5c63);
		WriteGMII16(0x15, 0x017f);
		WriteGMII16(0x19, 0x407d);
		WriteGMII16(0x15, 0x0180);
		WriteGMII16(0x19, 0xa602);
		WriteGMII16(0x15, 0x0181);
		WriteGMII16(0x19, 0x4001);
		WriteGMII16(0x15, 0x0182);
		WriteGMII16(0x19, 0x4420);
		WriteGMII16(0x15, 0x0183);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x0184);
		WriteGMII16(0x19, 0x44a1);
		WriteGMII16(0x15, 0x0185);
		WriteGMII16(0x19, 0xd6e0);
		WriteGMII16(0x15, 0x0186);
		WriteGMII16(0x19, 0x0009);
		WriteGMII16(0x15, 0x0187);
		WriteGMII16(0x19, 0x9efe);
		WriteGMII16(0x15, 0x0188);
		WriteGMII16(0x19, 0x7c02);
		WriteGMII16(0x15, 0x0189);
		WriteGMII16(0x19, 0x6000);
		WriteGMII16(0x15, 0x018a);
		WriteGMII16(0x19, 0x9c00);
		WriteGMII16(0x15, 0x018b);
		WriteGMII16(0x19, 0x318f);
		WriteGMII16(0x15, 0x018c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x018d);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x018e);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x018f);
		WriteGMII16(0x19, 0x4806);
		WriteGMII16(0x15, 0x0190);
		WriteGMII16(0x19, 0x7c10);
		WriteGMII16(0x15, 0x0191);
		WriteGMII16(0x19, 0x5c10);
		WriteGMII16(0x15, 0x0192);
		WriteGMII16(0x19, 0x40fa);
		WriteGMII16(0x15, 0x0193);
		WriteGMII16(0x19, 0xa602);
		WriteGMII16(0x15, 0x0194);
		WriteGMII16(0x19, 0x4010);
		WriteGMII16(0x15, 0x0195);
		WriteGMII16(0x19, 0x4440);
		WriteGMII16(0x15, 0x0196);
		WriteGMII16(0x19, 0x9d00);
		WriteGMII16(0x15, 0x0197);
		WriteGMII16(0x19, 0x7c80);
		WriteGMII16(0x15, 0x0198);
		WriteGMII16(0x19, 0x6400);
		WriteGMII16(0x15, 0x0199);
		WriteGMII16(0x19, 0x4003);
		WriteGMII16(0x15, 0x019a);
		WriteGMII16(0x19, 0x4540);
		WriteGMII16(0x15, 0x019b);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x019c);
		WriteGMII16(0x19, 0x6008);
		WriteGMII16(0x15, 0x019d);
		WriteGMII16(0x19, 0x9f00);
		WriteGMII16(0x15, 0x019e);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x019f);
		WriteGMII16(0x19, 0x6400);
		WriteGMII16(0x15, 0x01a0);
		WriteGMII16(0x19, 0x7c80);
		WriteGMII16(0x15, 0x01a1);
		WriteGMII16(0x19, 0x6480);
		WriteGMII16(0x15, 0x01a2);
		WriteGMII16(0x19, 0x3140);
		WriteGMII16(0x15, 0x01a3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01a4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01a5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01a6);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x01a7);
		WriteGMII16(0x19, 0x7c0b);
		WriteGMII16(0x15, 0x01a8);
		WriteGMII16(0x19, 0x6c01);
		WriteGMII16(0x15, 0x01a9);
		WriteGMII16(0x19, 0x64a8);
		WriteGMII16(0x15, 0x01aa);
		WriteGMII16(0x19, 0x6800);
		WriteGMII16(0x15, 0x01ab);
		WriteGMII16(0x19, 0x5cf0);
		WriteGMII16(0x15, 0x01ac);
		WriteGMII16(0x19, 0x588f);
		WriteGMII16(0x15, 0x01ad);
		WriteGMII16(0x19, 0xb628);
		WriteGMII16(0x15, 0x01ae);
		WriteGMII16(0x19, 0xc053);
		WriteGMII16(0x15, 0x01af);
		WriteGMII16(0x19, 0x0026);
		WriteGMII16(0x15, 0x01b0);
		WriteGMII16(0x19, 0xc02d);
		WriteGMII16(0x15, 0x01b1);
		WriteGMII16(0x19, 0x0024);
		WriteGMII16(0x15, 0x01b2);
		WriteGMII16(0x19, 0xc603);
		WriteGMII16(0x15, 0x01b3);
		WriteGMII16(0x19, 0x0022);
		WriteGMII16(0x15, 0x01b4);
		WriteGMII16(0x19, 0x8cf9);
		WriteGMII16(0x15, 0x01b5);
		WriteGMII16(0x19, 0x31ba);
		WriteGMII16(0x15, 0x01b6);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01b7);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01b8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01b9);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01ba);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x01bb);
		WriteGMII16(0x19, 0x5420);
		WriteGMII16(0x15, 0x01bc);
		WriteGMII16(0x19, 0x4811);
		WriteGMII16(0x15, 0x01bd);
		WriteGMII16(0x19, 0x5000);
		WriteGMII16(0x15, 0x01be);
		WriteGMII16(0x19, 0x4801);
		WriteGMII16(0x15, 0x01bf);
		WriteGMII16(0x19, 0x6800);
		WriteGMII16(0x15, 0x01c0);
		WriteGMII16(0x19, 0x31f5);
		WriteGMII16(0x15, 0x01c1);
		WriteGMII16(0x19, 0xb614);
		WriteGMII16(0x15, 0x01c2);
		WriteGMII16(0x19, 0x8ce4);
		WriteGMII16(0x15, 0x01c3);
		WriteGMII16(0x19, 0xb30c);
		WriteGMII16(0x15, 0x01c4);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x01c5);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x01c6);
		WriteGMII16(0x19, 0x8206);
		WriteGMII16(0x15, 0x01c7);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x01c8);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x01c9);
		WriteGMII16(0x19, 0x7c04);
		WriteGMII16(0x15, 0x01ca);
		WriteGMII16(0x19, 0x7404);
		WriteGMII16(0x15, 0x01cb);
		WriteGMII16(0x19, 0x31c0);
		WriteGMII16(0x15, 0x01cc);
		WriteGMII16(0x19, 0x7c04);
		WriteGMII16(0x15, 0x01cd);
		WriteGMII16(0x19, 0x7400);
		WriteGMII16(0x15, 0x01ce);
		WriteGMII16(0x19, 0x31c0);
		WriteGMII16(0x15, 0x01cf);
		WriteGMII16(0x19, 0x8df1);
		WriteGMII16(0x15, 0x01d0);
		WriteGMII16(0x19, 0x3248);
		WriteGMII16(0x15, 0x01d1);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01d2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01d3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01d4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01d5);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x01d6);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x01d7);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x01d8);
		WriteGMII16(0x19, 0x7670);
		WriteGMII16(0x15, 0x01d9);
		WriteGMII16(0x19, 0x4023);
		WriteGMII16(0x15, 0x01da);
		WriteGMII16(0x19, 0x4500);
		WriteGMII16(0x15, 0x01db);
		WriteGMII16(0x19, 0x4069);
		WriteGMII16(0x15, 0x01dc);
		WriteGMII16(0x19, 0x4580);
		WriteGMII16(0x15, 0x01dd);
		WriteGMII16(0x19, 0x9f00);
		WriteGMII16(0x15, 0x01de);
		WriteGMII16(0x19, 0xcff5);
		WriteGMII16(0x15, 0x01df);
		WriteGMII16(0x19, 0x00ff);
		WriteGMII16(0x15, 0x01e0);
		WriteGMII16(0x19, 0x76f0);
		WriteGMII16(0x15, 0x01e1);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x01e2);
		WriteGMII16(0x19, 0x4023);
		WriteGMII16(0x15, 0x01e3);
		WriteGMII16(0x19, 0x4500);
		WriteGMII16(0x15, 0x01e4);
		WriteGMII16(0x19, 0x4069);
		WriteGMII16(0x15, 0x01e5);
		WriteGMII16(0x19, 0x4580);
		WriteGMII16(0x15, 0x01e6);
		WriteGMII16(0x19, 0x9f00);
		WriteGMII16(0x15, 0x01e7);
		WriteGMII16(0x19, 0xd0f5);
		WriteGMII16(0x15, 0x01e8);
		WriteGMII16(0x19, 0x00ff);
		WriteGMII16(0x15, 0x01e9);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x01ea);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x01eb);
		WriteGMII16(0x19, 0x6800);
		WriteGMII16(0x15, 0x01ec);
		WriteGMII16(0x19, 0x66a0);
		WriteGMII16(0x15, 0x01ed);
		WriteGMII16(0x19, 0x8300);
		WriteGMII16(0x15, 0x01ee);
		WriteGMII16(0x19, 0x74f0);
		WriteGMII16(0x15, 0x01ef);
		WriteGMII16(0x19, 0x3006);
		WriteGMII16(0x15, 0x01f0);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01f1);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01f2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01f3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01f4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x01f5);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x01f6);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x01f7);
		WriteGMII16(0x19, 0x409d);
		WriteGMII16(0x15, 0x01f8);
		WriteGMII16(0x19, 0x7c87);
		WriteGMII16(0x15, 0x01f9);
		WriteGMII16(0x19, 0xae14);
		WriteGMII16(0x15, 0x01fa);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x01fb);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x01fc);
		WriteGMII16(0x19, 0x6800);
		WriteGMII16(0x15, 0x01fd);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x01fe);
		WriteGMII16(0x19, 0x980e);
		WriteGMII16(0x15, 0x01ff);
		WriteGMII16(0x19, 0x930c);
		WriteGMII16(0x15, 0x0200);
		WriteGMII16(0x19, 0x9206);
		WriteGMII16(0x15, 0x0201);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x0202);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0203);
		WriteGMII16(0x19, 0x588f);
		WriteGMII16(0x15, 0x0204);
		WriteGMII16(0x19, 0x5520);
		WriteGMII16(0x15, 0x0205);
		WriteGMII16(0x19, 0x320c);
		WriteGMII16(0x15, 0x0206);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x15, 0x0207);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0208);
		WriteGMII16(0x19, 0x588d);
		WriteGMII16(0x15, 0x0209);
		WriteGMII16(0x19, 0x5500);
		WriteGMII16(0x15, 0x020a);
		WriteGMII16(0x19, 0x320c);
		WriteGMII16(0x15, 0x020b);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x020c);
		WriteGMII16(0x19, 0x3220);
		WriteGMII16(0x15, 0x020d);
		WriteGMII16(0x19, 0x4480);
		WriteGMII16(0x15, 0x020e);
		WriteGMII16(0x19, 0x9e03);
		WriteGMII16(0x15, 0x020f);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x0210);
		WriteGMII16(0x19, 0x6840);
		WriteGMII16(0x15, 0x0211);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x0212);
		WriteGMII16(0x19, 0x980e);
		WriteGMII16(0x15, 0x0213);
		WriteGMII16(0x19, 0x930c);
		WriteGMII16(0x15, 0x0214);
		WriteGMII16(0x19, 0x9206);
		WriteGMII16(0x15, 0x0215);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x15, 0x0216);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0217);
		WriteGMII16(0x19, 0x588f);
		WriteGMII16(0x15, 0x0218);
		WriteGMII16(0x19, 0x5520);
		WriteGMII16(0x15, 0x0219);
		WriteGMII16(0x19, 0x3220);
		WriteGMII16(0x15, 0x021a);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x021b);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x021c);
		WriteGMII16(0x19, 0x588d);
		WriteGMII16(0x15, 0x021d);
		WriteGMII16(0x19, 0x5540);
		WriteGMII16(0x15, 0x021e);
		WriteGMII16(0x19, 0x3220);
		WriteGMII16(0x15, 0x021f);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x15, 0x0220);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0221);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0222);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0223);
		WriteGMII16(0x19, 0x3231);
		WriteGMII16(0x15, 0x0224);
		WriteGMII16(0x19, 0xab06);
		WriteGMII16(0x15, 0x0225);
		WriteGMII16(0x19, 0xbf08);
		WriteGMII16(0x15, 0x0226);
		WriteGMII16(0x19, 0x4076);
		WriteGMII16(0x15, 0x0227);
		WriteGMII16(0x19, 0x7d07);
		WriteGMII16(0x15, 0x0228);
		WriteGMII16(0x19, 0x4502);
		WriteGMII16(0x15, 0x0229);
		WriteGMII16(0x19, 0x3231);
		WriteGMII16(0x15, 0x022a);
		WriteGMII16(0x19, 0x7d80);
		WriteGMII16(0x15, 0x022b);
		WriteGMII16(0x19, 0x5180);
		WriteGMII16(0x15, 0x022c);
		WriteGMII16(0x19, 0x322f);
		WriteGMII16(0x15, 0x022d);
		WriteGMII16(0x19, 0x7d80);
		WriteGMII16(0x15, 0x022e);
		WriteGMII16(0x19, 0x5000);
		WriteGMII16(0x15, 0x022f);
		WriteGMII16(0x19, 0x7d07);
		WriteGMII16(0x15, 0x0230);
		WriteGMII16(0x19, 0x4402);
		WriteGMII16(0x15, 0x0231);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0232);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x0233);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0234);
		WriteGMII16(0x19, 0xb309);
		WriteGMII16(0x15, 0x0235);
		WriteGMII16(0x19, 0xb204);
		WriteGMII16(0x15, 0x0236);
		WriteGMII16(0x19, 0xb105);
		WriteGMII16(0x15, 0x0237);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0238);
		WriteGMII16(0x19, 0x31c1);
		WriteGMII16(0x15, 0x0239);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x023a);
		WriteGMII16(0x19, 0x3261);
		WriteGMII16(0x15, 0x023b);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x023c);
		WriteGMII16(0x19, 0x3250);
		WriteGMII16(0x15, 0x023d);
		WriteGMII16(0x19, 0xb203);
		WriteGMII16(0x15, 0x023e);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x023f);
		WriteGMII16(0x19, 0x327a);
		WriteGMII16(0x15, 0x0240);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0241);
		WriteGMII16(0x19, 0x3293);
		WriteGMII16(0x15, 0x0242);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0243);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0244);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0245);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0246);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0247);
		WriteGMII16(0x19, 0x32a3);
		WriteGMII16(0x15, 0x0248);
		WriteGMII16(0x19, 0x5520);
		WriteGMII16(0x15, 0x0249);
		WriteGMII16(0x19, 0x403d);
		WriteGMII16(0x15, 0x024a);
		WriteGMII16(0x19, 0x440c);
		WriteGMII16(0x15, 0x024b);
		WriteGMII16(0x19, 0x4812);
		WriteGMII16(0x15, 0x024c);
		WriteGMII16(0x19, 0x5001);
		WriteGMII16(0x15, 0x024d);
		WriteGMII16(0x19, 0x4802);
		WriteGMII16(0x15, 0x024e);
		WriteGMII16(0x19, 0x6880);
		WriteGMII16(0x15, 0x024f);
		WriteGMII16(0x19, 0x31f5);
		WriteGMII16(0x15, 0x0250);
		WriteGMII16(0x19, 0xb685);
		WriteGMII16(0x15, 0x0251);
		WriteGMII16(0x19, 0x801c);
		WriteGMII16(0x15, 0x0252);
		WriteGMII16(0x19, 0xbaf5);
		WriteGMII16(0x15, 0x0253);
		WriteGMII16(0x19, 0xc07c);
		WriteGMII16(0x15, 0x0254);
		WriteGMII16(0x19, 0x00fb);
		WriteGMII16(0x15, 0x0255);
		WriteGMII16(0x19, 0x325a);
		WriteGMII16(0x15, 0x0256);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0257);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0258);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0259);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x025a);
		WriteGMII16(0x19, 0x481a);
		WriteGMII16(0x15, 0x025b);
		WriteGMII16(0x19, 0x5001);
		WriteGMII16(0x15, 0x025c);
		WriteGMII16(0x19, 0x401b);
		WriteGMII16(0x15, 0x025d);
		WriteGMII16(0x19, 0x480a);
		WriteGMII16(0x15, 0x025e);
		WriteGMII16(0x19, 0x4418);
		WriteGMII16(0x15, 0x025f);
		WriteGMII16(0x19, 0x6900);
		WriteGMII16(0x15, 0x0260);
		WriteGMII16(0x19, 0x31f5);
		WriteGMII16(0x15, 0x0261);
		WriteGMII16(0x19, 0xb64b);
		WriteGMII16(0x15, 0x0262);
		WriteGMII16(0x19, 0xdb00);
		WriteGMII16(0x15, 0x0263);
		WriteGMII16(0x19, 0x0048);
		WriteGMII16(0x15, 0x0264);
		WriteGMII16(0x19, 0xdb7d);
		WriteGMII16(0x15, 0x0265);
		WriteGMII16(0x19, 0x0002);
		WriteGMII16(0x15, 0x0266);
		WriteGMII16(0x19, 0xa0fa);
		WriteGMII16(0x15, 0x0267);
		WriteGMII16(0x19, 0x4408);
		WriteGMII16(0x15, 0x0268);
		WriteGMII16(0x19, 0x3248);
		WriteGMII16(0x15, 0x0269);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x026a);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x026b);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x026c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x026d);
		WriteGMII16(0x19, 0xb806);
		WriteGMII16(0x15, 0x026e);
		WriteGMII16(0x19, 0x588d);
		WriteGMII16(0x15, 0x026f);
		WriteGMII16(0x19, 0x5500);
		WriteGMII16(0x15, 0x0270);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x0271);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x0272);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0273);
		WriteGMII16(0x19, 0x4814);
		WriteGMII16(0x15, 0x0274);
		WriteGMII16(0x19, 0x500b);
		WriteGMII16(0x15, 0x0275);
		WriteGMII16(0x19, 0x4804);
		WriteGMII16(0x15, 0x0276);
		WriteGMII16(0x19, 0x40c4);
		WriteGMII16(0x15, 0x0277);
		WriteGMII16(0x19, 0x4425);
		WriteGMII16(0x15, 0x0278);
		WriteGMII16(0x19, 0x6a00);
		WriteGMII16(0x15, 0x0279);
		WriteGMII16(0x19, 0x31f5);
		WriteGMII16(0x15, 0x027a);
		WriteGMII16(0x19, 0xb632);
		WriteGMII16(0x15, 0x027b);
		WriteGMII16(0x19, 0xdc03);
		WriteGMII16(0x15, 0x027c);
		WriteGMII16(0x19, 0x0027);
		WriteGMII16(0x15, 0x027d);
		WriteGMII16(0x19, 0x80fc);
		WriteGMII16(0x15, 0x027e);
		WriteGMII16(0x19, 0x3283);
		WriteGMII16(0x15, 0x027f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0280);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0281);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0282);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0283);
		WriteGMII16(0x19, 0xb806);
		WriteGMII16(0x15, 0x0284);
		WriteGMII16(0x19, 0x588f);
		WriteGMII16(0x15, 0x0285);
		WriteGMII16(0x19, 0x5520);
		WriteGMII16(0x15, 0x0286);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x0287);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x15, 0x0288);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0289);
		WriteGMII16(0x19, 0x4818);
		WriteGMII16(0x15, 0x028a);
		WriteGMII16(0x19, 0x5051);
		WriteGMII16(0x15, 0x028b);
		WriteGMII16(0x19, 0x4808);
		WriteGMII16(0x15, 0x028c);
		WriteGMII16(0x19, 0x4050);
		WriteGMII16(0x15, 0x028d);
		WriteGMII16(0x19, 0x4462);
		WriteGMII16(0x15, 0x028e);
		WriteGMII16(0x19, 0x40c4);
		WriteGMII16(0x15, 0x028f);
		WriteGMII16(0x19, 0x4473);
		WriteGMII16(0x15, 0x0290);
		WriteGMII16(0x19, 0x5041);
		WriteGMII16(0x15, 0x0291);
		WriteGMII16(0x19, 0x6b00);
		WriteGMII16(0x15, 0x0292);
		WriteGMII16(0x19, 0x31f5);
		WriteGMII16(0x15, 0x0293);
		WriteGMII16(0x19, 0xb619);
		WriteGMII16(0x15, 0x0294);
		WriteGMII16(0x19, 0x80d9);
		WriteGMII16(0x15, 0x0295);
		WriteGMII16(0x19, 0xbd06);
		WriteGMII16(0x15, 0x0296);
		WriteGMII16(0x19, 0xbb0d);
		WriteGMII16(0x15, 0x0297);
		WriteGMII16(0x19, 0xaf14);
		WriteGMII16(0x15, 0x0298);
		WriteGMII16(0x19, 0x8efa);
		WriteGMII16(0x15, 0x0299);
		WriteGMII16(0x19, 0x5049);
		WriteGMII16(0x15, 0x029a);
		WriteGMII16(0x19, 0x3248);
		WriteGMII16(0x15, 0x029b);
		WriteGMII16(0x19, 0x4c10);
		WriteGMII16(0x15, 0x029c);
		WriteGMII16(0x19, 0x44b0);
		WriteGMII16(0x15, 0x029d);
		WriteGMII16(0x19, 0x4c00);
		WriteGMII16(0x15, 0x029e);
		WriteGMII16(0x19, 0x3292);
		WriteGMII16(0x15, 0x029f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02a0);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02a1);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02a2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02a3);
		WriteGMII16(0x19, 0x481f);
		WriteGMII16(0x15, 0x02a4);
		WriteGMII16(0x19, 0x5005);
		WriteGMII16(0x15, 0x02a5);
		WriteGMII16(0x19, 0x480f);
		WriteGMII16(0x15, 0x02a6);
		WriteGMII16(0x19, 0xac00);
		WriteGMII16(0x15, 0x02a7);
		WriteGMII16(0x19, 0x31a6);
		WriteGMII16(0x15, 0x02a8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02a9);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02aa);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02ab);
		WriteGMII16(0x19, 0x31ba);
		WriteGMII16(0x15, 0x02ac);
		WriteGMII16(0x19, 0x31d5);
		WriteGMII16(0x15, 0x02ad);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02ae);
		WriteGMII16(0x19, 0x5cf0);
		WriteGMII16(0x15, 0x02af);
		WriteGMII16(0x19, 0x588c);
		WriteGMII16(0x15, 0x02b0);
		WriteGMII16(0x19, 0x542f);
		WriteGMII16(0x15, 0x02b1);
		WriteGMII16(0x19, 0x7ffb);
		WriteGMII16(0x15, 0x02b2);
		WriteGMII16(0x19, 0x6ff8);
		WriteGMII16(0x15, 0x02b3);
		WriteGMII16(0x19, 0x64a4);
		WriteGMII16(0x15, 0x02b4);
		WriteGMII16(0x19, 0x64a0);
		WriteGMII16(0x15, 0x02b5);
		WriteGMII16(0x19, 0x6800);
		WriteGMII16(0x15, 0x02b6);
		WriteGMII16(0x19, 0x4400);
		WriteGMII16(0x15, 0x02b7);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x02b8);
		WriteGMII16(0x19, 0x4480);
		WriteGMII16(0x15, 0x02b9);
		WriteGMII16(0x19, 0x9e00);
		WriteGMII16(0x15, 0x02ba);
		WriteGMII16(0x19, 0x4891);
		WriteGMII16(0x15, 0x02bb);
		WriteGMII16(0x19, 0x4cc0);
		WriteGMII16(0x15, 0x02bc);
		WriteGMII16(0x19, 0x4801);
		WriteGMII16(0x15, 0x02bd);
		WriteGMII16(0x19, 0xa609);
		WriteGMII16(0x15, 0x02be);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x02bf);
		WriteGMII16(0x19, 0x004e);
		WriteGMII16(0x15, 0x02c0);
		WriteGMII16(0x19, 0x87fe);
		WriteGMII16(0x15, 0x02c1);
		WriteGMII16(0x19, 0x32c6);
		WriteGMII16(0x15, 0x02c2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02c3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02c4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02c5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02c6);
		WriteGMII16(0x19, 0x48b2);
		WriteGMII16(0x15, 0x02c7);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x02c8);
		WriteGMII16(0x19, 0x4822);
		WriteGMII16(0x15, 0x02c9);
		WriteGMII16(0x19, 0x4488);
		WriteGMII16(0x15, 0x02ca);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x02cb);
		WriteGMII16(0x19, 0x0042);
		WriteGMII16(0x15, 0x02cc);
		WriteGMII16(0x19, 0x8203);
		WriteGMII16(0x15, 0x02cd);
		WriteGMII16(0x19, 0x4cc8);
		WriteGMII16(0x15, 0x02ce);
		WriteGMII16(0x19, 0x32d0);
		WriteGMII16(0x15, 0x02cf);
		WriteGMII16(0x19, 0x4cc0);
		WriteGMII16(0x15, 0x02d0);
		WriteGMII16(0x19, 0xc4d4);
		WriteGMII16(0x15, 0x02d1);
		WriteGMII16(0x19, 0x00f9);
		WriteGMII16(0x15, 0x02d2);
		WriteGMII16(0x19, 0xa51a);
		WriteGMII16(0x15, 0x02d3);
		WriteGMII16(0x19, 0x32d9);
		WriteGMII16(0x15, 0x02d4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02d5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02d6);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02d7);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02d8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02d9);
		WriteGMII16(0x19, 0x48b3);
		WriteGMII16(0x15, 0x02da);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x02db);
		WriteGMII16(0x19, 0x4823);
		WriteGMII16(0x15, 0x02dc);
		WriteGMII16(0x19, 0x4410);
		WriteGMII16(0x15, 0x02dd);
		WriteGMII16(0x19, 0xb630);
		WriteGMII16(0x15, 0x02de);
		WriteGMII16(0x19, 0x7dc8);
		WriteGMII16(0x15, 0x02df);
		WriteGMII16(0x19, 0x8203);
		WriteGMII16(0x15, 0x02e0);
		WriteGMII16(0x19, 0x4c48);
		WriteGMII16(0x15, 0x02e1);
		WriteGMII16(0x19, 0x32e3);
		WriteGMII16(0x15, 0x02e2);
		WriteGMII16(0x19, 0x4c40);
		WriteGMII16(0x15, 0x02e3);
		WriteGMII16(0x19, 0x9bfa);
		WriteGMII16(0x15, 0x02e4);
		WriteGMII16(0x19, 0x84ca);
		WriteGMII16(0x15, 0x02e5);
		WriteGMII16(0x19, 0x85f8);
		WriteGMII16(0x15, 0x02e6);
		WriteGMII16(0x19, 0x32ec);
		WriteGMII16(0x15, 0x02e7);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02e8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02e9);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02ea);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02eb);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x02ec);
		WriteGMII16(0x19, 0x48d4);
		WriteGMII16(0x15, 0x02ed);
		WriteGMII16(0x19, 0x4020);
		WriteGMII16(0x15, 0x02ee);
		WriteGMII16(0x19, 0x4844);
		WriteGMII16(0x15, 0x02ef);
		WriteGMII16(0x19, 0x4420);
		WriteGMII16(0x15, 0x02f0);
		WriteGMII16(0x19, 0x6800);
		WriteGMII16(0x15, 0x02f1);
		WriteGMII16(0x19, 0x7dc0);
		WriteGMII16(0x15, 0x02f2);
		WriteGMII16(0x19, 0x4c40);
		WriteGMII16(0x15, 0x02f3);
		WriteGMII16(0x19, 0x7c0b);
		WriteGMII16(0x15, 0x02f4);
		WriteGMII16(0x19, 0x6c08);
		WriteGMII16(0x15, 0x02f5);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x02f6);
		WriteGMII16(0x19, 0x9cfd);
		WriteGMII16(0x15, 0x02f7);
		WriteGMII16(0x19, 0xb616);
		WriteGMII16(0x15, 0x02f8);
		WriteGMII16(0x19, 0xc42b);
		WriteGMII16(0x15, 0x02f9);
		WriteGMII16(0x19, 0x00e0);
		WriteGMII16(0x15, 0x02fa);
		WriteGMII16(0x19, 0xc455);
		WriteGMII16(0x15, 0x02fb);
		WriteGMII16(0x19, 0x00b3);
		WriteGMII16(0x15, 0x02fc);
		WriteGMII16(0x19, 0xb20a);
		WriteGMII16(0x15, 0x02fd);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x02fe);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x02ff);
		WriteGMII16(0x19, 0x8204);
		WriteGMII16(0x15, 0x0300);
		WriteGMII16(0x19, 0x7c04);
		WriteGMII16(0x15, 0x0301);
		WriteGMII16(0x19, 0x7404);
		WriteGMII16(0x15, 0x0302);
		WriteGMII16(0x19, 0x32f3);
		WriteGMII16(0x15, 0x0303);
		WriteGMII16(0x19, 0x7c04);
		WriteGMII16(0x15, 0x0304);
		WriteGMII16(0x19, 0x7400);
		WriteGMII16(0x15, 0x0305);
		WriteGMII16(0x19, 0x32f3);
		WriteGMII16(0x15, 0x0306);
		WriteGMII16(0x19, 0xefed);
		WriteGMII16(0x15, 0x0307);
		WriteGMII16(0x19, 0x3342);
		WriteGMII16(0x15, 0x0308);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0309);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x030a);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x030b);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x030c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x030d);
		WriteGMII16(0x19, 0x3006);
		WriteGMII16(0x15, 0x030e);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x030f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0310);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0311);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x0312);
		WriteGMII16(0x19, 0xa207);
		WriteGMII16(0x15, 0x0313);
		WriteGMII16(0x19, 0x4c00);
		WriteGMII16(0x15, 0x0314);
		WriteGMII16(0x19, 0x3322);
		WriteGMII16(0x15, 0x0315);
		WriteGMII16(0x19, 0x4041);
		WriteGMII16(0x15, 0x0316);
		WriteGMII16(0x19, 0x7d07);
		WriteGMII16(0x15, 0x0317);
		WriteGMII16(0x19, 0x4502);
		WriteGMII16(0x15, 0x0318);
		WriteGMII16(0x19, 0x3322);
		WriteGMII16(0x15, 0x0319);
		WriteGMII16(0x19, 0x4c08);
		WriteGMII16(0x15, 0x031a);
		WriteGMII16(0x19, 0x3322);
		WriteGMII16(0x15, 0x031b);
		WriteGMII16(0x19, 0x7d80);
		WriteGMII16(0x15, 0x031c);
		WriteGMII16(0x19, 0x5180);
		WriteGMII16(0x15, 0x031d);
		WriteGMII16(0x19, 0x3320);
		WriteGMII16(0x15, 0x031e);
		WriteGMII16(0x19, 0x7d80);
		WriteGMII16(0x15, 0x031f);
		WriteGMII16(0x19, 0x5000);
		WriteGMII16(0x15, 0x0320);
		WriteGMII16(0x19, 0x7d07);
		WriteGMII16(0x15, 0x0321);
		WriteGMII16(0x19, 0x4402);
		WriteGMII16(0x15, 0x0322);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0323);
		WriteGMII16(0x19, 0x6c02);
		WriteGMII16(0x15, 0x0324);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x0325);
		WriteGMII16(0x19, 0xb30c);
		WriteGMII16(0x15, 0x0326);
		WriteGMII16(0x19, 0xb206);
		WriteGMII16(0x15, 0x0327);
		WriteGMII16(0x19, 0xb103);
		WriteGMII16(0x15, 0x0328);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0329);
		WriteGMII16(0x19, 0x32f6);
		WriteGMII16(0x15, 0x032a);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x032b);
		WriteGMII16(0x19, 0x3352);
		WriteGMII16(0x15, 0x032c);
		WriteGMII16(0x19, 0xb103);
		WriteGMII16(0x15, 0x032d);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x032e);
		WriteGMII16(0x19, 0x336a);
		WriteGMII16(0x15, 0x032f);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0330);
		WriteGMII16(0x19, 0x3382);
		WriteGMII16(0x15, 0x0331);
		WriteGMII16(0x19, 0xb206);
		WriteGMII16(0x15, 0x0332);
		WriteGMII16(0x19, 0xb103);
		WriteGMII16(0x15, 0x0333);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0334);
		WriteGMII16(0x19, 0x3395);
		WriteGMII16(0x15, 0x0335);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0336);
		WriteGMII16(0x19, 0x33c6);
		WriteGMII16(0x15, 0x0337);
		WriteGMII16(0x19, 0xb103);
		WriteGMII16(0x15, 0x0338);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x0339);
		WriteGMII16(0x19, 0x33d7);
		WriteGMII16(0x15, 0x033a);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x033b);
		WriteGMII16(0x19, 0x33f2);
		WriteGMII16(0x15, 0x033c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x033d);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x033e);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x033f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0340);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0341);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0342);
		WriteGMII16(0x19, 0x49b5);
		WriteGMII16(0x15, 0x0343);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x15, 0x0344);
		WriteGMII16(0x19, 0x4d00);
		WriteGMII16(0x15, 0x0345);
		WriteGMII16(0x19, 0x6880);
		WriteGMII16(0x15, 0x0346);
		WriteGMII16(0x19, 0x7c08);
		WriteGMII16(0x15, 0x0347);
		WriteGMII16(0x19, 0x6c08);
		WriteGMII16(0x15, 0x0348);
		WriteGMII16(0x19, 0x4925);
		WriteGMII16(0x15, 0x0349);
		WriteGMII16(0x19, 0x403b);
		WriteGMII16(0x15, 0x034a);
		WriteGMII16(0x19, 0xa602);
		WriteGMII16(0x15, 0x034b);
		WriteGMII16(0x19, 0x402f);
		WriteGMII16(0x15, 0x034c);
		WriteGMII16(0x19, 0x4484);
		WriteGMII16(0x15, 0x034d);
		WriteGMII16(0x19, 0x40c8);
		WriteGMII16(0x15, 0x034e);
		WriteGMII16(0x19, 0x44c4);
		WriteGMII16(0x15, 0x034f);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x0350);
		WriteGMII16(0x19, 0x00bd);
		WriteGMII16(0x15, 0x0351);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x0352);
		WriteGMII16(0x19, 0xc8ed);
		WriteGMII16(0x15, 0x0353);
		WriteGMII16(0x19, 0x00fc);
		WriteGMII16(0x15, 0x0354);
		WriteGMII16(0x19, 0x8221);
		WriteGMII16(0x15, 0x0355);
		WriteGMII16(0x19, 0xd11d);
		WriteGMII16(0x15, 0x0356);
		WriteGMII16(0x19, 0x001f);
		WriteGMII16(0x15, 0x0357);
		WriteGMII16(0x19, 0xde18);
		WriteGMII16(0x15, 0x0358);
		WriteGMII16(0x19, 0x0008);
		WriteGMII16(0x15, 0x0359);
		WriteGMII16(0x19, 0x91f6);
		WriteGMII16(0x15, 0x035a);
		WriteGMII16(0x19, 0x3360);
		WriteGMII16(0x15, 0x035b);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x035c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x035d);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x035e);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x035f);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0360);
		WriteGMII16(0x19, 0x4bb6);
		WriteGMII16(0x15, 0x0361);
		WriteGMII16(0x19, 0x4064);
		WriteGMII16(0x15, 0x0362);
		WriteGMII16(0x19, 0x4b26);
		WriteGMII16(0x15, 0x0363);
		WriteGMII16(0x19, 0x4410);
		WriteGMII16(0x15, 0x0364);
		WriteGMII16(0x19, 0x4006);
		WriteGMII16(0x15, 0x0365);
		WriteGMII16(0x19, 0x4490);
		WriteGMII16(0x15, 0x0366);
		WriteGMII16(0x19, 0x6900);
		WriteGMII16(0x15, 0x0367);
		WriteGMII16(0x19, 0xb6a6);
		WriteGMII16(0x15, 0x0368);
		WriteGMII16(0x19, 0x9e02);
		WriteGMII16(0x15, 0x0369);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x036a);
		WriteGMII16(0x19, 0xd11d);
		WriteGMII16(0x15, 0x036b);
		WriteGMII16(0x19, 0x000a);
		WriteGMII16(0x15, 0x036c);
		WriteGMII16(0x19, 0xbb0f);
		WriteGMII16(0x15, 0x036d);
		WriteGMII16(0x19, 0x8102);
		WriteGMII16(0x15, 0x036e);
		WriteGMII16(0x19, 0x3371);
		WriteGMII16(0x15, 0x036f);
		WriteGMII16(0x19, 0xa21e);
		WriteGMII16(0x15, 0x0370);
		WriteGMII16(0x19, 0x33b6);
		WriteGMII16(0x15, 0x0371);
		WriteGMII16(0x19, 0x91f6);
		WriteGMII16(0x15, 0x0372);
		WriteGMII16(0x19, 0xc218);
		WriteGMII16(0x15, 0x0373);
		WriteGMII16(0x19, 0x00f4);
		WriteGMII16(0x15, 0x0374);
		WriteGMII16(0x19, 0x33b6);
		WriteGMII16(0x15, 0x0375);
		WriteGMII16(0x19, 0x32ec);
		WriteGMII16(0x15, 0x0376);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0377);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0378);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x0379);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x037a);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x037b);
		WriteGMII16(0x19, 0x4b97);
		WriteGMII16(0x15, 0x037c);
		WriteGMII16(0x19, 0x402b);
		WriteGMII16(0x15, 0x037d);
		WriteGMII16(0x19, 0x4b07);
		WriteGMII16(0x15, 0x037e);
		WriteGMII16(0x19, 0x4422);
		WriteGMII16(0x15, 0x037f);
		WriteGMII16(0x19, 0x6980);
		WriteGMII16(0x15, 0x0380);
		WriteGMII16(0x19, 0xb608);
		WriteGMII16(0x15, 0x0381);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x0382);
		WriteGMII16(0x19, 0xbc05);
		WriteGMII16(0x15, 0x0383);
		WriteGMII16(0x19, 0xc21c);
		WriteGMII16(0x15, 0x0384);
		WriteGMII16(0x19, 0x0032);
		WriteGMII16(0x15, 0x0385);
		WriteGMII16(0x19, 0xa1fb);
		WriteGMII16(0x15, 0x0386);
		WriteGMII16(0x19, 0x338d);
		WriteGMII16(0x15, 0x0387);
		WriteGMII16(0x19, 0x32ae);
		WriteGMII16(0x15, 0x0388);
		WriteGMII16(0x19, 0x330d);
		WriteGMII16(0x15, 0x0389);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x038a);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x038b);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x038c);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x038d);
		WriteGMII16(0x19, 0x4b97);
		WriteGMII16(0x15, 0x038e);
		WriteGMII16(0x19, 0x6a08);
		WriteGMII16(0x15, 0x038f);
		WriteGMII16(0x19, 0x4b07);
		WriteGMII16(0x15, 0x0390);
		WriteGMII16(0x19, 0x40ac);
		WriteGMII16(0x15, 0x0391);
		WriteGMII16(0x19, 0x4445);
		WriteGMII16(0x15, 0x0392);
		WriteGMII16(0x19, 0x404e);
		WriteGMII16(0x15, 0x0393);
		WriteGMII16(0x19, 0x4461);
		WriteGMII16(0x15, 0x0394);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x0395);
		WriteGMII16(0x19, 0x9c0a);
		WriteGMII16(0x15, 0x0396);
		WriteGMII16(0x19, 0x63da);
		WriteGMII16(0x15, 0x0397);
		WriteGMII16(0x19, 0x6f0c);
		WriteGMII16(0x15, 0x0398);
		WriteGMII16(0x19, 0x5440);
		WriteGMII16(0x15, 0x0399);
		WriteGMII16(0x19, 0x4b98);
		WriteGMII16(0x15, 0x039a);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x039b);
		WriteGMII16(0x19, 0x4c00);
		WriteGMII16(0x15, 0x039c);
		WriteGMII16(0x19, 0x4b08);
		WriteGMII16(0x15, 0x039d);
		WriteGMII16(0x19, 0x63d8);
		WriteGMII16(0x15, 0x039e);
		WriteGMII16(0x19, 0x33a5);
		WriteGMII16(0x15, 0x039f);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x03a0);
		WriteGMII16(0x19, 0x00e8);
		WriteGMII16(0x15, 0x03a1);
		WriteGMII16(0x19, 0x820e);
		WriteGMII16(0x15, 0x03a2);
		WriteGMII16(0x19, 0xa10d);
		WriteGMII16(0x15, 0x03a3);
		WriteGMII16(0x19, 0x9df1);
		WriteGMII16(0x15, 0x03a4);
		WriteGMII16(0x19, 0x33af);
		WriteGMII16(0x15, 0x03a5);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x03a6);
		WriteGMII16(0x19, 0x00f9);
		WriteGMII16(0x15, 0x03a7);
		WriteGMII16(0x19, 0xc017);
		WriteGMII16(0x15, 0x03a8);
		WriteGMII16(0x19, 0x0007);
		WriteGMII16(0x15, 0x03a9);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x03aa);
		WriteGMII16(0x19, 0x6c03);
		WriteGMII16(0x15, 0x03ab);
		WriteGMII16(0x19, 0xa104);
		WriteGMII16(0x15, 0x03ac);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x03ad);
		WriteGMII16(0x19, 0x6c00);
		WriteGMII16(0x15, 0x03ae);
		WriteGMII16(0x19, 0x9df7);
		WriteGMII16(0x15, 0x03af);
		WriteGMII16(0x19, 0x7c03);
		WriteGMII16(0x15, 0x03b0);
		WriteGMII16(0x19, 0x6c08);
		WriteGMII16(0x15, 0x03b1);
		WriteGMII16(0x19, 0x33b6);
		WriteGMII16(0x15, 0x03b2);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03b3);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03b4);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03b5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03b6);
		WriteGMII16(0x19, 0x55af);
		WriteGMII16(0x15, 0x03b7);
		WriteGMII16(0x19, 0x7ff0);
		WriteGMII16(0x15, 0x03b8);
		WriteGMII16(0x19, 0x6ff0);
		WriteGMII16(0x15, 0x03b9);
		WriteGMII16(0x19, 0x4bb9);
		WriteGMII16(0x15, 0x03ba);
		WriteGMII16(0x19, 0x6a80);
		WriteGMII16(0x15, 0x03bb);
		WriteGMII16(0x19, 0x4b29);
		WriteGMII16(0x15, 0x03bc);
		WriteGMII16(0x19, 0x4041);
		WriteGMII16(0x15, 0x03bd);
		WriteGMII16(0x19, 0x440a);
		WriteGMII16(0x15, 0x03be);
		WriteGMII16(0x19, 0x4029);
		WriteGMII16(0x15, 0x03bf);
		WriteGMII16(0x19, 0x4418);
		WriteGMII16(0x15, 0x03c0);
		WriteGMII16(0x19, 0x4090);
		WriteGMII16(0x15, 0x03c1);
		WriteGMII16(0x19, 0x4438);
		WriteGMII16(0x15, 0x03c2);
		WriteGMII16(0x19, 0x40c4);
		WriteGMII16(0x15, 0x03c3);
		WriteGMII16(0x19, 0x447b);
		WriteGMII16(0x15, 0x03c4);
		WriteGMII16(0x19, 0xb6c4);
		WriteGMII16(0x15, 0x03c5);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x03c6);
		WriteGMII16(0x19, 0x9bfe);
		WriteGMII16(0x15, 0x03c7);
		WriteGMII16(0x19, 0x33cc);
		WriteGMII16(0x15, 0x03c8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03c9);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03ca);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03cb);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03cc);
		WriteGMII16(0x19, 0x542f);
		WriteGMII16(0x15, 0x03cd);
		WriteGMII16(0x19, 0x499a);
		WriteGMII16(0x15, 0x03ce);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x03cf);
		WriteGMII16(0x19, 0x4c40);
		WriteGMII16(0x15, 0x03d0);
		WriteGMII16(0x19, 0x490a);
		WriteGMII16(0x15, 0x03d1);
		WriteGMII16(0x19, 0x405e);
		WriteGMII16(0x15, 0x03d2);
		WriteGMII16(0x19, 0x44f8);
		WriteGMII16(0x15, 0x03d3);
		WriteGMII16(0x19, 0x6b00);
		WriteGMII16(0x15, 0x03d4);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x03d5);
		WriteGMII16(0x19, 0x0028);
		WriteGMII16(0x15, 0x03d6);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x03d7);
		WriteGMII16(0x19, 0xbd27);
		WriteGMII16(0x15, 0x03d8);
		WriteGMII16(0x19, 0x9cfc);
		WriteGMII16(0x15, 0x03d9);
		WriteGMII16(0x19, 0xc639);
		WriteGMII16(0x15, 0x03da);
		WriteGMII16(0x19, 0x000f);
		WriteGMII16(0x15, 0x03db);
		WriteGMII16(0x19, 0x9e03);
		WriteGMII16(0x15, 0x03dc);
		WriteGMII16(0x19, 0x7c01);
		WriteGMII16(0x15, 0x03dd);
		WriteGMII16(0x19, 0x4c01);
		WriteGMII16(0x15, 0x03de);
		WriteGMII16(0x19, 0x9af6);
		WriteGMII16(0x15, 0x03df);
		WriteGMII16(0x19, 0x7c12);
		WriteGMII16(0x15, 0x03e0);
		WriteGMII16(0x19, 0x4c52);
		WriteGMII16(0x15, 0x03e1);
		WriteGMII16(0x19, 0x4470);
		WriteGMII16(0x15, 0x03e2);
		WriteGMII16(0x19, 0x7c12);
		WriteGMII16(0x15, 0x03e3);
		WriteGMII16(0x19, 0x4c40);
		WriteGMII16(0x15, 0x03e4);
		WriteGMII16(0x19, 0x33d4);
		WriteGMII16(0x15, 0x03e5);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03e6);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03e7);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03e8);
		WriteGMII16(0x19, 0x0000);
		WriteGMII16(0x15, 0x03e9);
		WriteGMII16(0x19, 0x49bb);
		WriteGMII16(0x15, 0x03ea);
		WriteGMII16(0x19, 0x4478);
		WriteGMII16(0x15, 0x03eb);
		WriteGMII16(0x19, 0x492b);
		WriteGMII16(0x15, 0x03ec);
		WriteGMII16(0x19, 0x6b80);
		WriteGMII16(0x15, 0x03ed);
		WriteGMII16(0x19, 0x7c01);
		WriteGMII16(0x15, 0x03ee);
		WriteGMII16(0x19, 0x4c00);
		WriteGMII16(0x15, 0x03ef);
		WriteGMII16(0x19, 0xd64f);
		WriteGMII16(0x15, 0x03f0);
		WriteGMII16(0x19, 0x000d);
		WriteGMII16(0x15, 0x03f1);
		WriteGMII16(0x19, 0x3311);
		WriteGMII16(0x15, 0x03f2);
		WriteGMII16(0x19, 0xbd0c);
		WriteGMII16(0x15, 0x03f3);
		WriteGMII16(0x19, 0xc428);
		WriteGMII16(0x15, 0x03f4);
		WriteGMII16(0x19, 0x0008);
		WriteGMII16(0x15, 0x03f5);
		WriteGMII16(0x19, 0x9afa);
		WriteGMII16(0x15, 0x03f6);
		WriteGMII16(0x19, 0x7c12);
		WriteGMII16(0x15, 0x03f7);
		WriteGMII16(0x19, 0x4c52);
		WriteGMII16(0x15, 0x03f8);
		WriteGMII16(0x19, 0x4470);
		WriteGMII16(0x15, 0x03f9);
		WriteGMII16(0x19, 0x7c12);
		WriteGMII16(0x15, 0x03fa);
		WriteGMII16(0x19, 0x4c40);
		WriteGMII16(0x15, 0x03fb);
		WriteGMII16(0x19, 0x33ef);
		WriteGMII16(0x15, 0x03fc);
		WriteGMII16(0x19, 0x3342);
		WriteGMII16(0x15, 0x03fd);
		WriteGMII16(0x19, 0x330d);
		WriteGMII16(0x15, 0x03fe);
		WriteGMII16(0x19, 0x32ae);
		WriteGMII16(0x15, 0x0000);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0300);
		WriteGMII16(0x1f, 0x0002);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x05, 0x8000);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0x48f7);
		WriteGMII16(0x06, 0x00e0);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xa080);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0xf602);
		WriteGMII16(0x06, 0x0112);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x1f02);
		WriteGMII16(0x06, 0x012c);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x3c02);
		WriteGMII16(0x06, 0x0156);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x6d02);
		WriteGMII16(0x06, 0x809d);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x88e1);
		WriteGMII16(0x06, 0x8b89);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8a1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8b);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8c1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8d);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8e1e);
		WriteGMII16(0x06, 0x01a0);
		WriteGMII16(0x06, 0x00c7);
		WriteGMII16(0x06, 0xaebb);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xc702);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd105);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xcd02);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xca02);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd105);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xd002);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd481);
		WriteGMII16(0x06, 0xc9e4);
		WriteGMII16(0x06, 0x8b90);
		WriteGMII16(0x06, 0xe58b);
		WriteGMII16(0x06, 0x91d4);
		WriteGMII16(0x06, 0x81b8);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x92e5);
		WriteGMII16(0x06, 0x8b93);
		WriteGMII16(0x06, 0xbf8b);
		WriteGMII16(0x06, 0x88ec);
		WriteGMII16(0x06, 0x0019);
		WriteGMII16(0x06, 0xa98b);
		WriteGMII16(0x06, 0x90f9);
		WriteGMII16(0x06, 0xeeff);
		WriteGMII16(0x06, 0xf600);
		WriteGMII16(0x06, 0xeeff);
		WriteGMII16(0x06, 0xf7fc);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xc102);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xc402);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x201a);
		WriteGMII16(0x06, 0xf620);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x824b);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0x1902);
		WriteGMII16(0x06, 0x2c9d);
		WriteGMII16(0x06, 0x0203);
		WriteGMII16(0x06, 0x9602);
		WriteGMII16(0x06, 0x0473);
		WriteGMII16(0x06, 0x022e);
		WriteGMII16(0x06, 0x3902);
		WriteGMII16(0x06, 0x044d);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x210b);
		WriteGMII16(0x06, 0xf621);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x0416);
		WriteGMII16(0x06, 0x021b);
		WriteGMII16(0x06, 0xa4e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad22);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x22e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2305);
		WriteGMII16(0x06, 0xf623);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8ee0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad24);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x24e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2505);
		WriteGMII16(0x06, 0xf625);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8ee0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad26);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x26e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0xdae0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x27e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0203);
		WriteGMII16(0x06, 0x5cfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad21);
		WriteGMII16(0x06, 0x57e0);
		WriteGMII16(0x06, 0xe022);
		WriteGMII16(0x06, 0xe1e0);
		WriteGMII16(0x06, 0x2358);
		WriteGMII16(0x06, 0xc059);
		WriteGMII16(0x06, 0x021e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b3c);
		WriteGMII16(0x06, 0x1f10);
		WriteGMII16(0x06, 0x9e44);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x3cad);
		WriteGMII16(0x06, 0x211d);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x84f7);
		WriteGMII16(0x06, 0x29e5);
		WriteGMII16(0x06, 0x8b84);
		WriteGMII16(0x06, 0xac27);
		WriteGMII16(0x06, 0x0dac);
		WriteGMII16(0x06, 0x2605);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0x7fae);
		WriteGMII16(0x06, 0x2b02);
		WriteGMII16(0x06, 0x2c23);
		WriteGMII16(0x06, 0xae26);
		WriteGMII16(0x06, 0x022c);
		WriteGMII16(0x06, 0x41ae);
		WriteGMII16(0x06, 0x21e0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xad22);
		WriteGMII16(0x06, 0x18e0);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0x58fc);
		WriteGMII16(0x06, 0xe4ff);
		WriteGMII16(0x06, 0xf7d1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x2eee);
		WriteGMII16(0x06, 0x0232);
		WriteGMII16(0x06, 0x0ad1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x82e8);
		WriteGMII16(0x06, 0x0232);
		WriteGMII16(0x06, 0x0a02);
		WriteGMII16(0x06, 0x2bdf);
		WriteGMII16(0x06, 0xef96);
		WriteGMII16(0x06, 0xfefc);
		WriteGMII16(0x06, 0x04d0);
		WriteGMII16(0x06, 0x0202);
		WriteGMII16(0x06, 0x1e97);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x2228);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xd302);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd10c);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xd602);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd104);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xd902);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xe802);
		WriteGMII16(0x06, 0x320a);
		WriteGMII16(0x06, 0xe0ff);
		WriteGMII16(0x06, 0xf768);
		WriteGMII16(0x06, 0x03e4);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xd004);
		WriteGMII16(0x06, 0x0228);
		WriteGMII16(0x06, 0x7a04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0xe234);
		WriteGMII16(0x06, 0xe1e2);
		WriteGMII16(0x06, 0x35f6);
		WriteGMII16(0x06, 0x2be4);
		WriteGMII16(0x06, 0xe234);
		WriteGMII16(0x06, 0xe5e2);
		WriteGMII16(0x06, 0x35fc);
		WriteGMII16(0x06, 0x05f8);
		WriteGMII16(0x06, 0xe0e2);
		WriteGMII16(0x06, 0x34e1);
		WriteGMII16(0x06, 0xe235);
		WriteGMII16(0x06, 0xf72b);
		WriteGMII16(0x06, 0xe4e2);
		WriteGMII16(0x06, 0x34e5);
		WriteGMII16(0x06, 0xe235);
		WriteGMII16(0x06, 0xfc05);
		WriteGMII16(0x06, 0xf8f9);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69ac);
		WriteGMII16(0x06, 0x1b4c);
		WriteGMII16(0x06, 0xbf2e);
		WriteGMII16(0x06, 0x3002);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0xef01);
		WriteGMII16(0x06, 0xe28a);
		WriteGMII16(0x06, 0x76e4);
		WriteGMII16(0x06, 0x8a76);
		WriteGMII16(0x06, 0x1f12);
		WriteGMII16(0x06, 0x9e3a);
		WriteGMII16(0x06, 0xef12);
		WriteGMII16(0x06, 0x5907);
		WriteGMII16(0x06, 0x9f12);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b40);
		WriteGMII16(0x06, 0xf721);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x40d0);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0x287a);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0x34fc);
		WriteGMII16(0x06, 0xa000);
		WriteGMII16(0x06, 0x1002);
		WriteGMII16(0x06, 0x2dc3);
		WriteGMII16(0x06, 0x022e);
		WriteGMII16(0x06, 0x21e0);
		WriteGMII16(0x06, 0x8b40);
		WriteGMII16(0x06, 0xf621);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x40ae);
		WriteGMII16(0x06, 0x0fbf);
		WriteGMII16(0x06, 0x3fa5);
		WriteGMII16(0x06, 0x0231);
		WriteGMII16(0x06, 0x6cbf);
		WriteGMII16(0x06, 0x3fa2);
		WriteGMII16(0x06, 0x0231);
		WriteGMII16(0x06, 0x6c02);
		WriteGMII16(0x06, 0x2dc3);
		WriteGMII16(0x06, 0xef96);
		WriteGMII16(0x06, 0xfefd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0xe2f4);
		WriteGMII16(0x06, 0xe1e2);
		WriteGMII16(0x06, 0xf5e4);
		WriteGMII16(0x06, 0x8a78);
		WriteGMII16(0x06, 0xe58a);
		WriteGMII16(0x06, 0x79ee);
		WriteGMII16(0x06, 0xe2f4);
		WriteGMII16(0x06, 0xd8ee);
		WriteGMII16(0x06, 0xe2f5);
		WriteGMII16(0x06, 0x20fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x2065);
		WriteGMII16(0x06, 0xd200);
		WriteGMII16(0x06, 0xbf2e);
		WriteGMII16(0x06, 0xe802);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0x1e21);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xdf02);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0x0c11);
		WriteGMII16(0x06, 0x1e21);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xe202);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0x0c12);
		WriteGMII16(0x06, 0x1e21);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xe502);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0x0c13);
		WriteGMII16(0x06, 0x1e21);
		WriteGMII16(0x06, 0xbf1f);
		WriteGMII16(0x06, 0x5302);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0x0c14);
		WriteGMII16(0x06, 0x1e21);
		WriteGMII16(0x06, 0xbf82);
		WriteGMII16(0x06, 0xeb02);
		WriteGMII16(0x06, 0x31dd);
		WriteGMII16(0x06, 0x0c16);
		WriteGMII16(0x06, 0x1e21);
		WriteGMII16(0x06, 0xe083);
		WriteGMII16(0x06, 0xe01f);
		WriteGMII16(0x06, 0x029e);
		WriteGMII16(0x06, 0x22e6);
		WriteGMII16(0x06, 0x83e0);
		WriteGMII16(0x06, 0xad31);
		WriteGMII16(0x06, 0x14ad);
		WriteGMII16(0x06, 0x3011);
		WriteGMII16(0x06, 0xef02);
		WriteGMII16(0x06, 0x580c);
		WriteGMII16(0x06, 0x9e07);
		WriteGMII16(0x06, 0xad36);
		WriteGMII16(0x06, 0x085a);
		WriteGMII16(0x06, 0x309f);
		WriteGMII16(0x06, 0x04d1);
		WriteGMII16(0x06, 0x01ae);
		WriteGMII16(0x06, 0x02d1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x82dc);
		WriteGMII16(0x06, 0x0232);
		WriteGMII16(0x06, 0x0aef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfdfc);
		WriteGMII16(0x06, 0x0400);
		WriteGMII16(0x06, 0xe140);
		WriteGMII16(0x06, 0x77e1);
		WriteGMII16(0x06, 0x4010);
		WriteGMII16(0x06, 0xe150);
		WriteGMII16(0x06, 0x32e1);
		WriteGMII16(0x06, 0x5030);
		WriteGMII16(0x06, 0xe144);
		WriteGMII16(0x06, 0x74e1);
		WriteGMII16(0x06, 0x44bb);
		WriteGMII16(0x06, 0xe2d2);
		WriteGMII16(0x06, 0x40e0);
		WriteGMII16(0x06, 0x2cfc);
		WriteGMII16(0x06, 0xe2cc);
		WriteGMII16(0x06, 0xcce2);
		WriteGMII16(0x06, 0x00cc);
		WriteGMII16(0x06, 0xe000);
		WriteGMII16(0x06, 0x99e0);
		WriteGMII16(0x06, 0x3688);
		WriteGMII16(0x06, 0xe036);
		WriteGMII16(0x06, 0x99e1);
		WriteGMII16(0x06, 0x40dd);
		WriteGMII16(0x06, 0xe022);
		WriteGMII16(0x05, 0xe142);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x05, 0xe140);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		for (int i = 0; i < 200; i++)
		{
			IODelay(100);
			gphy_val = ReadGMII16(0x00);
			if (gphy_val & BIT_7)
				break;
		}
		WriteGMII16(0x1f, 0x0004);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		gphy_val = ReadGMII16(0x17);
		gphy_val &= ~(BIT_0);
		gphy_val |= BIT_2;
		WriteGMII16(0x17, gphy_val);
		WriteGMII16(0x1f, 0x0002);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B80);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_2 | BIT_1;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1f, 0x0004);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002D);
		gphy_val = ReadGMII16(0x18);
		gphy_val |= BIT_4;
		WriteGMII16(0x18, gphy_val);
		WriteGMII16(0x1f, 0x0002);
		WriteGMII16(0x1f, 0x0000);
		gphy_val = ReadGMII16(0x14);
		gphy_val |= BIT_15;
		WriteGMII16(0x14, gphy_val);
    
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x15, 0x1006);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B86);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0001);
		WriteGMII16(0x0B, 0x6C14);
		WriteGMII16(0x14, 0x7F3D);
		WriteGMII16(0x1C, 0xFAFE);
		WriteGMII16(0x08, 0x07C5);
		WriteGMII16(0x10, 0xF090);
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x14, 0x641A);
		WriteGMII16(0x1A, 0x0606);
		WriteGMII16(0x12, 0xF480);
		WriteGMII16(0x13, 0x0747);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x0078);
		WriteGMII16(0x15, 0xA408);
		WriteGMII16(0x17, 0x5100);
		WriteGMII16(0x19, 0x0008);
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x0D, 0x0207);
		WriteGMII16(0x02, 0x5FD0);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x00A1);
		gphy_val = ReadGMII16(0x1A);
		gphy_val &= ~BIT_2;
		WriteGMII16(0x1A, gphy_val);
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x002D);
		gphy_val = ReadGMII16(0x16);
		gphy_val |= BIT_5;
		WriteGMII16(0x16, gphy_val);
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x00AC);
		WriteGMII16(0x18, 0x0006);
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x09, 0xA20F);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B5B);
		WriteGMII16(0x06, 0x9222);
		WriteGMII16(0x05, 0x8B6D);
		WriteGMII16(0x06, 0x8000);
		WriteGMII16(0x05, 0x8B76);
		WriteGMII16(0x06, 0x8000);
		WriteGMII16(0x1F, 0x0000);

    //Subsystem: Giga-byte Technology Motherboard [1458:e000]
/*		if (pdev->subsystem_vendor == 0x1043 &&
		    pdev->subsystem_device == 0x13F7) {
      
			WriteGMII16(0x1F, 0x0005);
			for (i = 0; i < ARRAY_SIZE(evl_phy_value); i++) {
				WriteGMII16(0x05, evl_phy_value[i]);
				gphy_val = (0xAA << 8) | (ReadGMII16(0x06) & 0xFF);
				WriteGMII16(0x06, gphy_val);
			}
			WriteGMII16(0x1F, 0x0007);
			WriteGMII16(0x1E, 0x0078);
			WriteGMII16(0x17, 0x51AA);
			WriteGMII16(0x1F, 0x0000);
		}
 */   
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8B54);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8B5D);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8A7C);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A7F);
		WriteGMII16(0x06, ReadGMII16(0x06) | BIT_8);
		WriteGMII16(0x05, 0x8A82);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A85);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A88);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B85);
		gphy_val = ReadGMII16(0x06) | BIT_15;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
	} else if (mcfg == MCFG_8168E_VL_2) {
//		struct pci_dev *pdev = tp->pci_dev;

		if (aspm) {
			WriteMMIO8(0x6E, ReadMMIO8(0x6E) | BIT_6);
			WriteERI(0x1AE, 2, 0x0403, ERIAR_ExGMAC);
		} 
    
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x1800);
		gphy_val = ReadGMII16(0x15);
		gphy_val &= ~(BIT_12);
		WriteGMII16(0x15, gphy_val);
		WriteGMII16(0x00, 0x4800);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002f);
		for (int i = 0; i < 1000; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x1c);
			if ((gphy_val & 0x0080) == 0x0080)
				break;
		}
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x1800);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		for (int i = 0; i < 200; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x17);
			if (!(gphy_val & 0x0001))
				break;
		}
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0307);
		WriteGMII16(0x15, 0x00AF);
		WriteGMII16(0x19, 0x4060);
		WriteGMII16(0x15, 0x00B0);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x00B1);
		WriteGMII16(0x19, 0x7e00);
		WriteGMII16(0x15, 0x00B2);
		WriteGMII16(0x19, 0x72B0);
		WriteGMII16(0x15, 0x00B3);
		WriteGMII16(0x19, 0x7F00);
		WriteGMII16(0x15, 0x00B4);
		WriteGMII16(0x19, 0x73B0);
		WriteGMII16(0x15, 0x0101);
		WriteGMII16(0x19, 0x0005);
		WriteGMII16(0x15, 0x0103);
		WriteGMII16(0x19, 0x0003);
		WriteGMII16(0x15, 0x0105);
		WriteGMII16(0x19, 0x30FD);
		WriteGMII16(0x15, 0x0106);
		WriteGMII16(0x19, 0x9DF7);
		WriteGMII16(0x15, 0x0107);
		WriteGMII16(0x19, 0x30C6);
		WriteGMII16(0x15, 0x0098);
		WriteGMII16(0x19, 0x7c0b);
		WriteGMII16(0x15, 0x0099);
		WriteGMII16(0x19, 0x6c0b);
		WriteGMII16(0x15, 0x00eb);
		WriteGMII16(0x19, 0x6c0b);
		WriteGMII16(0x15, 0x00f8);
		WriteGMII16(0x19, 0x6f0b);
		WriteGMII16(0x15, 0x00fe);
		WriteGMII16(0x19, 0x6f0f);
		WriteGMII16(0x15, 0x00db);
		WriteGMII16(0x19, 0x6f09);
		WriteGMII16(0x15, 0x00dc);
		WriteGMII16(0x19, 0xaefd);
		WriteGMII16(0x15, 0x00dd);
		WriteGMII16(0x19, 0x6f0b);
		WriteGMII16(0x15, 0x00de);
		WriteGMII16(0x19, 0xc60b);
		WriteGMII16(0x15, 0x00df);
		WriteGMII16(0x19, 0x00fa);
		WriteGMII16(0x15, 0x00e0);
		WriteGMII16(0x19, 0x30e1);
		WriteGMII16(0x15, 0x020c);
		WriteGMII16(0x19, 0x3224);
		WriteGMII16(0x15, 0x020e);
		WriteGMII16(0x19, 0x9813);
		WriteGMII16(0x15, 0x020f);
		WriteGMII16(0x19, 0x7801);
		WriteGMII16(0x15, 0x0210);
		WriteGMII16(0x19, 0x930f);
		WriteGMII16(0x15, 0x0211);
		WriteGMII16(0x19, 0x9206);
		WriteGMII16(0x15, 0x0212);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x0213);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0214);
		WriteGMII16(0x19, 0x588f);
		WriteGMII16(0x15, 0x0215);
		WriteGMII16(0x19, 0x5520);
		WriteGMII16(0x15, 0x0216);
		WriteGMII16(0x19, 0x3224);
		WriteGMII16(0x15, 0x0217);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x0218);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0219);
		WriteGMII16(0x19, 0x588d);
		WriteGMII16(0x15, 0x021a);
		WriteGMII16(0x19, 0x5540);
		WriteGMII16(0x15, 0x021b);
		WriteGMII16(0x19, 0x9e03);
		WriteGMII16(0x15, 0x021c);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x021d);
		WriteGMII16(0x19, 0x6840);
		WriteGMII16(0x15, 0x021e);
		WriteGMII16(0x19, 0x3224);
		WriteGMII16(0x15, 0x021f);
		WriteGMII16(0x19, 0x4002);
		WriteGMII16(0x15, 0x0220);
		WriteGMII16(0x19, 0x3224);
		WriteGMII16(0x15, 0x0221);
		WriteGMII16(0x19, 0x9e03);
		WriteGMII16(0x15, 0x0222);
		WriteGMII16(0x19, 0x7c40);
		WriteGMII16(0x15, 0x0223);
		WriteGMII16(0x19, 0x6840);
		WriteGMII16(0x15, 0x0224);
		WriteGMII16(0x19, 0x7800);
		WriteGMII16(0x15, 0x0225);
		WriteGMII16(0x19, 0x3231);
		WriteGMII16(0x15, 0x0000);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0300);
		WriteGMII16(0x1f, 0x0002);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x17, 0x2160);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0040);
		WriteGMII16(0x18, 0x0004);
 /*
		if (pdev->subsystem_vendor == 0x144d &&
		    pdev->subsystem_device == 0xc0a6) {
			WriteGMII16(0x18, 0x0724);
			WriteGMII16(0x19, 0xfe00);
			WriteGMII16(0x18, 0x0734);
			WriteGMII16(0x19, 0xfd00);
			WriteGMII16(0x18, 0x1824);
			WriteGMII16(0x19, 0xfc00);
			WriteGMII16(0x18, 0x1834);
			WriteGMII16(0x19, 0xfd00);
		} */
		WriteGMII16(0x18, 0x09d4);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x18, 0x09e4);
		WriteGMII16(0x19, 0x0800);
		WriteGMII16(0x18, 0x09f4);
		WriteGMII16(0x19, 0xff00);
		WriteGMII16(0x18, 0x0a04);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x18, 0x0a14);
		WriteGMII16(0x19, 0x0c00);
		WriteGMII16(0x18, 0x0a24);
		WriteGMII16(0x19, 0xff00);
		WriteGMII16(0x18, 0x0a74);
		WriteGMII16(0x19, 0xf600);
		WriteGMII16(0x18, 0x1a24);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x18, 0x1a64);
		WriteGMII16(0x19, 0x0500);
		WriteGMII16(0x18, 0x1a74);
		WriteGMII16(0x19, 0x9500);
		WriteGMII16(0x18, 0x1a84);
		WriteGMII16(0x19, 0x8000);
		WriteGMII16(0x18, 0x1a94);
		WriteGMII16(0x19, 0x7d00);
		WriteGMII16(0x18, 0x1aa4);
		WriteGMII16(0x19, 0x9600);
		WriteGMII16(0x18, 0x1ac4);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x18, 0x1ad4);
		WriteGMII16(0x19, 0x0800);
		WriteGMII16(0x18, 0x1af4);
		WriteGMII16(0x19, 0xc400);
		WriteGMII16(0x18, 0x1b04);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x18, 0x1b14);
		WriteGMII16(0x19, 0x0800);
		WriteGMII16(0x18, 0x1b24);
		WriteGMII16(0x19, 0xfd00);
		WriteGMII16(0x18, 0x1b34);
		WriteGMII16(0x19, 0x4000);
		WriteGMII16(0x18, 0x1b44);
		WriteGMII16(0x19, 0x0400);
		WriteGMII16(0x18, 0x1b94);
		WriteGMII16(0x19, 0xf100);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x17, 0x2100);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0040);
		WriteGMII16(0x18, 0x0000);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x05, 0x8000);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0x48f7);
		WriteGMII16(0x06, 0x00e0);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xa080);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0xf602);
		WriteGMII16(0x06, 0x0115);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x2202);
		WriteGMII16(0x06, 0x80a0);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x3f02);
		WriteGMII16(0x06, 0x0159);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0xbd02);
		WriteGMII16(0x06, 0x80da);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x88e1);
		WriteGMII16(0x06, 0x8b89);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8a1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8b);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8c1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8d);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8e1e);
		WriteGMII16(0x06, 0x01a0);
		WriteGMII16(0x06, 0x00c7);
		WriteGMII16(0x06, 0xaebb);
		WriteGMII16(0x06, 0xd481);
		WriteGMII16(0x06, 0xd2e4);
		WriteGMII16(0x06, 0x8b92);
		WriteGMII16(0x06, 0xe58b);
		WriteGMII16(0x06, 0x93d1);
		WriteGMII16(0x06, 0x03bf);
		WriteGMII16(0x06, 0x859e);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23d1);
		WriteGMII16(0x06, 0x02bf);
		WriteGMII16(0x06, 0x85a1);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23ee);
		WriteGMII16(0x06, 0x8608);
		WriteGMII16(0x06, 0x03ee);
		WriteGMII16(0x06, 0x860a);
		WriteGMII16(0x06, 0x60ee);
		WriteGMII16(0x06, 0x8610);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0x8611);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0x8abe);
		WriteGMII16(0x06, 0x07ee);
		WriteGMII16(0x06, 0x8abf);
		WriteGMII16(0x06, 0x73ee);
		WriteGMII16(0x06, 0x8a95);
		WriteGMII16(0x06, 0x02bf);
		WriteGMII16(0x06, 0x8b88);
		WriteGMII16(0x06, 0xec00);
		WriteGMII16(0x06, 0x19a9);
		WriteGMII16(0x06, 0x8b90);
		WriteGMII16(0x06, 0xf9ee);
		WriteGMII16(0x06, 0xfff6);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xfed1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x8595);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23d1);
		WriteGMII16(0x06, 0x01bf);
		WriteGMII16(0x06, 0x8598);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x2304);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b8a);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x14ee);
		WriteGMII16(0x06, 0x8b8a);
		WriteGMII16(0x06, 0x0002);
		WriteGMII16(0x06, 0x1f9a);
		WriteGMII16(0x06, 0xe0e4);
		WriteGMII16(0x06, 0x26e1);
		WriteGMII16(0x06, 0xe427);
		WriteGMII16(0x06, 0xeee4);
		WriteGMII16(0x06, 0x2623);
		WriteGMII16(0x06, 0xe5e4);
		WriteGMII16(0x06, 0x27fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8dad);
		WriteGMII16(0x06, 0x2014);
		WriteGMII16(0x06, 0xee8b);
		WriteGMII16(0x06, 0x8d00);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0x5a78);
		WriteGMII16(0x06, 0x039e);
		WriteGMII16(0x06, 0x0902);
		WriteGMII16(0x06, 0x05db);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0x7b02);
		WriteGMII16(0x06, 0x3231);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x1df6);
		WriteGMII16(0x06, 0x20e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0x5c02);
		WriteGMII16(0x06, 0x2bcb);
		WriteGMII16(0x06, 0x022d);
		WriteGMII16(0x06, 0x2902);
		WriteGMII16(0x06, 0x03b4);
		WriteGMII16(0x06, 0x0285);
		WriteGMII16(0x06, 0x6402);
		WriteGMII16(0x06, 0x2eca);
		WriteGMII16(0x06, 0x0284);
		WriteGMII16(0x06, 0xcd02);
		WriteGMII16(0x06, 0x046f);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x210b);
		WriteGMII16(0x06, 0xf621);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x8520);
		WriteGMII16(0x06, 0x021b);
		WriteGMII16(0x06, 0xe8e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad22);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x22e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2308);
		WriteGMII16(0x06, 0xf623);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x311c);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2405);
		WriteGMII16(0x06, 0xf624);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8ee0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad25);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x25e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2608);
		WriteGMII16(0x06, 0xf626);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x2df5);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2705);
		WriteGMII16(0x06, 0xf627);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x037a);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8f9);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69e0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x65d2);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x2fe9);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf61e);
		WriteGMII16(0x06, 0x21bf);
		WriteGMII16(0x06, 0x2ff5);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf60c);
		WriteGMII16(0x06, 0x111e);
		WriteGMII16(0x06, 0x21bf);
		WriteGMII16(0x06, 0x2ff8);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf60c);
		WriteGMII16(0x06, 0x121e);
		WriteGMII16(0x06, 0x21bf);
		WriteGMII16(0x06, 0x2ffb);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf60c);
		WriteGMII16(0x06, 0x131e);
		WriteGMII16(0x06, 0x21bf);
		WriteGMII16(0x06, 0x1f97);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf60c);
		WriteGMII16(0x06, 0x141e);
		WriteGMII16(0x06, 0x21bf);
		WriteGMII16(0x06, 0x859b);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf60c);
		WriteGMII16(0x06, 0x161e);
		WriteGMII16(0x06, 0x21e0);
		WriteGMII16(0x06, 0x8a8c);
		WriteGMII16(0x06, 0x1f02);
		WriteGMII16(0x06, 0x9e22);
		WriteGMII16(0x06, 0xe68a);
		WriteGMII16(0x06, 0x8cad);
		WriteGMII16(0x06, 0x3114);
		WriteGMII16(0x06, 0xad30);
		WriteGMII16(0x06, 0x11ef);
		WriteGMII16(0x06, 0x0258);
		WriteGMII16(0x06, 0x0c9e);
		WriteGMII16(0x06, 0x07ad);
		WriteGMII16(0x06, 0x3608);
		WriteGMII16(0x06, 0x5a30);
		WriteGMII16(0x06, 0x9f04);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xae02);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf2f);
		WriteGMII16(0x06, 0xf202);
		WriteGMII16(0x06, 0x3723);
		WriteGMII16(0x06, 0xef96);
		WriteGMII16(0x06, 0xfefd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8f9);
		WriteGMII16(0x06, 0xface);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69fa);
		WriteGMII16(0x06, 0xd401);
		WriteGMII16(0x06, 0x55b4);
		WriteGMII16(0x06, 0xfebf);
		WriteGMII16(0x06, 0x85a7);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf6ac);
		WriteGMII16(0x06, 0x280b);
		WriteGMII16(0x06, 0xbf85);
		WriteGMII16(0x06, 0xa402);
		WriteGMII16(0x06, 0x36f6);
		WriteGMII16(0x06, 0xac28);
		WriteGMII16(0x06, 0x49ae);
		WriteGMII16(0x06, 0x64bf);
		WriteGMII16(0x06, 0x85a4);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf6ac);
		WriteGMII16(0x06, 0x285b);
		WriteGMII16(0x06, 0xd000);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0x60ac);
		WriteGMII16(0x06, 0x2105);
		WriteGMII16(0x06, 0xac22);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x4ebf);
		WriteGMII16(0x06, 0xe0c4);
		WriteGMII16(0x06, 0xbe86);
		WriteGMII16(0x06, 0x14d2);
		WriteGMII16(0x06, 0x04d8);
		WriteGMII16(0x06, 0x19d9);
		WriteGMII16(0x06, 0x1907);
		WriteGMII16(0x06, 0xdc19);
		WriteGMII16(0x06, 0xdd19);
		WriteGMII16(0x06, 0x0789);
		WriteGMII16(0x06, 0x89ef);
		WriteGMII16(0x06, 0x645e);
		WriteGMII16(0x06, 0x07ff);
		WriteGMII16(0x06, 0x0d65);
		WriteGMII16(0x06, 0x5cf8);
		WriteGMII16(0x06, 0x001e);
		WriteGMII16(0x06, 0x46dc);
		WriteGMII16(0x06, 0x19dd);
		WriteGMII16(0x06, 0x19b2);
		WriteGMII16(0x06, 0xe2d4);
		WriteGMII16(0x06, 0x0001);
		WriteGMII16(0x06, 0xbf85);
		WriteGMII16(0x06, 0xa402);
		WriteGMII16(0x06, 0x3723);
		WriteGMII16(0x06, 0xae1d);
		WriteGMII16(0x06, 0xbee0);
		WriteGMII16(0x06, 0xc4bf);
		WriteGMII16(0x06, 0x8614);
		WriteGMII16(0x06, 0xd204);
		WriteGMII16(0x06, 0xd819);
		WriteGMII16(0x06, 0xd919);
		WriteGMII16(0x06, 0x07dc);
		WriteGMII16(0x06, 0x19dd);
		WriteGMII16(0x06, 0x1907);
		WriteGMII16(0x06, 0xb2f4);
		WriteGMII16(0x06, 0xd400);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x85a4);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23fe);
		WriteGMII16(0x06, 0xef96);
		WriteGMII16(0x06, 0xfec6);
		WriteGMII16(0x06, 0xfefd);
		WriteGMII16(0x06, 0xfc05);
		WriteGMII16(0x06, 0xf9e2);
		WriteGMII16(0x06, 0xe0ea);
		WriteGMII16(0x06, 0xe3e0);
		WriteGMII16(0x06, 0xeb5a);
		WriteGMII16(0x06, 0x070c);
		WriteGMII16(0x06, 0x031e);
		WriteGMII16(0x06, 0x20e6);
		WriteGMII16(0x06, 0xe0ea);
		WriteGMII16(0x06, 0xe7e0);
		WriteGMII16(0x06, 0xebe0);
		WriteGMII16(0x06, 0xe0fc);
		WriteGMII16(0x06, 0xe1e0);
		WriteGMII16(0x06, 0xfdfd);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9e0);
		WriteGMII16(0x06, 0x8b81);
		WriteGMII16(0x06, 0xac26);
		WriteGMII16(0x06, 0x1ae0);
		WriteGMII16(0x06, 0x8b81);
		WriteGMII16(0x06, 0xac21);
		WriteGMII16(0x06, 0x14e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xac20);
		WriteGMII16(0x06, 0x0ee0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xac23);
		WriteGMII16(0x06, 0x08e0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xac24);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x3802);
		WriteGMII16(0x06, 0x1ab5);
		WriteGMII16(0x06, 0xeee4);
		WriteGMII16(0x06, 0x1c04);
		WriteGMII16(0x06, 0xeee4);
		WriteGMII16(0x06, 0x1d04);
		WriteGMII16(0x06, 0xe2e0);
		WriteGMII16(0x06, 0x7ce3);
		WriteGMII16(0x06, 0xe07d);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x38e1);
		WriteGMII16(0x06, 0xe039);
		WriteGMII16(0x06, 0xad2e);
		WriteGMII16(0x06, 0x1bad);
		WriteGMII16(0x06, 0x390d);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xbf21);
		WriteGMII16(0x06, 0xd502);
		WriteGMII16(0x06, 0x3723);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0xd8ae);
		WriteGMII16(0x06, 0x0bac);
		WriteGMII16(0x06, 0x3802);
		WriteGMII16(0x06, 0xae06);
		WriteGMII16(0x06, 0x0283);
		WriteGMII16(0x06, 0x1802);
		WriteGMII16(0x06, 0x8360);
		WriteGMII16(0x06, 0x021a);
		WriteGMII16(0x06, 0xc6fd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e1);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2605);
		WriteGMII16(0x06, 0x0222);
		WriteGMII16(0x06, 0xa4f7);
		WriteGMII16(0x06, 0x28e0);
		WriteGMII16(0x06, 0x8b81);
		WriteGMII16(0x06, 0xad21);
		WriteGMII16(0x06, 0x0502);
		WriteGMII16(0x06, 0x23a9);
		WriteGMII16(0x06, 0xf729);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2005);
		WriteGMII16(0x06, 0x0214);
		WriteGMII16(0x06, 0xabf7);
		WriteGMII16(0x06, 0x2ae0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad23);
		WriteGMII16(0x06, 0x0502);
		WriteGMII16(0x06, 0x12e7);
		WriteGMII16(0x06, 0xf72b);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x2405);
		WriteGMII16(0x06, 0x0283);
		WriteGMII16(0x06, 0xbcf7);
		WriteGMII16(0x06, 0x2ce5);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b81);
		WriteGMII16(0x06, 0xad26);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0x21e5);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2109);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xf4ac);
		WriteGMII16(0x06, 0x2003);
		WriteGMII16(0x06, 0x0223);
		WriteGMII16(0x06, 0x98e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x09e0);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xac21);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0x13fb);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2309);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xf4ac);
		WriteGMII16(0x06, 0x2203);
		WriteGMII16(0x06, 0x0212);
		WriteGMII16(0x06, 0xfae0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xad24);
		WriteGMII16(0x06, 0x09e0);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xac23);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0x83c1);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e1);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2608);
		WriteGMII16(0x06, 0xe083);
		WriteGMII16(0x06, 0xd2ad);
		WriteGMII16(0x06, 0x2502);
		WriteGMII16(0x06, 0xf628);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x210a);
		WriteGMII16(0x06, 0xe084);
		WriteGMII16(0x06, 0x0af6);
		WriteGMII16(0x06, 0x27a0);
		WriteGMII16(0x06, 0x0502);
		WriteGMII16(0x06, 0xf629);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2008);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xe8ad);
		WriteGMII16(0x06, 0x2102);
		WriteGMII16(0x06, 0xf62a);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2308);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x20a0);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0xf62b);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x2408);
		WriteGMII16(0x06, 0xe086);
		WriteGMII16(0x06, 0x02a0);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0xf62c);
		WriteGMII16(0x06, 0xe58a);
		WriteGMII16(0x06, 0xf4a1);
		WriteGMII16(0x06, 0x0008);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf21);
		WriteGMII16(0x06, 0xd502);
		WriteGMII16(0x06, 0x3723);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xee86);
		WriteGMII16(0x06, 0x0200);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x241e);
		WriteGMII16(0x06, 0xe086);
		WriteGMII16(0x06, 0x02a0);
		WriteGMII16(0x06, 0x0005);
		WriteGMII16(0x06, 0x0283);
		WriteGMII16(0x06, 0xe8ae);
		WriteGMII16(0x06, 0xf5a0);
		WriteGMII16(0x06, 0x0105);
		WriteGMII16(0x06, 0x0283);
		WriteGMII16(0x06, 0xf8ae);
		WriteGMII16(0x06, 0x0ba0);
		WriteGMII16(0x06, 0x0205);
		WriteGMII16(0x06, 0x0284);
		WriteGMII16(0x06, 0x14ae);
		WriteGMII16(0x06, 0x03a0);
		WriteGMII16(0x06, 0x0300);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0x0284);
		WriteGMII16(0x06, 0x2bee);
		WriteGMII16(0x06, 0x8602);
		WriteGMII16(0x06, 0x01ef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8ee);
		WriteGMII16(0x06, 0x8609);
		WriteGMII16(0x06, 0x0002);
		WriteGMII16(0x06, 0x8461);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xae10);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8608);
		WriteGMII16(0x06, 0xe186);
		WriteGMII16(0x06, 0x091f);
		WriteGMII16(0x06, 0x019e);
		WriteGMII16(0x06, 0x0611);
		WriteGMII16(0x06, 0xe586);
		WriteGMII16(0x06, 0x09ae);
		WriteGMII16(0x06, 0x04ee);
		WriteGMII16(0x06, 0x8602);
		WriteGMII16(0x06, 0x01fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xfbbf);
		WriteGMII16(0x06, 0x8604);
		WriteGMII16(0x06, 0xef79);
		WriteGMII16(0x06, 0xd200);
		WriteGMII16(0x06, 0xd400);
		WriteGMII16(0x06, 0x221e);
		WriteGMII16(0x06, 0x02bf);
		WriteGMII16(0x06, 0x2fec);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23bf);
		WriteGMII16(0x06, 0x13f2);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf60d);
		WriteGMII16(0x06, 0x4559);
		WriteGMII16(0x06, 0x1fef);
		WriteGMII16(0x06, 0x97dd);
		WriteGMII16(0x06, 0xd308);
		WriteGMII16(0x06, 0x1a93);
		WriteGMII16(0x06, 0xdd12);
		WriteGMII16(0x06, 0x17a2);
		WriteGMII16(0x06, 0x04de);
		WriteGMII16(0x06, 0xffef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfdfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xfbee);
		WriteGMII16(0x06, 0x8602);
		WriteGMII16(0x06, 0x03d5);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x06, 0xbf86);
		WriteGMII16(0x06, 0x04ef);
		WriteGMII16(0x06, 0x79ef);
		WriteGMII16(0x06, 0x45bf);
		WriteGMII16(0x06, 0x2fec);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23bf);
		WriteGMII16(0x06, 0x13f2);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf6ad);
		WriteGMII16(0x06, 0x2702);
		WriteGMII16(0x06, 0x78ff);
		WriteGMII16(0x06, 0xe186);
		WriteGMII16(0x06, 0x0a1b);
		WriteGMII16(0x06, 0x01aa);
		WriteGMII16(0x06, 0x2eef);
		WriteGMII16(0x06, 0x97d9);
		WriteGMII16(0x06, 0x7900);
		WriteGMII16(0x06, 0x9e2b);
		WriteGMII16(0x06, 0x81dd);
		WriteGMII16(0x06, 0xbf85);
		WriteGMII16(0x06, 0xad02);
		WriteGMII16(0x06, 0x3723);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xef02);
		WriteGMII16(0x06, 0x100c);
		WriteGMII16(0x06, 0x11b0);
		WriteGMII16(0x06, 0xfc0d);
		WriteGMII16(0x06, 0x11bf);
		WriteGMII16(0x06, 0x85aa);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23d1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x85aa);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x23ee);
		WriteGMII16(0x06, 0x8602);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x0413);
		WriteGMII16(0x06, 0xa38b);
		WriteGMII16(0x06, 0xb4d3);
		WriteGMII16(0x06, 0x8012);
		WriteGMII16(0x06, 0x17a2);
		WriteGMII16(0x06, 0x04ad);
		WriteGMII16(0x06, 0xffef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfdfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad25);
		WriteGMII16(0x06, 0x48e0);
		WriteGMII16(0x06, 0x8a96);
		WriteGMII16(0x06, 0xe18a);
		WriteGMII16(0x06, 0x977c);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x9e35);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x9600);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x9700);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xbee1);
		WriteGMII16(0x06, 0x8abf);
		WriteGMII16(0x06, 0xe286);
		WriteGMII16(0x06, 0x10e3);
		WriteGMII16(0x06, 0x8611);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0x1aad);
		WriteGMII16(0x06, 0x2012);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x9603);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x97b7);
		WriteGMII16(0x06, 0xee86);
		WriteGMII16(0x06, 0x1000);
		WriteGMII16(0x06, 0xee86);
		WriteGMII16(0x06, 0x1100);
		WriteGMII16(0x06, 0xae11);
		WriteGMII16(0x06, 0x15e6);
		WriteGMII16(0x06, 0x8610);
		WriteGMII16(0x06, 0xe786);
		WriteGMII16(0x06, 0x11ae);
		WriteGMII16(0x06, 0x08ee);
		WriteGMII16(0x06, 0x8610);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0x8611);
		WriteGMII16(0x06, 0x00fd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x00e1);
		WriteGMII16(0x06, 0xe001);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x32e0);
		WriteGMII16(0x06, 0x8b40);
		WriteGMII16(0x06, 0xf720);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x40bf);
		WriteGMII16(0x06, 0x31f5);
		WriteGMII16(0x06, 0x0236);
		WriteGMII16(0x06, 0xf6ad);
		WriteGMII16(0x06, 0x2821);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x20e1);
		WriteGMII16(0x06, 0xe021);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x18e0);
		WriteGMII16(0x06, 0x8b40);
		WriteGMII16(0x06, 0xf620);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x40ee);
		WriteGMII16(0x06, 0x8b3b);
		WriteGMII16(0x06, 0xffe0);
		WriteGMII16(0x06, 0x8a8a);
		WriteGMII16(0x06, 0xe18a);
		WriteGMII16(0x06, 0x8be4);
		WriteGMII16(0x06, 0xe000);
		WriteGMII16(0x06, 0xe5e0);
		WriteGMII16(0x06, 0x01ef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x80ad);
		WriteGMII16(0x06, 0x2722);
		WriteGMII16(0x06, 0xbf44);
		WriteGMII16(0x06, 0xfc02);
		WriteGMII16(0x06, 0x36f6);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x441f);
		WriteGMII16(0x06, 0x019e);
		WriteGMII16(0x06, 0x15e5);
		WriteGMII16(0x06, 0x8b44);
		WriteGMII16(0x06, 0xad29);
		WriteGMII16(0x06, 0x07ac);
		WriteGMII16(0x06, 0x2804);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xae02);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf85);
		WriteGMII16(0x06, 0xb002);
		WriteGMII16(0x06, 0x3723);
		WriteGMII16(0x06, 0xef96);
		WriteGMII16(0x06, 0xfefc);
		WriteGMII16(0x06, 0x0400);
		WriteGMII16(0x06, 0xe140);
		WriteGMII16(0x06, 0x77e1);
		WriteGMII16(0x06, 0x40dd);
		WriteGMII16(0x06, 0xe022);
		WriteGMII16(0x06, 0x32e1);
		WriteGMII16(0x06, 0x5074);
		WriteGMII16(0x06, 0xe144);
		WriteGMII16(0x06, 0xffe0);
		WriteGMII16(0x06, 0xdaff);
		WriteGMII16(0x06, 0xe0c0);
		WriteGMII16(0x06, 0x52e0);
		WriteGMII16(0x06, 0xeed9);
		WriteGMII16(0x06, 0xe04c);
		WriteGMII16(0x06, 0xbbe0);
		WriteGMII16(0x06, 0x2a00);
		WriteGMII16(0x05, 0xe142);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x05, 0xe140);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		for (int i = 0; i < 200; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x00);
			if (gphy_val & BIT_7)
				break;
		}
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0042);
		WriteGMII16(0x18, 0x2300);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
    /*
		if ((pdev->subsystem_vendor == 0x144d &&
		     pdev->subsystem_device == 0xc098) ||
		    (pdev->subsystem_vendor == 0x144d &&
		     pdev->subsystem_device == 0xc0b1)) {
          gphy_val = ReadGMII16(0x17);
          gphy_val &= ~BIT_2;
          WriteGMII16(0x17, gphy_val);
        }
     */
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x9200);
 
/*		if (subsystem_vendor == 0x144d &&
		    subsystem_device == 0xc0a6) {
			WriteGMII16(0x1F, 0x0001);
			WriteGMII16(0x0e, 0x6b7f);
			WriteGMII16(0x1f, 0x0000);
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8B86);
			gphy_val = ReadGMII16(0x06);
			gphy_val |= BIT_4;
			WriteGMII16(0x06, gphy_val);
			WriteGMII16(0x1f, 0x0000);
		} else */
    {
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8B80);
			gphy_val = ReadGMII16(0x06);
			gphy_val |= BIT_2 | BIT_1;
			WriteGMII16(0x06, gphy_val);
			WriteGMII16(0x1f, 0x0000);
      
			WriteGMII16(0x1F, 0x0005);
			WriteGMII16(0x05, 0x8B86);
			gphy_val = ReadGMII16(0x06);
			gphy_val &= ~BIT_4;
			WriteGMII16(0x06, gphy_val);
			WriteGMII16(0x1f, 0x0000);
		}
    
		WriteGMII16(0x1f, 0x0004);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002D);
		gphy_val = ReadGMII16(0x18);
		gphy_val |= BIT_4;
		WriteGMII16(0x18, gphy_val);
		WriteGMII16(0x1f, 0x0002);
		WriteGMII16(0x1f, 0x0000);
		gphy_val = ReadGMII16(0x14);
		gphy_val |= BIT_15;
		WriteGMII16(0x14, gphy_val);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B86);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0004);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x00AC);
		WriteGMII16(0x18, 0x0006);
		WriteGMII16(0x1F, 0x0002);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x09, 0xA20F);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B85);
		gphy_val = ReadGMII16(0x06) | BIT_14 | BIT_15;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B5B);
		WriteGMII16(0x06, 0x9222);
		WriteGMII16(0x05, 0x8B6D);
		WriteGMII16(0x06, 0x8000);
		WriteGMII16(0x05, 0x8B76);
		WriteGMII16(0x06, 0x8000);
		WriteGMII16(0x1F, 0x0000);
/*
		if (pdev->subsystem_vendor == 0x1043 &&
		    pdev->subsystem_device == 0x13F7) {
      
			WriteGMII16(0x1F, 0x0005);
			for (i = 0; i < ARRAY_SIZE(evl_phy_value); i++) {
				WriteGMII16(0x05, evl_phy_value[i]);
				gphy_val = (0xAA << 8) | (ReadGMII16(0x06) & 0xFF);
				WriteGMII16(0x06, gphy_val);
			}
			WriteGMII16(0x1F, 0x0007);
			WriteGMII16(0x1E, 0x0078);
			WriteGMII16(0x17, 0x51AA);
			WriteGMII16(0x1F, 0x0000);
		}
*/    
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8B54);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8B5D);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8A7C);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A7F);
		WriteGMII16(0x06, ReadGMII16(0x06) | BIT_8);
		WriteGMII16(0x05, 0x8A82);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A85);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A88);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x1f, 0x0000);
    
		if (aspm) {
			WriteGMII16(0x1f, 0x0000);
			gphy_val = ReadGMII16(0x15);
			gphy_val |= BIT_12;
			WriteGMII16(0x15, gphy_val);
		} 
	}
}

void RealtekR1000::RTL8168FHwPhyConfig()
{
  u32 gphy_val;
  if (mcfg == MCFG_8168F_1) {
		if (aspm) {
			WriteMMIO8(0x6E, ReadMMIO8(0x6E) | BIT_6);
			WriteERI(0x1AE, 2, 0x0403, ERIAR_ExGMAC);
		}
    
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x1800);
		gphy_val = ReadGMII16(0x15);
		gphy_val &= ~(BIT_12);
		WriteGMII16(0x15, gphy_val);
		WriteGMII16(0x00, 0x4800);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002f);
		for (int i = 0; i < 1000; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x1c);
			if (gphy_val & 0x0080)
				break;
		}
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x1800);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		for (int i = 0; i < 200; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x18);
			if (!(gphy_val & 0x0001))
				break;
		}
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0307);
		WriteGMII16(0x15, 0x0194);
		WriteGMII16(0x19, 0x407D);
		WriteGMII16(0x15, 0x0098);
		WriteGMII16(0x19, 0x7c0b);
		WriteGMII16(0x15, 0x0099);
		WriteGMII16(0x19, 0x6c0b);
		WriteGMII16(0x15, 0x00eb);
		WriteGMII16(0x19, 0x6c0b);
		WriteGMII16(0x15, 0x00f8);
		WriteGMII16(0x19, 0x6f0b);
		WriteGMII16(0x15, 0x00fe);
		WriteGMII16(0x19, 0x6f0f);
		WriteGMII16(0x15, 0x00db);
		WriteGMII16(0x19, 0x6f09);
		WriteGMII16(0x15, 0x00dc);
		WriteGMII16(0x19, 0xaefd);
		WriteGMII16(0x15, 0x00dd);
		WriteGMII16(0x19, 0x6f0b);
		WriteGMII16(0x15, 0x00de);
		WriteGMII16(0x19, 0xc60b);
		WriteGMII16(0x15, 0x00df);
		WriteGMII16(0x19, 0x00fa);
		WriteGMII16(0x15, 0x00e0);
		WriteGMII16(0x19, 0x30e1);
		WriteGMII16(0x15, 0x0000);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0300);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x05, 0x8000);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0x48f7);
		WriteGMII16(0x06, 0x00e0);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xa080);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0xf602);
		WriteGMII16(0x06, 0x0118);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x2502);
		WriteGMII16(0x06, 0x8090);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x4202);
		WriteGMII16(0x06, 0x015c);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0xad02);
		WriteGMII16(0x06, 0x80ca);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x88e1);
		WriteGMII16(0x06, 0x8b89);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8a1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8b);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8c1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8d);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8e1e);
		WriteGMII16(0x06, 0x01a0);
		WriteGMII16(0x06, 0x00c7);
		WriteGMII16(0x06, 0xaebb);
		WriteGMII16(0x06, 0xd484);
		WriteGMII16(0x06, 0x3ce4);
		WriteGMII16(0x06, 0x8b92);
		WriteGMII16(0x06, 0xe58b);
		WriteGMII16(0x06, 0x93ee);
		WriteGMII16(0x06, 0x8ac8);
		WriteGMII16(0x06, 0x03ee);
		WriteGMII16(0x06, 0x8aca);
		WriteGMII16(0x06, 0x60ee);
		WriteGMII16(0x06, 0x8ac0);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0x8ac1);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0x8abe);
		WriteGMII16(0x06, 0x07ee);
		WriteGMII16(0x06, 0x8abf);
		WriteGMII16(0x06, 0x73ee);
		WriteGMII16(0x06, 0x8a95);
		WriteGMII16(0x06, 0x02bf);
		WriteGMII16(0x06, 0x8b88);
		WriteGMII16(0x06, 0xec00);
		WriteGMII16(0x06, 0x19a9);
		WriteGMII16(0x06, 0x8b90);
		WriteGMII16(0x06, 0xf9ee);
		WriteGMII16(0x06, 0xfff6);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xfed1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x85a4);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7dd1);
		WriteGMII16(0x06, 0x01bf);
		WriteGMII16(0x06, 0x85a7);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7d04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b8a);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x14ee);
		WriteGMII16(0x06, 0x8b8a);
		WriteGMII16(0x06, 0x0002);
		WriteGMII16(0x06, 0x204b);
		WriteGMII16(0x06, 0xe0e4);
		WriteGMII16(0x06, 0x26e1);
		WriteGMII16(0x06, 0xe427);
		WriteGMII16(0x06, 0xeee4);
		WriteGMII16(0x06, 0x2623);
		WriteGMII16(0x06, 0xe5e4);
		WriteGMII16(0x06, 0x27fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8dad);
		WriteGMII16(0x06, 0x2014);
		WriteGMII16(0x06, 0xee8b);
		WriteGMII16(0x06, 0x8d00);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0x5a78);
		WriteGMII16(0x06, 0x039e);
		WriteGMII16(0x06, 0x0902);
		WriteGMII16(0x06, 0x05e8);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0x4f02);
		WriteGMII16(0x06, 0x326c);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x1df6);
		WriteGMII16(0x06, 0x20e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x022f);
		WriteGMII16(0x06, 0x0902);
		WriteGMII16(0x06, 0x2ab0);
		WriteGMII16(0x06, 0x0285);
		WriteGMII16(0x06, 0x1602);
		WriteGMII16(0x06, 0x03ba);
		WriteGMII16(0x06, 0x0284);
		WriteGMII16(0x06, 0xe502);
		WriteGMII16(0x06, 0x2df1);
		WriteGMII16(0x06, 0x0283);
		WriteGMII16(0x06, 0x8302);
		WriteGMII16(0x06, 0x0475);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x210b);
		WriteGMII16(0x06, 0xf621);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x83f8);
		WriteGMII16(0x06, 0x021c);
		WriteGMII16(0x06, 0x99e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad22);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x22e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0235);
		WriteGMII16(0x06, 0x63e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad23);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x23e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0231);
		WriteGMII16(0x06, 0x57e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad24);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x24e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2505);
		WriteGMII16(0x06, 0xf625);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8ee0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad26);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x26e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x022d);
		WriteGMII16(0x06, 0x1ce0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x27e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0203);
		WriteGMII16(0x06, 0x80fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9e0);
		WriteGMII16(0x06, 0x8b81);
		WriteGMII16(0x06, 0xac26);
		WriteGMII16(0x06, 0x1ae0);
		WriteGMII16(0x06, 0x8b81);
		WriteGMII16(0x06, 0xac21);
		WriteGMII16(0x06, 0x14e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xac20);
		WriteGMII16(0x06, 0x0ee0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xac23);
		WriteGMII16(0x06, 0x08e0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xac24);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x3802);
		WriteGMII16(0x06, 0x1ac2);
		WriteGMII16(0x06, 0xeee4);
		WriteGMII16(0x06, 0x1c04);
		WriteGMII16(0x06, 0xeee4);
		WriteGMII16(0x06, 0x1d04);
		WriteGMII16(0x06, 0xe2e0);
		WriteGMII16(0x06, 0x7ce3);
		WriteGMII16(0x06, 0xe07d);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x38e1);
		WriteGMII16(0x06, 0xe039);
		WriteGMII16(0x06, 0xad2e);
		WriteGMII16(0x06, 0x1bad);
		WriteGMII16(0x06, 0x390d);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xbf22);
		WriteGMII16(0x06, 0x7a02);
		WriteGMII16(0x06, 0x387d);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0xacae);
		WriteGMII16(0x06, 0x0bac);
		WriteGMII16(0x06, 0x3802);
		WriteGMII16(0x06, 0xae06);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0xe902);
		WriteGMII16(0x06, 0x822e);
		WriteGMII16(0x06, 0x021a);
		WriteGMII16(0x06, 0xd3fd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e1);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2602);
		WriteGMII16(0x06, 0xf728);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2105);
		WriteGMII16(0x06, 0x0222);
		WriteGMII16(0x06, 0x8ef7);
		WriteGMII16(0x06, 0x29e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x0502);
		WriteGMII16(0x06, 0x14b8);
		WriteGMII16(0x06, 0xf72a);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2305);
		WriteGMII16(0x06, 0x0212);
		WriteGMII16(0x06, 0xf4f7);
		WriteGMII16(0x06, 0x2be0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xad24);
		WriteGMII16(0x06, 0x0502);
		WriteGMII16(0x06, 0x8284);
		WriteGMII16(0x06, 0xf72c);
		WriteGMII16(0x06, 0xe58a);
		WriteGMII16(0x06, 0xf4fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2600);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2109);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xf4ac);
		WriteGMII16(0x06, 0x2003);
		WriteGMII16(0x06, 0x0222);
		WriteGMII16(0x06, 0x7de0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x09e0);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xac21);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0x1408);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2309);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xf4ac);
		WriteGMII16(0x06, 0x2203);
		WriteGMII16(0x06, 0x0213);
		WriteGMII16(0x06, 0x07e0);
		WriteGMII16(0x06, 0x8b87);
		WriteGMII16(0x06, 0xad24);
		WriteGMII16(0x06, 0x09e0);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xac23);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0x8289);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e1);
		WriteGMII16(0x06, 0x8af4);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x2602);
		WriteGMII16(0x06, 0xf628);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ad);
		WriteGMII16(0x06, 0x210a);
		WriteGMII16(0x06, 0xe083);
		WriteGMII16(0x06, 0xecf6);
		WriteGMII16(0x06, 0x27a0);
		WriteGMII16(0x06, 0x0502);
		WriteGMII16(0x06, 0xf629);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2008);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xe8ad);
		WriteGMII16(0x06, 0x2102);
		WriteGMII16(0x06, 0xf62a);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ad);
		WriteGMII16(0x06, 0x2308);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x20a0);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0xf62b);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x2408);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xc2a0);
		WriteGMII16(0x06, 0x0302);
		WriteGMII16(0x06, 0xf62c);
		WriteGMII16(0x06, 0xe58a);
		WriteGMII16(0x06, 0xf4a1);
		WriteGMII16(0x06, 0x0008);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf22);
		WriteGMII16(0x06, 0x7a02);
		WriteGMII16(0x06, 0x387d);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0xc200);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ad);
		WriteGMII16(0x06, 0x241e);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xc2a0);
		WriteGMII16(0x06, 0x0005);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0xb0ae);
		WriteGMII16(0x06, 0xf5a0);
		WriteGMII16(0x06, 0x0105);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0xc0ae);
		WriteGMII16(0x06, 0x0ba0);
		WriteGMII16(0x06, 0x0205);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0xcaae);
		WriteGMII16(0x06, 0x03a0);
		WriteGMII16(0x06, 0x0300);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0x0282);
		WriteGMII16(0x06, 0xe1ee);
		WriteGMII16(0x06, 0x8ac2);
		WriteGMII16(0x06, 0x01ef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8ee);
		WriteGMII16(0x06, 0x8ac9);
		WriteGMII16(0x06, 0x0002);
		WriteGMII16(0x06, 0x8317);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8ac8);
		WriteGMII16(0x06, 0xe18a);
		WriteGMII16(0x06, 0xc91f);
		WriteGMII16(0x06, 0x019e);
		WriteGMII16(0x06, 0x0611);
		WriteGMII16(0x06, 0xe58a);
		WriteGMII16(0x06, 0xc9ae);
		WriteGMII16(0x06, 0x04ee);
		WriteGMII16(0x06, 0x8ac2);
		WriteGMII16(0x06, 0x01fc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xfbbf);
		WriteGMII16(0x06, 0x8ac4);
		WriteGMII16(0x06, 0xef79);
		WriteGMII16(0x06, 0xd200);
		WriteGMII16(0x06, 0xd400);
		WriteGMII16(0x06, 0x221e);
		WriteGMII16(0x06, 0x02bf);
		WriteGMII16(0x06, 0x3024);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7dbf);
		WriteGMII16(0x06, 0x13ff);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x500d);
		WriteGMII16(0x06, 0x4559);
		WriteGMII16(0x06, 0x1fef);
		WriteGMII16(0x06, 0x97dd);
		WriteGMII16(0x06, 0xd308);
		WriteGMII16(0x06, 0x1a93);
		WriteGMII16(0x06, 0xdd12);
		WriteGMII16(0x06, 0x17a2);
		WriteGMII16(0x06, 0x04de);
		WriteGMII16(0x06, 0xffef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfdfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xfbee);
		WriteGMII16(0x06, 0x8ac2);
		WriteGMII16(0x06, 0x03d5);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x06, 0xbf8a);
		WriteGMII16(0x06, 0xc4ef);
		WriteGMII16(0x06, 0x79ef);
		WriteGMII16(0x06, 0x45bf);
		WriteGMII16(0x06, 0x3024);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7dbf);
		WriteGMII16(0x06, 0x13ff);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x50ad);
		WriteGMII16(0x06, 0x2702);
		WriteGMII16(0x06, 0x78ff);
		WriteGMII16(0x06, 0xe18a);
		WriteGMII16(0x06, 0xca1b);
		WriteGMII16(0x06, 0x01aa);
		WriteGMII16(0x06, 0x2eef);
		WriteGMII16(0x06, 0x97d9);
		WriteGMII16(0x06, 0x7900);
		WriteGMII16(0x06, 0x9e2b);
		WriteGMII16(0x06, 0x81dd);
		WriteGMII16(0x06, 0xbf85);
		WriteGMII16(0x06, 0xad02);
		WriteGMII16(0x06, 0x387d);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xef02);
		WriteGMII16(0x06, 0x100c);
		WriteGMII16(0x06, 0x11b0);
		WriteGMII16(0x06, 0xfc0d);
		WriteGMII16(0x06, 0x11bf);
		WriteGMII16(0x06, 0x85aa);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7dd1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x85aa);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7dee);
		WriteGMII16(0x06, 0x8ac2);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x0413);
		WriteGMII16(0x06, 0xa38b);
		WriteGMII16(0x06, 0xb4d3);
		WriteGMII16(0x06, 0x8012);
		WriteGMII16(0x06, 0x17a2);
		WriteGMII16(0x06, 0x04ad);
		WriteGMII16(0x06, 0xffef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfdfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xf9e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad25);
		WriteGMII16(0x06, 0x48e0);
		WriteGMII16(0x06, 0x8a96);
		WriteGMII16(0x06, 0xe18a);
		WriteGMII16(0x06, 0x977c);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x9e35);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x9600);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x9700);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0xbee1);
		WriteGMII16(0x06, 0x8abf);
		WriteGMII16(0x06, 0xe28a);
		WriteGMII16(0x06, 0xc0e3);
		WriteGMII16(0x06, 0x8ac1);
		WriteGMII16(0x06, 0x0237);
		WriteGMII16(0x06, 0x74ad);
		WriteGMII16(0x06, 0x2012);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x9603);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0x97b7);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0xc000);
		WriteGMII16(0x06, 0xee8a);
		WriteGMII16(0x06, 0xc100);
		WriteGMII16(0x06, 0xae11);
		WriteGMII16(0x06, 0x15e6);
		WriteGMII16(0x06, 0x8ac0);
		WriteGMII16(0x06, 0xe78a);
		WriteGMII16(0x06, 0xc1ae);
		WriteGMII16(0x06, 0x08ee);
		WriteGMII16(0x06, 0x8ac0);
		WriteGMII16(0x06, 0x00ee);
		WriteGMII16(0x06, 0x8ac1);
		WriteGMII16(0x06, 0x00fd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xae20);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x06, 0xf8fa);
		WriteGMII16(0x06, 0xef69);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x00e1);
		WriteGMII16(0x06, 0xe001);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x32e0);
		WriteGMII16(0x06, 0x8b40);
		WriteGMII16(0x06, 0xf720);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x40bf);
		WriteGMII16(0x06, 0x3230);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x50ad);
		WriteGMII16(0x06, 0x2821);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x20e1);
		WriteGMII16(0x06, 0xe021);
		WriteGMII16(0x06, 0xad20);
		WriteGMII16(0x06, 0x18e0);
		WriteGMII16(0x06, 0x8b40);
		WriteGMII16(0x06, 0xf620);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x40ee);
		WriteGMII16(0x06, 0x8b3b);
		WriteGMII16(0x06, 0xffe0);
		WriteGMII16(0x06, 0x8a8a);
		WriteGMII16(0x06, 0xe18a);
		WriteGMII16(0x06, 0x8be4);
		WriteGMII16(0x06, 0xe000);
		WriteGMII16(0x06, 0xe5e0);
		WriteGMII16(0x06, 0x01ef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8f9);
		WriteGMII16(0x06, 0xface);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69fa);
		WriteGMII16(0x06, 0xd401);
		WriteGMII16(0x06, 0x55b4);
		WriteGMII16(0x06, 0xfebf);
		WriteGMII16(0x06, 0x1c1e);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x50ac);
		WriteGMII16(0x06, 0x280b);
		WriteGMII16(0x06, 0xbf1c);
		WriteGMII16(0x06, 0x1b02);
		WriteGMII16(0x06, 0x3850);
		WriteGMII16(0x06, 0xac28);
		WriteGMII16(0x06, 0x49ae);
		WriteGMII16(0x06, 0x64bf);
		WriteGMII16(0x06, 0x1c1b);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x50ac);
		WriteGMII16(0x06, 0x285b);
		WriteGMII16(0x06, 0xd000);
		WriteGMII16(0x06, 0x0284);
		WriteGMII16(0x06, 0xcaac);
		WriteGMII16(0x06, 0x2105);
		WriteGMII16(0x06, 0xac22);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x4ebf);
		WriteGMII16(0x06, 0xe0c4);
		WriteGMII16(0x06, 0xbe85);
		WriteGMII16(0x06, 0xf6d2);
		WriteGMII16(0x06, 0x04d8);
		WriteGMII16(0x06, 0x19d9);
		WriteGMII16(0x06, 0x1907);
		WriteGMII16(0x06, 0xdc19);
		WriteGMII16(0x06, 0xdd19);
		WriteGMII16(0x06, 0x0789);
		WriteGMII16(0x06, 0x89ef);
		WriteGMII16(0x06, 0x645e);
		WriteGMII16(0x06, 0x07ff);
		WriteGMII16(0x06, 0x0d65);
		WriteGMII16(0x06, 0x5cf8);
		WriteGMII16(0x06, 0x001e);
		WriteGMII16(0x06, 0x46dc);
		WriteGMII16(0x06, 0x19dd);
		WriteGMII16(0x06, 0x19b2);
		WriteGMII16(0x06, 0xe2d4);
		WriteGMII16(0x06, 0x0001);
		WriteGMII16(0x06, 0xbf1c);
		WriteGMII16(0x06, 0x1b02);
		WriteGMII16(0x06, 0x387d);
		WriteGMII16(0x06, 0xae1d);
		WriteGMII16(0x06, 0xbee0);
		WriteGMII16(0x06, 0xc4bf);
		WriteGMII16(0x06, 0x85f6);
		WriteGMII16(0x06, 0xd204);
		WriteGMII16(0x06, 0xd819);
		WriteGMII16(0x06, 0xd919);
		WriteGMII16(0x06, 0x07dc);
		WriteGMII16(0x06, 0x19dd);
		WriteGMII16(0x06, 0x1907);
		WriteGMII16(0x06, 0xb2f4);
		WriteGMII16(0x06, 0xd400);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x1c1b);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7dfe);
		WriteGMII16(0x06, 0xef96);
		WriteGMII16(0x06, 0xfec6);
		WriteGMII16(0x06, 0xfefd);
		WriteGMII16(0x06, 0xfc05);
		WriteGMII16(0x06, 0xf9e2);
		WriteGMII16(0x06, 0xe0ea);
		WriteGMII16(0x06, 0xe3e0);
		WriteGMII16(0x06, 0xeb5a);
		WriteGMII16(0x06, 0x070c);
		WriteGMII16(0x06, 0x031e);
		WriteGMII16(0x06, 0x20e6);
		WriteGMII16(0x06, 0xe0ea);
		WriteGMII16(0x06, 0xe7e0);
		WriteGMII16(0x06, 0xebe0);
		WriteGMII16(0x06, 0xe0fc);
		WriteGMII16(0x06, 0xe1e0);
		WriteGMII16(0x06, 0xfdfd);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69e0);
		WriteGMII16(0x06, 0x8b80);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x22bf);
		WriteGMII16(0x06, 0x4616);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x50e0);
		WriteGMII16(0x06, 0x8b44);
		WriteGMII16(0x06, 0x1f01);
		WriteGMII16(0x06, 0x9e15);
		WriteGMII16(0x06, 0xe58b);
		WriteGMII16(0x06, 0x44ad);
		WriteGMII16(0x06, 0x2907);
		WriteGMII16(0x06, 0xac28);
		WriteGMII16(0x06, 0x04d1);
		WriteGMII16(0x06, 0x01ae);
		WriteGMII16(0x06, 0x02d1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x85b0);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7def);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad26);
		WriteGMII16(0x06, 0x30e0);
		WriteGMII16(0x06, 0xe036);
		WriteGMII16(0x06, 0xe1e0);
		WriteGMII16(0x06, 0x37e1);
		WriteGMII16(0x06, 0x8b3f);
		WriteGMII16(0x06, 0x1f10);
		WriteGMII16(0x06, 0x9e23);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x3fac);
		WriteGMII16(0x06, 0x200b);
		WriteGMII16(0x06, 0xac21);
		WriteGMII16(0x06, 0x0dac);
		WriteGMII16(0x06, 0x250f);
		WriteGMII16(0x06, 0xac27);
		WriteGMII16(0x06, 0x11ae);
		WriteGMII16(0x06, 0x1202);
		WriteGMII16(0x06, 0x2c47);
		WriteGMII16(0x06, 0xae0d);
		WriteGMII16(0x06, 0x0285);
		WriteGMII16(0x06, 0x4fae);
		WriteGMII16(0x06, 0x0802);
		WriteGMII16(0x06, 0x2c69);
		WriteGMII16(0x06, 0xae03);
		WriteGMII16(0x06, 0x022c);
		WriteGMII16(0x06, 0x7cfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x6902);
		WriteGMII16(0x06, 0x856c);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x14e1);
		WriteGMII16(0x06, 0xe015);
		WriteGMII16(0x06, 0xad26);
		WriteGMII16(0x06, 0x08d1);
		WriteGMII16(0x06, 0x1ebf);
		WriteGMII16(0x06, 0x2cd9);
		WriteGMII16(0x06, 0x0238);
		WriteGMII16(0x06, 0x7def);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8e0);
		WriteGMII16(0x06, 0x8b85);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x2fd0);
		WriteGMII16(0x06, 0x0b02);
		WriteGMII16(0x06, 0x3682);
		WriteGMII16(0x06, 0x5882);
		WriteGMII16(0x06, 0x7882);
		WriteGMII16(0x06, 0x9f24);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x32e1);
		WriteGMII16(0x06, 0x8b33);
		WriteGMII16(0x06, 0x1f10);
		WriteGMII16(0x06, 0x9e1a);
		WriteGMII16(0x06, 0x10e4);
		WriteGMII16(0x06, 0x8b32);
		WriteGMII16(0x06, 0xe0e0);
		WriteGMII16(0x06, 0x28e1);
		WriteGMII16(0x06, 0xe029);
		WriteGMII16(0x06, 0xf72c);
		WriteGMII16(0x06, 0xe4e0);
		WriteGMII16(0x06, 0x28e5);
		WriteGMII16(0x06, 0xe029);
		WriteGMII16(0x06, 0xf62c);
		WriteGMII16(0x06, 0xe4e0);
		WriteGMII16(0x06, 0x28e5);
		WriteGMII16(0x06, 0xe029);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0x00e1);
		WriteGMII16(0x06, 0x4077);
		WriteGMII16(0x06, 0xe140);
		WriteGMII16(0x06, 0x52e0);
		WriteGMII16(0x06, 0xeed9);
		WriteGMII16(0x06, 0xe04c);
		WriteGMII16(0x06, 0xbbe0);
		WriteGMII16(0x06, 0x2a00);
		WriteGMII16(0x05, 0xe142);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x05, 0xe140);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		for (int i = 0; i < 200; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x00);
			if (gphy_val & BIT_7)
				break;
		}
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		gphy_val = ReadGMII16(0x17);
		gphy_val |= BIT_1;
		WriteGMII16(0x17, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x9200);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8b80);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_2 | BIT_1;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002D);
		gphy_val = ReadGMII16(0x18);
		gphy_val |= BIT_4;
		WriteGMII16(0x18, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		gphy_val = ReadGMII16(0x14);
		gphy_val |= BIT_15;
		WriteGMII16(0x14, gphy_val);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B86);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B85);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_14;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1F, 0x0003);
		WriteGMII16(0x09, 0xA20F);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B55);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x05, 0x8B5E);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x05, 0x8B67);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x05, 0x8B70);
		WriteGMII16(0x06, 0x0000);
		WriteGMII16(0x1F, 0x0000);
		WriteGMII16(0x1F, 0x0007);
		WriteGMII16(0x1E, 0x0078);
		WriteGMII16(0x17, 0x0000);
		WriteGMII16(0x19, 0x00FB);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B79);
		WriteGMII16(0x06, 0xAA00);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1f, 0x0003);
		WriteGMII16(0x01, 0x328A);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8B54);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8B5D);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8A7C);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A7F);
		WriteGMII16(0x06, ReadGMII16(0x06) | BIT_8);
		WriteGMII16(0x05, 0x8A82);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A85);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A88);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8b85);
		WriteGMII16(0x06, ReadGMII16(0x06) | BIT_15);
		WriteGMII16(0x1f, 0x0000);
		
/*		if (aspm) {
			WriteGMII16(0x1f, 0x0000);
			gphy_val = ReadGMII16(0x15);
			gphy_val |= BIT_12;
			WriteGMII16(0x15, gphy_val);
		}*/
	} else if (mcfg == MCFG_8168F_2) {
/*		if (aspm) {
			WriteMMIO8(0x6E, ReadMMIO8(0x6E) | BIT_6);
			WriteERI(0x1AE, 2, 0x0403, ERIAR_ExGMAC);
		}*/
    
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x1800);
		gphy_val = ReadGMII16(0x15);
		gphy_val &= ~(BIT_12);
		WriteGMII16(0x15, gphy_val);
		WriteGMII16(0x00, 0x9800);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002f);
		for (int i = 0; i < 1000; i++) {
			IODelay(100);
			gphy_val = ReadGMII16(0x1c);
			if (gphy_val & 0x0080)
				break;
		}
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0307);
		WriteGMII16(0x15, 0x0098);
		WriteGMII16(0x19, 0x7c0b);
		WriteGMII16(0x15, 0x0099);
		WriteGMII16(0x19, 0x6c0b);
		WriteGMII16(0x15, 0x00eb);
		WriteGMII16(0x19, 0x6c0b);
		WriteGMII16(0x15, 0x00f8);
		WriteGMII16(0x19, 0x6f0b);
		WriteGMII16(0x15, 0x00fe);
		WriteGMII16(0x19, 0x6f0f);
		WriteGMII16(0x15, 0x00db);
		WriteGMII16(0x19, 0x6f09);
		WriteGMII16(0x15, 0x00dc);
		WriteGMII16(0x19, 0xaefd);
		WriteGMII16(0x15, 0x00dd);
		WriteGMII16(0x19, 0x6f0b);
		WriteGMII16(0x15, 0x00de);
		WriteGMII16(0x19, 0xc60b);
		WriteGMII16(0x15, 0x00df);
		WriteGMII16(0x19, 0x00fa);
		WriteGMII16(0x15, 0x00e0);
		WriteGMII16(0x19, 0x30e1);
		WriteGMII16(0x15, 0x0000);
		WriteGMII16(0x16, 0x0306);
		WriteGMII16(0x16, 0x0300);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0xfff6);
		WriteGMII16(0x06, 0x0080);
		WriteGMII16(0x05, 0x8000);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0x48f7);
		WriteGMII16(0x06, 0x00e0);
		WriteGMII16(0x06, 0xfff7);
		WriteGMII16(0x06, 0xa080);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0xf602);
		WriteGMII16(0x06, 0x011b);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x2802);
		WriteGMII16(0x06, 0x0135);
		WriteGMII16(0x06, 0x0201);
		WriteGMII16(0x06, 0x4502);
		WriteGMII16(0x06, 0x015f);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0x6b02);
		WriteGMII16(0x06, 0x80e5);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x88e1);
		WriteGMII16(0x06, 0x8b89);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8a1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8b);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8c1e);
		WriteGMII16(0x06, 0x01e1);
		WriteGMII16(0x06, 0x8b8d);
		WriteGMII16(0x06, 0x1e01);
		WriteGMII16(0x06, 0xe18b);
		WriteGMII16(0x06, 0x8e1e);
		WriteGMII16(0x06, 0x01a0);
		WriteGMII16(0x06, 0x00c7);
		WriteGMII16(0x06, 0xaebb);
		WriteGMII16(0x06, 0xbf8b);
		WriteGMII16(0x06, 0x88ec);
		WriteGMII16(0x06, 0x0019);
		WriteGMII16(0x06, 0xa98b);
		WriteGMII16(0x06, 0x90f9);
		WriteGMII16(0x06, 0xeeff);
		WriteGMII16(0x06, 0xf600);
		WriteGMII16(0x06, 0xeeff);
		WriteGMII16(0x06, 0xf7fe);
		WriteGMII16(0x06, 0xd100);
		WriteGMII16(0x06, 0xbf81);
		WriteGMII16(0x06, 0x9802);
		WriteGMII16(0x06, 0x39f3);
		WriteGMII16(0x06, 0xd101);
		WriteGMII16(0x06, 0xbf81);
		WriteGMII16(0x06, 0x9b02);
		WriteGMII16(0x06, 0x39f3);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8dad);
		WriteGMII16(0x06, 0x2014);
		WriteGMII16(0x06, 0xee8b);
		WriteGMII16(0x06, 0x8d00);
		WriteGMII16(0x06, 0xe08a);
		WriteGMII16(0x06, 0x5a78);
		WriteGMII16(0x06, 0x039e);
		WriteGMII16(0x06, 0x0902);
		WriteGMII16(0x06, 0x05fc);
		WriteGMII16(0x06, 0x0280);
		WriteGMII16(0x06, 0x8802);
		WriteGMII16(0x06, 0x32dd);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0xf8f9);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ac);
		WriteGMII16(0x06, 0x261a);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x81ac);
		WriteGMII16(0x06, 0x2114);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ac);
		WriteGMII16(0x06, 0x200e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x85ac);
		WriteGMII16(0x06, 0x2308);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x87ac);
		WriteGMII16(0x06, 0x2402);
		WriteGMII16(0x06, 0xae38);
		WriteGMII16(0x06, 0x021a);
		WriteGMII16(0x06, 0xd6ee);
		WriteGMII16(0x06, 0xe41c);
		WriteGMII16(0x06, 0x04ee);
		WriteGMII16(0x06, 0xe41d);
		WriteGMII16(0x06, 0x04e2);
		WriteGMII16(0x06, 0xe07c);
		WriteGMII16(0x06, 0xe3e0);
		WriteGMII16(0x06, 0x7de0);
		WriteGMII16(0x06, 0xe038);
		WriteGMII16(0x06, 0xe1e0);
		WriteGMII16(0x06, 0x39ad);
		WriteGMII16(0x06, 0x2e1b);
		WriteGMII16(0x06, 0xad39);
		WriteGMII16(0x06, 0x0dd1);
		WriteGMII16(0x06, 0x01bf);
		WriteGMII16(0x06, 0x22c8);
		WriteGMII16(0x06, 0x0239);
		WriteGMII16(0x06, 0xf302);
		WriteGMII16(0x06, 0x21f0);
		WriteGMII16(0x06, 0xae0b);
		WriteGMII16(0x06, 0xac38);
		WriteGMII16(0x06, 0x02ae);
		WriteGMII16(0x06, 0x0602);
		WriteGMII16(0x06, 0x222d);
		WriteGMII16(0x06, 0x0222);
		WriteGMII16(0x06, 0x7202);
		WriteGMII16(0x06, 0x1ae7);
		WriteGMII16(0x06, 0xfdfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x201a);
		WriteGMII16(0x06, 0xf620);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x2afe);
		WriteGMII16(0x06, 0x022c);
		WriteGMII16(0x06, 0x5c02);
		WriteGMII16(0x06, 0x03c5);
		WriteGMII16(0x06, 0x0281);
		WriteGMII16(0x06, 0x6702);
		WriteGMII16(0x06, 0x2e4f);
		WriteGMII16(0x06, 0x0204);
		WriteGMII16(0x06, 0x8902);
		WriteGMII16(0x06, 0x2f7a);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x210b);
		WriteGMII16(0x06, 0xf621);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8e02);
		WriteGMII16(0x06, 0x0445);
		WriteGMII16(0x06, 0x021c);
		WriteGMII16(0x06, 0xb8e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad22);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x22e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0235);
		WriteGMII16(0x06, 0xd4e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad23);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x23e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0231);
		WriteGMII16(0x06, 0xc8e0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad24);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x24e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xe08b);
		WriteGMII16(0x06, 0x8ead);
		WriteGMII16(0x06, 0x2505);
		WriteGMII16(0x06, 0xf625);
		WriteGMII16(0x06, 0xe48b);
		WriteGMII16(0x06, 0x8ee0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad26);
		WriteGMII16(0x06, 0x08f6);
		WriteGMII16(0x06, 0x26e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x022d);
		WriteGMII16(0x06, 0x6ae0);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x05f6);
		WriteGMII16(0x06, 0x27e4);
		WriteGMII16(0x06, 0x8b8e);
		WriteGMII16(0x06, 0x0203);
		WriteGMII16(0x06, 0x8bfc);
		WriteGMII16(0x06, 0x04f8);
		WriteGMII16(0x06, 0xfaef);
		WriteGMII16(0x06, 0x69e0);
		WriteGMII16(0x06, 0x8b80);
		WriteGMII16(0x06, 0xad27);
		WriteGMII16(0x06, 0x22bf);
		WriteGMII16(0x06, 0x479a);
		WriteGMII16(0x06, 0x0239);
		WriteGMII16(0x06, 0xc6e0);
		WriteGMII16(0x06, 0x8b44);
		WriteGMII16(0x06, 0x1f01);
		WriteGMII16(0x06, 0x9e15);
		WriteGMII16(0x06, 0xe58b);
		WriteGMII16(0x06, 0x44ad);
		WriteGMII16(0x06, 0x2907);
		WriteGMII16(0x06, 0xac28);
		WriteGMII16(0x06, 0x04d1);
		WriteGMII16(0x06, 0x01ae);
		WriteGMII16(0x06, 0x02d1);
		WriteGMII16(0x06, 0x00bf);
		WriteGMII16(0x06, 0x819e);
		WriteGMII16(0x06, 0x0239);
		WriteGMII16(0x06, 0xf3ef);
		WriteGMII16(0x06, 0x96fe);
		WriteGMII16(0x06, 0xfc04);
		WriteGMII16(0x06, 0x00e1);
		WriteGMII16(0x06, 0x4077);
		WriteGMII16(0x06, 0xe140);
		WriteGMII16(0x06, 0xbbe0);
		WriteGMII16(0x06, 0x2a00);
		WriteGMII16(0x05, 0xe142);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x05, 0xe140);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x0023);
		gphy_val = ReadGMII16(0x17);
		gphy_val |= BIT_1;
		WriteGMII16(0x17, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(0x00, 0x9200);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8b80);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_2 | BIT_1;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1F, 0x0000);
    
		WriteGMII16(0x1f, 0x0007);
		WriteGMII16(0x1e, 0x002D);
		gphy_val = ReadGMII16(0x18);
		gphy_val |= BIT_4;
		WriteGMII16(0x18, gphy_val);
		WriteGMII16(0x1f, 0x0000);
		gphy_val = ReadGMII16(0x14);
		gphy_val |= BIT_15;
		WriteGMII16(0x14, gphy_val);
    
		WriteGMII16(0x1F, 0x0005);
		WriteGMII16(0x05, 0x8B86);
		gphy_val = ReadGMII16(0x06);
		gphy_val |= BIT_0;
		WriteGMII16(0x06, gphy_val);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8B54);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8B5D);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_11);
		WriteGMII16(0x05, 0x8A7C);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A7F);
		WriteGMII16(0x06, ReadGMII16(0x06) | BIT_8);
		WriteGMII16(0x05, 0x8A82);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A85);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x05, 0x8A88);
		WriteGMII16(0x06, ReadGMII16(0x06) & ~BIT_8);
		WriteGMII16(0x1f, 0x0000);
    
		WriteGMII16(0x1f, 0x0005);
		WriteGMII16(0x05, 0x8b85);
		WriteGMII16(0x06, ReadGMII16(0x06) | BIT_15);
		WriteGMII16(0x1f, 0x0000);
/*
		if (aspm) {
			WriteGMII16(0x1f, 0x0000);
			gphy_val = ReadGMII16(0x15);
			gphy_val |= BIT_12;
			WriteGMII16(0x15, gphy_val);
		} */
	}
}

void RealtekR1000::RTL8168GHwPhyConfig()
{
  u32 gphy_val;
  if (mcfg == CFG_METHOD_21) {
    WriteGMII16( 0x1F, 0x0A46);
    gphy_val = ReadGMII16( 0x10);
    WriteGMII16( 0x1F, 0x0BCC);
    if (gphy_val & BIT_8)
      gphy_val = ReadGMII16( 0x12) & ~BIT_15;
    else
      gphy_val = ReadGMII16( 0x12) | BIT_15;
    WriteGMII16( 0x1F, 0x0A46);
    gphy_val = ReadGMII16( 0x13);
    WriteGMII16( 0x1F, 0x0C41);
    if (gphy_val & BIT_8)
      gphy_val = ReadGMII16( 0x15) | BIT_1;
    else
      gphy_val = ReadGMII16( 0x15) & ~BIT_1;
    
    WriteGMII16( 0x1F, 0x0A44);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_2 | BIT_3);
    
    WriteGMII16( 0x1F, 0x0BCC);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~BIT_8);
    WriteGMII16( 0x1F, 0x0A44);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_7);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_6);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8084);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~(BIT_14 | BIT_13));
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_12);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_1);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_0);
    
    WriteGMII16( 0x1F, 0x0A4B);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_2);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8012);
    WriteGMII16( 0x14, ReadGMII16( 0x14) | BIT_15);
    
    WriteGMII16( 0x1F, 0x0C42);
    gphy_val = ReadGMII16( 0x11);
    gphy_val |= BIT_14;
    gphy_val &= ~BIT_13;
    WriteGMII16( 0x11, gphy_val);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x809A);
    WriteGMII16( 0x14, 0x8022);
    WriteGMII16( 0x13, 0x80A0);
    gphy_val = ReadGMII16( 0x14) & 0x00FF;
    gphy_val |= 0x1000;
    WriteGMII16( 0x14, gphy_val);
    WriteGMII16( 0x13, 0x8088);
    WriteGMII16( 0x14, 0x9222);
    
    WriteGMII16( 0x1F, 0x0BCD);
    WriteGMII16( 0x14, 0x5065);
    WriteGMII16( 0x14, 0xD065);
    WriteGMII16( 0x1F, 0x0BC8);
    WriteGMII16( 0x11, 0x5655);
    WriteGMII16( 0x1F, 0x0BCD);
    WriteGMII16( 0x14, 0x1065);
    WriteGMII16( 0x14, 0x9065);
    WriteGMII16( 0x14, 0x1065);
    
    if (aspm) {
      WriteGMII16( 0x1F, 0x0A43);
      WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_2);
    }
    
    WriteGMII16( 0x1F, 0x0000);
  }
  else if (mcfg == CFG_METHOD_22) {
    WriteGMII16( 0x1F, 0x0BCD);
    WriteGMII16( 0x14, 0x5065);
    WriteGMII16( 0x14, 0xD065);
    WriteGMII16( 0x1F, 0x0BC8);
    WriteGMII16( 0x11, 0x5655);
    WriteGMII16( 0x1F, 0x0BCD);
    WriteGMII16( 0x14, 0x1065);
    WriteGMII16( 0x14, 0x9065);
    WriteGMII16( 0x14, 0x1065);
  }
  else if (mcfg == CFG_METHOD_23) {
    WriteGMII16( 0x1F, 0x0BCC);
    gphy_val = ReadGMII16( 0x14);
    gphy_val |= BIT_8;
    WriteGMII16( 0x14, gphy_val);
    WriteGMII16( 0x1F, 0x0A44);
    gphy_val = ReadGMII16( 0x11);
    gphy_val |= BIT_7 | BIT_6;
    WriteGMII16( 0x11, gphy_val);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8084);
    gphy_val = ReadGMII16( 0x14);
    gphy_val &= ~(BIT_14 | BIT_13);
    WriteGMII16( 0x14, gphy_val);
    gphy_val = ReadGMII16( 0x10);
    gphy_val |= BIT_12;
    WriteGMII16( 0x10, gphy_val);
    gphy_val = ReadGMII16( 0x10);
    gphy_val |= BIT_2 | BIT_1 | BIT_0;
    WriteGMII16( 0x10, gphy_val);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x809C);
    WriteGMII16( 0x14, 0xA700);
    WriteGMII16( 0x13, 0x80A5);
    WriteGMII16( 0x14, 0xA700);
  }
  else if (mcfg == CFG_METHOD_24) {
    WriteGMII16( 0x1F, 0x0BCC);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~BIT_8);
    WriteGMII16( 0x1F, 0x0A44);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_7);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_6);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8084);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~(BIT_14 | BIT_13));
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_12);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_1);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_0);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8012);
    WriteGMII16( 0x14, ReadGMII16( 0x14) | BIT_15);
    
    WriteGMII16( 0x1F, 0x0C42);
    gphy_val = ReadGMII16( 0x11);
    gphy_val |= BIT_14;
    gphy_val &= ~BIT_13;
    WriteGMII16( 0x11, gphy_val);
    
    if (aspm) {
      WriteGMII16( 0x1F, 0x0A43);
      WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_2);
    }
  }
}

void RealtekR1000::RTL8411HwPhyConfig()
{
  u32 gphy_val;
  if (mcfg == MCFG_8411_1) {
    WriteGMII16( 0x1F, 0x0005);
    WriteGMII16( 0x05, 0x8b80);
    gphy_val = ReadGMII16( 0x06);
    gphy_val |= BIT_2 | BIT_1;
    WriteGMII16( 0x06, gphy_val);
    WriteGMII16( 0x1F, 0x0000);
    
    WriteGMII16( 0x1f, 0x0007);
    WriteGMII16( 0x1e, 0x002D);
    gphy_val = ReadGMII16( 0x18);
    gphy_val |= BIT_4;
    WriteGMII16( 0x18, gphy_val);
    WriteGMII16( 0x1f, 0x0000);
    gphy_val = ReadGMII16( 0x14);
    gphy_val |= BIT_15;
    WriteGMII16( 0x14, gphy_val);
    
    WriteGMII16( 0x1F, 0x0005);
    WriteGMII16( 0x05, 0x8B86);
    gphy_val = ReadGMII16( 0x06);
    gphy_val |= BIT_0;
    WriteGMII16( 0x06, gphy_val);
    WriteGMII16( 0x1f, 0x0000);
    
    WriteGMII16( 0x1F, 0x0005);
    WriteGMII16( 0x05, 0x8B85);
    gphy_val = ReadGMII16( 0x06);
    gphy_val |= BIT_14;
    WriteGMII16( 0x06, gphy_val);
    WriteGMII16( 0x1f, 0x0000);
    
    WriteGMII16( 0x1F, 0x0003);
    WriteGMII16( 0x09, 0xA20F);
    WriteGMII16( 0x1F, 0x0000);
    
    WriteGMII16( 0x1F, 0x0005);
    WriteGMII16( 0x05, 0x8B55);
    WriteGMII16( 0x06, 0x0000);
    WriteGMII16( 0x05, 0x8B5E);
    WriteGMII16( 0x06, 0x0000);
    WriteGMII16( 0x05, 0x8B67);
    WriteGMII16( 0x06, 0x0000);
    WriteGMII16( 0x05, 0x8B70);
    WriteGMII16( 0x06, 0x0000);
    WriteGMII16( 0x1F, 0x0000);
    WriteGMII16( 0x1F, 0x0007);
    WriteGMII16( 0x1E, 0x0078);
    WriteGMII16( 0x17, 0x0000);
    WriteGMII16( 0x19, 0x00FB);
    WriteGMII16( 0x1F, 0x0000);
    
    WriteGMII16( 0x1F, 0x0005);
    WriteGMII16( 0x05, 0x8B79);
    WriteGMII16( 0x06, 0xAA00);
    WriteGMII16( 0x1F, 0x0000);
    
    WriteGMII16( 0x1f, 0x0005);
    WriteGMII16( 0x05, 0x8B54);
    WriteGMII16( 0x06, ReadGMII16( 0x06) & ~BIT_11);
    WriteGMII16( 0x05, 0x8B5D);
    WriteGMII16( 0x06, ReadGMII16( 0x06) & ~BIT_11);
    WriteGMII16( 0x05, 0x8A7C);
    WriteGMII16( 0x06, ReadGMII16( 0x06) & ~BIT_8);
    WriteGMII16( 0x05, 0x8A7F);
    WriteGMII16( 0x06, ReadGMII16( 0x06) | BIT_8);
    WriteGMII16( 0x05, 0x8A82);
    WriteGMII16( 0x06, ReadGMII16( 0x06) & ~BIT_8);
    WriteGMII16( 0x05, 0x8A85);
    WriteGMII16( 0x06, ReadGMII16( 0x06) & ~BIT_8);
    WriteGMII16( 0x05, 0x8A88);
    WriteGMII16( 0x06, ReadGMII16( 0x06) & ~BIT_8);
    WriteGMII16( 0x1f, 0x0000);
    
    WriteGMII16( 0x1f, 0x0005);
    WriteGMII16( 0x05, 0x8b85);
    WriteGMII16( 0x06, ReadGMII16( 0x06) | BIT_15);
    WriteGMII16( 0x1f, 0x0000);
    
    if (aspm) {
      WriteGMII16( 0x1f, 0x0000);
      gphy_val = ReadGMII16( 0x15);
      gphy_val |= BIT_12;
      WriteGMII16( 0x15, gphy_val);
    }
  }
  else if (mcfg == CFG_METHOD_25 || mcfg == MCFG_8411B) {
    WriteGMII16( 0x1F, 0x0BCC);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~BIT_8);
    WriteGMII16( 0x1F, 0x0A44);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_7);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_6);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8084);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~(BIT_14 | BIT_13));
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_12);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_1);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_0);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8012);
    WriteGMII16( 0x14, ReadGMII16( 0x14) | BIT_15);
    
    WriteGMII16( 0x1F, 0x0BCE);
    WriteGMII16( 0x12, 0x8860);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x80F3);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8B00);
    WriteGMII16( 0x13, 0x80F0);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x3A00);
    WriteGMII16( 0x13, 0x80EF);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0500);
    WriteGMII16( 0x13, 0x80F6);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6E00);
    WriteGMII16( 0x13, 0x80EC);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6800);
    WriteGMII16( 0x13, 0x80ED);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x7C00);
    WriteGMII16( 0x13, 0x80F2);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xF400);
    WriteGMII16( 0x13, 0x80F4);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8500);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8110);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xA800);
    WriteGMII16( 0x13, 0x810F);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x1D00);
    WriteGMII16( 0x13, 0x8111);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xF500);
    WriteGMII16( 0x13, 0x8113);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6100);
    WriteGMII16( 0x13, 0x8115);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x9200);
    WriteGMII16( 0x13, 0x810E);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0400);
    WriteGMII16( 0x13, 0x810C);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x7C00);
    WriteGMII16( 0x13, 0x810B);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x5A00);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x80D1);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xFF00);
    WriteGMII16( 0x13, 0x80CD);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x9E00);
    WriteGMII16( 0x13, 0x80D3);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0E00);
    WriteGMII16( 0x13, 0x80D5);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xCA00);
    WriteGMII16( 0x13, 0x80D7);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8400);
    
    if (aspm) {
      WriteGMII16( 0x1F, 0x0A43);
      WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_2);
    }
  } else if (mcfg == CFG_METHOD_27) {
    WriteGMII16( 0x1F, 0x0BCC);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~BIT_8);
    WriteGMII16( 0x1F, 0x0A44);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_7);
    WriteGMII16( 0x11, ReadGMII16( 0x11) | BIT_6);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8084);
    WriteGMII16( 0x14, ReadGMII16( 0x14) & ~(BIT_14 | BIT_13));
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_12);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_1);
    WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_0);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8012);
    WriteGMII16( 0x14, ReadGMII16( 0x14) | BIT_15);
    
    WriteGMII16( 0x1F, 0x0C42);
    WriteGMII16( 0x11, (ReadGMII16( 0x11) & ~BIT_13) | BIT_14);
    
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x80F3);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8B00);
    WriteGMII16( 0x13, 0x80F0);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x3A00);
    WriteGMII16( 0x13, 0x80EF);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0500);
    WriteGMII16( 0x13, 0x80F6);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6E00);
    WriteGMII16( 0x13, 0x80EC);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6800);
    WriteGMII16( 0x13, 0x80ED);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x7C00);
    WriteGMII16( 0x13, 0x80F2);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xF400);
    WriteGMII16( 0x13, 0x80F4);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8500);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x8110);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xA800);
    WriteGMII16( 0x13, 0x810F);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x1D00);
    WriteGMII16( 0x13, 0x8111);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xF500);
    WriteGMII16( 0x13, 0x8113);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x6100);
    WriteGMII16( 0x13, 0x8115);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x9200);
    WriteGMII16( 0x13, 0x810E);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0400);
    WriteGMII16( 0x13, 0x810C);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x7C00);
    WriteGMII16( 0x13, 0x810B);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x5A00);
    WriteGMII16( 0x1F, 0x0A43);
    WriteGMII16( 0x13, 0x80D1);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xFF00);
    WriteGMII16( 0x13, 0x80CD);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x9E00);
    WriteGMII16( 0x13, 0x80D3);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x0E00);
    WriteGMII16( 0x13, 0x80D5);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0xCA00);
    WriteGMII16( 0x13, 0x80D7);
    WriteGMII16( 0x14, (ReadGMII16( 0x14) & ~0xFF00) | 0x8400);
    
    WriteGMII16( 0x1F, 0x0BCD);
    WriteGMII16( 0x14, 0x5065);
    WriteGMII16( 0x14, 0xD065);
    WriteGMII16( 0x1F, 0x0BC8);
    WriteGMII16( 0x12, 0x00ED);
    WriteGMII16( 0x1F, 0x0BCD);
    WriteGMII16( 0x14, 0x1065);
    WriteGMII16( 0x14, 0x9065);
    WriteGMII16( 0x14, 0x1065);
    WriteGMII16( 0x1F, 0x0000);
    
    
    if (aspm) {
      WriteGMII16( 0x1F, 0x0A43);
      WriteGMII16( 0x10, ReadGMII16( 0x10) | BIT_2);
    }
  }
  
  
  /*ocp phy power saving*/
  if (mcfg == CFG_METHOD_25 || mcfg == MCFG_8411B || mcfg == CFG_METHOD_27) {
    if (aspm) {
      WriteGMII16( 0x1F, 0x0C41);
      WriteGMII16( 0x13, 0x0000);
      WriteGMII16( 0x13, 0x0050);
      WriteGMII16( 0x1F, 0x0000);
    }
  }
  
}

void RealtekR1000::RTL8168SleepRxEnable()
{
	if ((mcfg == MCFG_8168B_1) ||
		(mcfg == MCFG_8168B_2))
	{
		WriteMMIO8(ChipCmd, CmdReset);
		// Turn off OWN bit in Rx descriptors
		R1000InitRxDescCmds(false);
		WriteMMIO8(ChipCmd, CmdRxEnb);
	}
}

void RealtekR1000::RTL8168PowerDownPLL()
{
//  unsigned long flags;
	int auto_nego = 0;
	int giga_ctrl = 0;
	u32 csi_tmp;

  
//	DLog("RTL8168PowerDownPLL\n");
	if ((mcfg == MCFG_8168DP_1) || (mcfg == MCFG_8168DP_2) ||
      (mcfg == MCFG_8168DP_3) || (mcfg == CFG_METHOD_23))
		return;
	if (((mcfg == MCFG_8168CP_1) || (mcfg == MCFG_8168CP_2))
		&& (ReadMMIO16(CPlusCmd) & ASF))
		return;
  if (mcfg == MCFG_8168E_VL_1 || mcfg == MCFG_8168E_VL_2)
		WriteMMIO8(Config2, ReadMMIO8(Config2) | BIT_5);
	
	if (wol_enabled == WOL_ENABLED) {
		WriteGMII16(0x1F, 0x0000);
		auto_nego = ReadGMII16(PHY_AUTO_NEGO_REG);
		auto_nego &= ~(PHY_Cap_10_Half | PHY_Cap_10_Full
                   | PHY_Cap_100_Half | PHY_Cap_100_Full);
    
    
#ifdef CONFIG_DOWN_SPEED_100
		auto_nego |= (PHY_Cap_100_Full | PHY_Cap_100_Half | PHY_Cap_10_Half | PHY_Cap_10_Full);
#else
		u16 val = ReadGMII16(PHY_ANLPAR);
		if (val & (LPA_10HALF | LPA_10FULL))
			auto_nego |= (PHY_Cap_10_Half | PHY_Cap_10_Full);
		else
			auto_nego |= (PHY_Cap_100_Full | PHY_Cap_100_Half | PHY_Cap_10_Half | PHY_Cap_10_Full);
#endif
		
		giga_ctrl = ReadGMII16(PHY_1000_CTRL_REG) & ~(PHY_Cap_1000_Half | PHY_Cap_1000_Full);
		WriteGMII16(PHY_AUTO_NEGO_REG, auto_nego);
		WriteGMII16(PHY_1000_CTRL_REG, giga_ctrl);
		WriteGMII16(PHY_BMCR, BMCR_RESET | BMCR_ANENABLE | BMCR_ANRESTART);
    
		WriteMMIO32(RxConfig, ReadMMIO32(RxConfig) | AcceptBroadcast | AcceptMulticast | AcceptMyPhys);
		return;
  }
  
  
	RTL8168PowerDownPHY();
	
	switch (mcfg) 
	{
		case MCFG_8168D_1:
		case MCFG_8168D_2:
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
    case MCFG_8168E_1:
    case MCFG_8168E_2:
			WriteMMIO8(PMCH, ReadMMIO8(PMCH) & ~BIT_7);
			break;
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
      WriteMMIO8(PMCH, ReadMMIO8(PMCH) & ~(BIT_7 | BIT_6));
      break;
    case CFG_METHOD_21:
    case CFG_METHOD_22:
      WriteMMIO8(PMCH, ReadMMIO8(PMCH) & ~BIT_6);
      break;
    case CFG_METHOD_24:
      WriteERI(0x3FC, 2, 0x0, ERIAR_ExGMAC);
      csi_tmp = ReadERI(0x3F8, 1, ERIAR_ExGMAC);
      csi_tmp |= BIT_0;
      WriteERI(0x3F8, 1, csi_tmp, ERIAR_ExGMAC);
      break;
    default:
      break;
	}	
}
//rtl8168_powerup_pll
//037 rtl8168_enable_pci_offset_99
void RealtekR1000::RTL8168PowerUpPLL()
{
//  u32 csi_tmp;
//	DLog("RTL8168PowerUpPLL\n");
//	if (mcfg == MCFG_8168DP_1)
//		return;
	
	switch (mcfg) {
//    case CFG_METHOD_23:
//    case CFG_METHOD_27:
//      rtl8168_driver_start(tp);
      return;
    case MCFG_8168D_1:
    case MCFG_8168D_2:
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
    case MCFG_8168E_1:
    case MCFG_8168E_2:
//      WriteMMIO8(PMCH, ReadMMIO8(PMCH) | BIT_7);
//      break;
//    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      WriteMMIO8(PMCH, ReadMMIO8(PMCH) | BIT_7 | BIT_6);
      break;
/*    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
//      WriteMMIO8(PMCH, ReadMMIO8(PMCH) | BIT_6);
      csi_tmp = ReadERI(0x3F2, 2, ERIAR_ExGMAC);
      csi_tmp &= ~(BIT_0 | BIT_1);
      if (!(org_pci_offset_99 & (BIT_5 | BIT_6)))
            csi_tmp |= BIT_1;
      if (!(org_pci_offset_99 & BIT_2))
            csi_tmp |= BIT_0;
      WriteERI(0x3F2, 2, csi_tmp, ERIAR_ExGMAC);
      break; */
	}
	
	RTL8168PowerUpPHY();
	RTL8168SetMedium(autoneg, speed, duplex);
}

//rtl8168_phy_power_down
void RealtekR1000::RTL8168PowerDownPHY()
{
//	DLog("RTL8168PowerDownPHY\n");
	WriteGMII16(0x1F, 0x0000);
  switch (mcfg) {
    case MCFG_8168B_1:
    case MCFG_8168B_2:
    case MCFG_8168B_3:
    case MCFG_8168C_1:
    case MCFG_8168C_2:
    case MCFG_8168C_3:
    case MCFG_8168CP_1:
    case MCFG_8168CP_2:
    case MCFG_8168D_1:
    case MCFG_8168D_2:
    case MCFG_8168DP_1:
    case MCFG_8168DP_2:
    case MCFG_8168DP_3:
    //previously my E-VL was here
      WriteGMII16(0x0E, 0x0200);
      WriteGMII16(PHY_BMCR, BMCR_PDOWN);
      break;
    case MCFG_8168E_1:
    case MCFG_8168E_2:
      WriteGMII16(PHY_BMCR, BMCR_ANENABLE | BMCR_PDOWN);
      break;
    default:
      WriteGMII16(0x0E, 0x0200); //Slice - add here for E_VL and others
      WriteGMII16(PHY_BMCR, BMCR_PDOWN);
      break;
	}
}

//rtl8168_phy_power_up
void RealtekR1000::RTL8168PowerUpPHY()
{
  u32 csi_tmp;
//	DLog("RTL8168PowerUpPHY\n");
	WriteGMII16(0x1F, 0x0000);
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case CFG_METHOD_27:
      csi_tmp = ReadERI(0x1AB, 1, ERIAR_ExGMAC);
      csi_tmp |=  ( BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7 );
      WriteERI(0x1AB, 1, csi_tmp, ERIAR_ExGMAC);
      break;
    default:
      WriteGMII16(0x0E, 0x0000);
      break;
	}
//  WriteGMII16(0x0E, 0x0000);
	WriteGMII16(PHY_BMCR, PHY_Enable_Auto_Nego);  
}

//rtl8168_set_speed_xmii
void RealtekR1000::RTL8168SetMedium(ushort speedIn, uchar duplexIn, uchar autonegIn)
{
	u16 auto_nego = 0;
	u16 giga_ctrl = 0;
	
	if ((speedIn != SPEED_1000) && 
	    (speedIn != SPEED_100) && 
	    (speedIn != SPEED_10)) 
	{
		speedIn = SPEED_1000;
		duplexIn = DUPLEX_FULL;
	}
	
	if ((autonegIn == AUTONEG_ENABLE) ||
		(speedIn == SPEED_1000))
	{
		/*n-way force*/
		if ((speedIn == SPEED_10) && (duplexIn == DUPLEX_HALF)) {
			auto_nego |= PHY_Cap_10_Half;
		} else if ((speedIn == SPEED_10) && (duplexIn == DUPLEX_FULL)) {
			auto_nego |= PHY_Cap_10_Half |
			PHY_Cap_10_Full;
		}	else if ((speedIn == SPEED_100) && (duplexIn == DUPLEX_HALF)) {
			auto_nego |= PHY_Cap_100_Half | 
			PHY_Cap_10_Half | 
			PHY_Cap_10_Full;
		} else if ((speedIn == SPEED_100) && (duplexIn == DUPLEX_FULL)) {
			auto_nego |= PHY_Cap_100_Half | 
			PHY_Cap_100_Full |
			PHY_Cap_10_Half | 
			PHY_Cap_10_Full;
		} else if (speedIn == SPEED_1000) {
			giga_ctrl |= PHY_Cap_1000_Half | 
			PHY_Cap_1000_Full;
			
			auto_nego |= PHY_Cap_100_Half | 
			PHY_Cap_100_Full |
			PHY_Cap_10_Half | 
			PHY_Cap_10_Full;
		}
		
		//disable flow control
		auto_nego &= ~PHY_Cap_PAUSE;
		auto_nego &= ~PHY_Cap_ASYM_PAUSE;
		
		// save for later
		autoneg = autonegIn;
		speed = speedIn; 
		duplex = duplexIn; 
				
		RTL8168PowerUpPHY();
		
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(PHY_AUTO_NEGO_REG, auto_nego);
		WriteGMII16(PHY_1000_CTRL_REG, giga_ctrl);
		WriteGMII16(PHY_BMCR, BMCR_RESET | BMCR_ANENABLE | BMCR_ANRESTART);
    IOSleep(20);
	}
	else
	{
		/*true force*/
		u16 bmcr_true_force = 0;

		if ((speedIn == SPEED_10) && (duplexIn == DUPLEX_HALF)) {
			bmcr_true_force = BMCR_SPEED10;
		} else if ((speedIn == SPEED_10) && (duplexIn == DUPLEX_FULL)) {
			bmcr_true_force = BMCR_SPEED10 | BMCR_FULLDPLX;
		} else if ((speedIn == SPEED_100) && (duplexIn == DUPLEX_HALF)) {
			bmcr_true_force = BMCR_SPEED100;
		} else if ((speedIn == SPEED_100) && (duplexIn == DUPLEX_FULL)) {
			bmcr_true_force = BMCR_SPEED100 | BMCR_FULLDPLX;
		}
		
		WriteGMII16(0x1f, 0x0000);
		WriteGMII16(PHY_BMCR, bmcr_true_force);
	}
	
	if (mcfg == MCFG_8168DP_1)
	{
		if (speedIn == SPEED_10)
		{
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x10, 0x04EE);
		} 
		else
		{
			WriteGMII16(0x1F, 0x0000);
			WriteGMII16(0x10, 0x01EE);
		}
	}
}


void RealtekR1000::RTL8168DSM(int dev_state)
{
//	DLog("RTL8168DSM\n");
	switch (dev_state) 
	{
		case DSM_MAC_INIT:
			if ((mcfg == MCFG_8168C_2) ||
				(mcfg == MCFG_8168C_3)) 
			{
				if (ReadMMIO8(MACDBG) & 0x80) 
				{
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) | GPIO_en);
				}
				else
				{
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) & ~GPIO_en);
				}
			}
			
			break;
			
		case DSM_NIC_GOTO_D3:
		case DSM_IF_DOWN:
			if ((mcfg == MCFG_8168C_2) || 
				(mcfg == MCFG_8168C_3))
				if (ReadMMIO8(MACDBG) & 0x80)
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) & ~GPIO_en);
			
			break;
			
		case DSM_NIC_RESUME_D3:
		case DSM_IF_UP:
			if ((mcfg == MCFG_8168C_2) ||
				(mcfg == MCFG_8168C_3))
				if (ReadMMIO8(MACDBG) & 0x80)
					WriteMMIO8(GPIO, ReadMMIO8(GPIO) | GPIO_en);
			
			break;
	}
	
}


void RealtekR1000::mac_ocp_write(u16 reg_addr, u16 value)
{
  u32 data32;
  
  data32 = reg_addr/2;
  data32 <<= OCPR_Addr_Reg_shift;
  data32 += value;
  data32 |= OCPR_Write;
  
  WriteMMIO32(MACOCP, data32);
}

u16 RealtekR1000::mac_ocp_read(u16 reg_addr)
{
  u32 data32;
  u16 data16 = 0;
  
  data32 = reg_addr/2;
  data32 <<= OCPR_Addr_Reg_shift;
  
  WriteMMIO32(MACOCP, data32);
  data16 = (u16)ReadMMIO32(MACOCP);
  
  return data16;
}

u32 RealtekR1000::OCP_read(u8 mask, u16 Reg)
{
  int i;
  
  if (mcfg == CFG_METHOD_23 || mcfg == CFG_METHOD_27) {
    WriteMMIO32(ERIAR, ERIAR_Read |
                ERIAR_OOB << ERIAR_Type_shift |
                mask << ERIAR_ByteEn_shift |
                Reg);
    
    for (i = 0; i < 10; i++) {
      IODelay(100);
      /* Check if the RTL8168 has completed ERI read */
      if (ReadMMIO32(ERIAR) & ERIAR_Flag)
        break;
    }
    
    return ReadMMIO32(ERIDR);
  } else {
    WriteMMIO32(OCPAR, ((u32)mask&0xF)<<12 | (Reg&0xFFF));
    for (i = 0; i < 20; i++) {
      IODelay(100);
      if (ReadMMIO32(OCPAR) & OCPAR_Flag)
        break;
    }
    return ReadMMIO32(OCPDR);
  }
}

void RealtekR1000::OCP_write(u8 mask, u16 Reg, u32 data)
{
  int i;
  
  if (mcfg == CFG_METHOD_23 || mcfg == CFG_METHOD_27) {
    WriteMMIO32(ERIDR, data);
    WriteMMIO32(ERIAR, ERIAR_Write |
                ERIAR_OOB << ERIAR_Type_shift |
                mask << ERIAR_ByteEn_shift |
                Reg);
    
    for (i = 0; i < 10; i++) {
      IODelay(100);
      /* Check if the RTL8168 has completed ERI write */
      if (!(ReadMMIO32(ERIAR) & ERIAR_Flag))
        break;
    }
  } else {
    WriteMMIO32(OCPDR, data);
    WriteMMIO32(OCPAR, OCPAR_Flag | ((u32)mask & 0xF)<<12 | (Reg & 0xFFF));
    for (i = 0; i < 20; i++) {
      IODelay(100);
      if ((ReadMMIO32(OCPAR) & OCPAR_Flag) == 0)
        break;
    }
  }
}


void RealtekR1000::RTL8168WriteOCP_GPHY(int RegAddr, u16 value)
{
	WriteMMIO32(OCPDR, OCPDR_Write |
				(RegAddr & OCPDR_Reg_Mask) << OCPDR_GPHY_Reg_shift |
				(value & OCPDR_Data_Mask));
	WriteMMIO32(OCPAR, OCPAR_GPHY_Write);
	WriteMMIO32(EPHY_RXER_NUM, 0);
	
	for (int ocp_wcnt = 0; ocp_wcnt < 100; ocp_wcnt++)
	{
		IOSleep(2);
		
		if (!(ReadMMIO32(OCPAR) & OCPAR_Flag))
			break;
	}
}

u16 RealtekR1000::RTL8168ReadOCP_GPHY(int RegAddr)
{
	u16 value = 0xFFFF;
	
	WriteMMIO32(OCPDR, OCPDR_Read |
				(RegAddr & OCPDR_Reg_Mask) << OCPDR_GPHY_Reg_shift);
	WriteMMIO32(OCPAR, OCPAR_GPHY_Write);
	WriteMMIO32(EPHY_RXER_NUM, 0);
	
	for (int ocp_rcnt = 0; ocp_rcnt < 100; ocp_rcnt++)
	{
		IOSleep(2);
		
		if (!(ReadMMIO32(OCPAR) & OCPAR_Flag))
			break;
	}
	
	WriteMMIO32(OCPAR, OCPAR_GPHY_Read);
	value = static_cast<u16>(ReadMMIO32(OCPDR) & OCPDR_Data_Mask);
	
	return value;
}

u8 RealtekR1000::RTL8168ReadEfuse(u16 reg)
{
	if (efuse == EFUSE_NOT_SUPPORT)
		return EFUSE_READ_FAIL;
	
	u32 temp = EFUSE_READ | ((reg & EFUSE_Reg_Mask) << EFUSE_Reg_Shift);
	WriteMMIO32(EFUSEAR, temp);
	
	u8 efuse_data;
	int cnt = 0;
	do {
		IODelay(100);
		temp = ReadMMIO32(EFUSEAR);
		cnt++;
	} while (!(temp & EFUSE_READ_OK) && (temp < EFUSE_Check_Cnt));
	
	if (temp == EFUSE_Check_Cnt)
		efuse_data = EFUSE_READ_FAIL;
	else
		efuse_data = static_cast<u8>(ReadMMIO32(EFUSEAR) & EFUSE_Data_Mask);
	
	return efuse_data;
}


void RealtekR1000::rtl8168_disable_pci_offset_99()
{
  u32 csi_tmp;
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      csi_tmp = ReadERI(0x3F2, 2, ERIAR_ExGMAC);
      csi_tmp &= ~(BIT_0 | BIT_1);
      WriteERI(0x3F2, 2, csi_tmp, ERIAR_ExGMAC);
      break;
  }
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case MCFG_8411B:
      rtl8168_csi_fun0_write_byte(0x99, 0x00);
      break;
  }
}

void RealtekR1000::rtl8168_enable_pci_offset_99()
{
  u32 csi_tmp;
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      csi_tmp = ReadERI(0x3F2, 2, ERIAR_ExGMAC);
      csi_tmp &= ~(BIT_0 | BIT_1);
      if (!(org_pci_offset_99 & (BIT_5 | BIT_6)))
        csi_tmp |= BIT_1;
      if (!(org_pci_offset_99 & BIT_2))
        csi_tmp |= BIT_0;
      WriteERI(0x3F2, 2, csi_tmp, ERIAR_ExGMAC);
      break;
  }
}

void RealtekR1000::rtl8168_init_pci_offset_99()
{
  u32 csi_tmp;
  
  switch (mcfg) {
    case MCFG_8411B:
      csi_tmp = ReadERI(0x5C2, 1, ERIAR_ExGMAC);
      csi_tmp &= ~BIT_1;
      WriteERI(0x5C2, 1, csi_tmp, ERIAR_ExGMAC);
      break;
  }
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      csi_tmp = ReadERI(0x3F2, 2, ERIAR_ExGMAC);
      csi_tmp &= ~( BIT_8 | BIT_9  | BIT_10 | BIT_11  | BIT_12  | BIT_13  | BIT_14 | BIT_15 );
      csi_tmp |= ( BIT_9 | BIT_10 | BIT_13  | BIT_14 | BIT_15 );
      WriteERI(0x3F2, 2, csi_tmp, ERIAR_ExGMAC);
      csi_tmp = ReadERI(0x3F5, 1, ERIAR_ExGMAC);
      csi_tmp |= BIT_6 | BIT_7;
      WriteERI(0x3F5, 1, csi_tmp, ERIAR_ExGMAC);
      mac_ocp_write(0xE02C, 0x1880);
      mac_ocp_write(0xE02E, 0x4880);
      break;
  }
  
  switch (mcfg) {
    case MCFG_8411B:
      csi_tmp = ReadERI(0x5C8, 1, ERIAR_ExGMAC);
      csi_tmp |= BIT_0;
      WriteERI(0x5C8, 1, csi_tmp, ERIAR_ExGMAC);
      break;
  }
  
  switch (mcfg) {
    case CFG_METHOD_23:
      WriteERI(0x2E8, 2, 0x883C, ERIAR_ExGMAC);
      WriteERI(0x2EA, 2, 0x8C12, ERIAR_ExGMAC);
      WriteERI(0x2EC, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2E2, 2, 0x883C, ERIAR_ExGMAC);
      WriteERI(0x2E4, 2, 0x8C12, ERIAR_ExGMAC);
      WriteERI(0x2E6, 2, 0x9003, ERIAR_ExGMAC);
      break;
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      WriteERI(0x2E8, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2EA, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2EC, 2, 0x9003, ERIAR_ExGMAC);
      WriteERI(0x2E2, 2, 0x883C, ERIAR_ExGMAC);
      WriteERI(0x2E4, 2, 0x8C12, ERIAR_ExGMAC);
      WriteERI(0x2E6, 2, 0x9003, ERIAR_ExGMAC);
      csi_tmp = ReadERI(0x3FA, 2, ERIAR_ExGMAC);
      csi_tmp |= BIT_14;
      WriteERI(0x3FA, 2, csi_tmp, ERIAR_ExGMAC);
      
      break;
  }
  
  rtl8168_enable_pci_offset_99();
  
  switch (mcfg) {
    case MCFG_8411B:
      WriteMMIO8(0xB6, ReadMMIO8(0xB6) | BIT_0);
      break;
  }
}

void RealtekR1000::rtl8168_disable_pci_offset_180()
{
  u32 csi_tmp;
  
  switch (mcfg) {
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      csi_tmp = ReadERI(0x1E2, 1, ERIAR_ExGMAC);
      csi_tmp &= ~BIT_2;
      WriteERI(0x1E2, 1, csi_tmp, ERIAR_ExGMAC);
      break;
  }
  
  switch (mcfg) {
    case MCFG_8411B:
      WriteERI(0x1E9, 1, 0x0A, ERIAR_ExGMAC);
      break;
  }
}

void RealtekR1000::rtl8168_enable_pci_offset_180()
{
  u32 csi_tmp;
  
  switch (mcfg) {
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      csi_tmp = ReadERI(0x1E2, 1, ERIAR_ExGMAC);
      csi_tmp &= ~BIT_2;
      if (org_pci_offset_180 & (BIT_0|BIT_1))
        csi_tmp |= BIT_2;
      WriteERI(0x1E2, 1, csi_tmp, ERIAR_ExGMAC);
      break;
  }
  
  switch (mcfg) {
    case MCFG_8411B:
      if (org_pci_offset_180 & (BIT_0|BIT_1))
        WriteERI(0x1E9, 1, 0x64, ERIAR_ExGMAC);
      else
        WriteERI(0x1E9, 1, 0x0A, ERIAR_ExGMAC);
      break;
  }
}

void RealtekR1000::rtl8168_init_pci_offset_180()
{
  rtl8168_enable_pci_offset_180();
}

void RealtekR1000::rtl8168_set_pci_99_180_exit_driver_para()
{
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case CFG_METHOD_27:
      rtl8168_issue_offset_99_event();
      break;
  }
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      rtl8168_disable_pci_offset_99();
      break;
  }
  switch (mcfg) {
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      rtl8168_disable_pci_offset_180();
      break;
  }
}

void RealtekR1000::rtl8168_issue_offset_99_event()
{
  u32 csi_tmp;
  
  switch (mcfg) {
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case CFG_METHOD_27:
      if (mcfg == CFG_METHOD_24 || mcfg == CFG_METHOD_25 ||
          mcfg == CFG_METHOD_27) {
        WriteERI(0x3FC, 4, 0x00000000, ERIAR_ExGMAC);
      } else {
        WriteERI(0x3FC, 4, 0x083C083C, ERIAR_ExGMAC);
      }
      csi_tmp = ReadERI(0x3F8, 1, ERIAR_ExGMAC);
      csi_tmp |= BIT_0;
      WriteERI(0x3F8, 1, csi_tmp, ERIAR_ExGMAC);
      break;
  }
}

void RealtekR1000::rtl8168_hw_d3_para()
{
//  unsigned long flags;
  
  WriteMMIO16(RxMaxSize, RX_BUF_SIZE);
  
  switch (mcfg) {
    case MCFG_8168E_1:
    case MCFG_8168E_2:
    case MCFG_8168E_VL_1:
    case MCFG_8168E_VL_2:
    case MCFG_8168F_1:
    case MCFG_8168F_2:
    case MCFG_8411_1:
    case CFG_METHOD_21:
    case CFG_METHOD_22:
    case CFG_METHOD_23:
    case CFG_METHOD_24:
    case CFG_METHOD_25:
    case MCFG_8411B:
    case CFG_METHOD_27:
      WriteMMIO8(0xF1, ReadMMIO8(0xF1) & ~BIT_7);
      WriteMMIO8(Cfg9346, Cfg9346_Unlock);
      WriteMMIO8(Config2, ReadMMIO8(Config2) & ~BIT_7);
      WriteMMIO8(Config5, ReadMMIO8(Config5) & ~BIT_0);
      WriteMMIO8(Cfg9346, Cfg9346_Lock);
      break;
  }
  
  if (mcfg == CFG_METHOD_21 || mcfg == CFG_METHOD_22 ||
      mcfg == CFG_METHOD_23 || mcfg == CFG_METHOD_24 ||
      mcfg == CFG_METHOD_25 || mcfg == MCFG_8411B ||
      mcfg == CFG_METHOD_27) {
    WriteERI(0x2F8, 2, 0x0064, ERIAR_ExGMAC);
  }
  
  if (bios_setting & BIT_28) {
    if (mcfg == MCFG_8168F_1 || mcfg == MCFG_8168F_2 ||
        mcfg == MCFG_8411_1) {
      u32 gphy_val;
      
      WriteGMII16( 0x1F, 0x0000);
      WriteGMII16( 0x04, 0x0061);
      WriteGMII16( 0x09, 0x0000);
      WriteGMII16( 0x00, 0x9200);
      WriteGMII16( 0x1F, 0x0005);
      WriteGMII16( 0x05, 0x8B80);
      gphy_val = ReadGMII16( 0x06);
      gphy_val &= ~BIT_7;
      WriteGMII16( 0x06, gphy_val);
      IOSleep(2);
      WriteGMII16( 0x1F, 0x0007);
      WriteGMII16( 0x1E, 0x002C);
      gphy_val = ReadGMII16( 0x16);
      gphy_val &= ~BIT_10;
      WriteGMII16( 0x16, gphy_val);
      WriteGMII16( 0x1F, 0x0000);
    }
  }
  
  rtl8168_set_pci_99_180_exit_driver_para();
  
  /*disable ocp phy power saving*/
  if (mcfg == CFG_METHOD_25 || mcfg == MCFG_8411B || mcfg == CFG_METHOD_27) {
    WriteGMII16( 0x1F, 0x0C41);
    WriteGMII16( 0x13, 0x0000);
    WriteGMII16( 0x13, 0x0500);
    WriteGMII16( 0x1F, 0x0000);
  }
  
  rtl8168_disable_rxdvgate();
}

/******************************************************************************
 * rtl8168_rar_set - Puts an ethernet address into a receive address register.
 *
 * tp - The private data structure for driver
 * addr - Address to put into receive address register
 *****************************************************************************/
void RealtekR1000::rtl8168_rar_set(uint8_t *addr)
{
  uint32_t rar_low = 0;
  uint32_t rar_high = 0;
  
  rar_low = ((uint32_t) addr[0] |
             ((uint32_t) addr[1] << 8) |
             ((uint32_t) addr[2] << 16) |
             ((uint32_t) addr[3] << 24));
  
  rar_high = ((uint32_t) addr[4] |
              ((uint32_t) addr[5] << 8));
  
  WriteMMIO8(Cfg9346, Cfg9346_Unlock);
  WriteMMIO32(MAC0, rar_low);
  WriteMMIO32(MAC4, rar_high);
  
  if (mcfg == MCFG_8168E_VL_2) {
    WriteERI(0xe0, 4, rar_low, ERIAR_ExGMAC);
    WriteERI(0xe4, 4, rar_high, ERIAR_ExGMAC);
    WriteERI(0xf0, 4, rar_low << 16, ERIAR_ExGMAC);
    WriteERI(0xf4, 4, rar_low >> 16 | rar_high << 16, ERIAR_ExGMAC);
  }
  
  WriteMMIO8(Cfg9346, Cfg9346_Lock);
}

